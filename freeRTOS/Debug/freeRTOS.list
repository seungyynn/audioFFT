
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005458  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080055f8  080055f8  000155f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056d8  080056d8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080056d8  080056d8  000156d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056e0  080056e0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056e0  080056e0  000156e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056e4  080056e4  000156e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080056e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b1c  2000006c  08005754  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b88  08005754  00024b88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011b6e  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cd8  00000000  00000000  00031c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f30  00000000  00000000  00034928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b93  00000000  00000000  00035858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000043d7  00000000  00000000  000363eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000127cd  00000000  00000000  0003a7c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091c4f  00000000  00000000  0004cf8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000445c  00000000  00000000  000debe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080055e0 	.word	0x080055e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080055e0 	.word	0x080055e0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 faa0 	bl	8000a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f834 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8c4 	bl	8000674 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f898 	bl	8000620 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f001 fe6a 	bl	80021c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f4:	4a0d      	ldr	r2, [pc, #52]	; (800052c <main+0x50>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	480d      	ldr	r0, [pc, #52]	; (8000530 <main+0x54>)
 80004fa:	f001 feaf 	bl	800225c <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a0c      	ldr	r2, [pc, #48]	; (8000534 <main+0x58>)
 8000502:	6013      	str	r3, [r2, #0]

  /* creation of task1 */
  task1Handle = osThreadNew(funcTask1, NULL, &task1_attributes);
 8000504:	4a0c      	ldr	r2, [pc, #48]	; (8000538 <main+0x5c>)
 8000506:	2100      	movs	r1, #0
 8000508:	480c      	ldr	r0, [pc, #48]	; (800053c <main+0x60>)
 800050a:	f001 fea7 	bl	800225c <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <main+0x64>)
 8000512:	6013      	str	r3, [r2, #0]

  /* creation of task2 */
  task2Handle = osThreadNew(funcTask2, NULL, &task2_attributes);
 8000514:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <main+0x68>)
 8000516:	2100      	movs	r1, #0
 8000518:	480b      	ldr	r0, [pc, #44]	; (8000548 <main+0x6c>)
 800051a:	f001 fe9f 	bl	800225c <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a0a      	ldr	r2, [pc, #40]	; (800054c <main+0x70>)
 8000522:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000524:	f001 fe74 	bl	8002210 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000528:	e7fe      	b.n	8000528 <main+0x4c>
 800052a:	bf00      	nop
 800052c:	08005654 	.word	0x08005654
 8000530:	080006a9 	.word	0x080006a9
 8000534:	200000d0 	.word	0x200000d0
 8000538:	08005678 	.word	0x08005678
 800053c:	080006cd 	.word	0x080006cd
 8000540:	200000d4 	.word	0x200000d4
 8000544:	0800569c 	.word	0x0800569c
 8000548:	080006e9 	.word	0x080006e9
 800054c:	200000d8 	.word	0x200000d8

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2230      	movs	r2, #48	; 0x30
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f004 fd7a 	bl	8005058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	4b27      	ldr	r3, [pc, #156]	; (8000618 <SystemClock_Config+0xc8>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a26      	ldr	r2, [pc, #152]	; (8000618 <SystemClock_Config+0xc8>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b24      	ldr	r3, [pc, #144]	; (8000618 <SystemClock_Config+0xc8>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b21      	ldr	r3, [pc, #132]	; (800061c <SystemClock_Config+0xcc>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a20      	ldr	r2, [pc, #128]	; (800061c <SystemClock_Config+0xcc>)
 800059a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b1e      	ldr	r3, [pc, #120]	; (800061c <SystemClock_Config+0xcc>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ac:	2302      	movs	r3, #2
 80005ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b4:	2310      	movs	r3, #16
 80005b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b8:	2302      	movs	r3, #2
 80005ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005bc:	2300      	movs	r3, #0
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c0:	2308      	movs	r3, #8
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80005c4:	2364      	movs	r3, #100	; 0x64
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005cc:	2304      	movs	r3, #4
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fd01 	bl	8000fdc <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e0:	f000 f894 	bl	800070c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2302      	movs	r3, #2
 80005ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2103      	movs	r1, #3
 8000600:	4618      	mov	r0, r3
 8000602:	f000 ff63 	bl	80014cc <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800060c:	f000 f87e 	bl	800070c <Error_Handler>
  }
}
 8000610:	bf00      	nop
 8000612:	3750      	adds	r7, #80	; 0x50
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_USART2_UART_Init+0x50>)
 8000628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <MX_USART2_UART_Init+0x4c>)
 800062c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_USART2_UART_Init+0x4c>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_USART2_UART_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000658:	f001 f918 	bl	800188c <HAL_UART_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000662:	f000 f853 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000088 	.word	0x20000088
 8000670:	40004400 	.word	0x40004400

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_GPIO_Init+0x30>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a08      	ldr	r2, [pc, #32]	; (80006a4 <MX_GPIO_Init+0x30>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_GPIO_Init+0x30>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800

080006a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	initUart(&huart2);
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <StartDefaultTask+0x1c>)
 80006b2:	f000 f961 	bl	8000978 <initUart>
  /* Infinite loop */
  for(;;)
  {
  	printf("default task\n");
 80006b6:	4804      	ldr	r0, [pc, #16]	; (80006c8 <StartDefaultTask+0x20>)
 80006b8:	f004 fbee 	bl	8004e98 <puts>
    osDelay(50);
 80006bc:	2032      	movs	r0, #50	; 0x32
 80006be:	f001 fe5f 	bl	8002380 <osDelay>
  {
 80006c2:	e7f8      	b.n	80006b6 <StartDefaultTask+0xe>
 80006c4:	20000088 	.word	0x20000088
 80006c8:	08005614 	.word	0x08005614

080006cc <funcTask1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_funcTask1 */
void funcTask1(void *argument)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN funcTask1 */
  /* Infinite loop */
  for(;;)
  {
  	printf("funcTask1\n");
 80006d4:	4803      	ldr	r0, [pc, #12]	; (80006e4 <funcTask1+0x18>)
 80006d6:	f004 fbdf 	bl	8004e98 <puts>
    osDelay(789);
 80006da:	f240 3015 	movw	r0, #789	; 0x315
 80006de:	f001 fe4f 	bl	8002380 <osDelay>
  {
 80006e2:	e7f7      	b.n	80006d4 <funcTask1+0x8>
 80006e4:	08005624 	.word	0x08005624

080006e8 <funcTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_funcTask2 */
void funcTask2(void *argument)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	printf("funcTast2\n");
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <funcTask2+0x20>)
 80006f2:	f004 fbd1 	bl	8004e98 <puts>
	osDelay(1230);
 80006f6:	f240 40ce 	movw	r0, #1230	; 0x4ce
 80006fa:	f001 fe41 	bl	8002380 <osDelay>
  /* USER CODE BEGIN funcTask2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006fe:	2001      	movs	r0, #1
 8000700:	f001 fe3e 	bl	8002380 <osDelay>
 8000704:	e7fb      	b.n	80006fe <funcTask2+0x16>
 8000706:	bf00      	nop
 8000708:	08005630 	.word	0x08005630

0800070c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000710:	b672      	cpsid	i
}
 8000712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000714:	e7fe      	b.n	8000714 <Error_Handler+0x8>
	...

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_MspInit+0x54>)
 8000724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000726:	4a11      	ldr	r2, [pc, #68]	; (800076c <HAL_MspInit+0x54>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072c:	6453      	str	r3, [r2, #68]	; 0x44
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <HAL_MspInit+0x54>)
 8000730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <HAL_MspInit+0x54>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	4a0a      	ldr	r2, [pc, #40]	; (800076c <HAL_MspInit+0x54>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000748:	6413      	str	r3, [r2, #64]	; 0x40
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <HAL_MspInit+0x54>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	210f      	movs	r1, #15
 800075a:	f06f 0001 	mvn.w	r0, #1
 800075e:	f000 fa90 	bl	8000c82 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a19      	ldr	r2, [pc, #100]	; (80007f4 <HAL_UART_MspInit+0x84>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d12b      	bne.n	80007ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <HAL_UART_MspInit+0x88>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	4a17      	ldr	r2, [pc, #92]	; (80007f8 <HAL_UART_MspInit+0x88>)
 800079c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a0:	6413      	str	r3, [r2, #64]	; 0x40
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <HAL_UART_MspInit+0x88>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <HAL_UART_MspInit+0x88>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a10      	ldr	r2, [pc, #64]	; (80007f8 <HAL_UART_MspInit+0x88>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <HAL_UART_MspInit+0x88>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007ca:	230c      	movs	r3, #12
 80007cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2302      	movs	r3, #2
 80007d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d6:	2303      	movs	r3, #3
 80007d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007da:	2307      	movs	r3, #7
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <HAL_UART_MspInit+0x8c>)
 80007e6:	f000 fa75 	bl	8000cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40004400 	.word	0x40004400
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020000 	.word	0x40020000

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000804:	e7fe      	b.n	8000804 <NMI_Handler+0x4>

08000806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <HardFault_Handler+0x4>

0800080c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <MemManage_Handler+0x4>

08000812 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <BusFault_Handler+0x4>

08000818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <UsageFault_Handler+0x4>

0800081e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000830:	f000 f94a 	bl	8000ac8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000834:	f003 f9b2 	bl	8003b9c <xTaskGetSchedulerState>
 8000838:	4603      	mov	r3, r0
 800083a:	2b01      	cmp	r3, #1
 800083c:	d001      	beq.n	8000842 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800083e:	f003 ff9b 	bl	8004778 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}

08000846 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b086      	sub	sp, #24
 800084a:	af00      	add	r7, sp, #0
 800084c:	60f8      	str	r0, [r7, #12]
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	e00a      	b.n	800086e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000858:	f3af 8000 	nop.w
 800085c:	4601      	mov	r1, r0
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	1c5a      	adds	r2, r3, #1
 8000862:	60ba      	str	r2, [r7, #8]
 8000864:	b2ca      	uxtb	r2, r1
 8000866:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	3301      	adds	r3, #1
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	697a      	ldr	r2, [r7, #20]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	429a      	cmp	r2, r3
 8000874:	dbf0      	blt.n	8000858 <_read+0x12>
  }

  return len;
 8000876:	687b      	ldr	r3, [r7, #4]
}
 8000878:	4618      	mov	r0, r3
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000888:	f04f 33ff 	mov.w	r3, #4294967295
}
 800088c:	4618      	mov	r0, r3
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008a8:	605a      	str	r2, [r3, #4]
  return 0;
 80008aa:	2300      	movs	r3, #0
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <_isatty>:

int _isatty(int file)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008c0:	2301      	movs	r3, #1
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b085      	sub	sp, #20
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	60f8      	str	r0, [r7, #12]
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f0:	4a14      	ldr	r2, [pc, #80]	; (8000944 <_sbrk+0x5c>)
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <_sbrk+0x60>)
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d102      	bne.n	800090a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <_sbrk+0x64>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <_sbrk+0x68>)
 8000908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	429a      	cmp	r2, r3
 8000916:	d207      	bcs.n	8000928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000918:	f004 fbec 	bl	80050f4 <__errno>
 800091c:	4603      	mov	r3, r0
 800091e:	220c      	movs	r2, #12
 8000920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
 8000926:	e009      	b.n	800093c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <_sbrk+0x64>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	4a05      	ldr	r2, [pc, #20]	; (800094c <_sbrk+0x64>)
 8000938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800093a:	68fb      	ldr	r3, [r7, #12]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20020000 	.word	0x20020000
 8000948:	00000400 	.word	0x00000400
 800094c:	200000dc 	.word	0x200000dc
 8000950:	20004b88 	.word	0x20004b88

08000954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <SystemInit+0x20>)
 800095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095e:	4a05      	ldr	r2, [pc, #20]	; (8000974 <SystemInit+0x20>)
 8000960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <initUart>:
int rxBufferPp;               // put pointer (write)
uint8_t rxBuffer[rxBufferMax];
uint8_t rxChar;

// uart 장치 초기화
void initUart(UART_HandleTypeDef *inHuart) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
   huart = inHuart;
 8000980:	4a06      	ldr	r2, [pc, #24]	; (800099c <initUart+0x24>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6013      	str	r3, [r2, #0]
   HAL_UART_Receive_IT(&*huart, &rxChar, 1);
 8000986:	4b05      	ldr	r3, [pc, #20]	; (800099c <initUart+0x24>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2201      	movs	r2, #1
 800098c:	4904      	ldr	r1, [pc, #16]	; (80009a0 <initUart+0x28>)
 800098e:	4618      	mov	r0, r3
 8000990:	f001 f857 	bl	8001a42 <HAL_UART_Receive_IT>
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200000e0 	.word	0x200000e0
 80009a0:	200000e4 	.word	0x200000e4

080009a4 <_write>:
   result = rxBuffer[rxBufferGp++];
   rxBufferGp %= rxBufferMax;
   return result;
}

int _write(int file, char *p, int len) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
   HAL_UART_Transmit(huart, p, len, 1);
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <_write+0x28>)
 80009b2:	6818      	ldr	r0, [r3, #0]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	2301      	movs	r3, #1
 80009ba:	68b9      	ldr	r1, [r7, #8]
 80009bc:	f000 ffb6 	bl	800192c <HAL_UART_Transmit>
   return len;
 80009c0:	687b      	ldr	r3, [r7, #4]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200000e0 	.word	0x200000e0

080009d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009d4:	f7ff ffbe 	bl	8000954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d8:	480c      	ldr	r0, [pc, #48]	; (8000a0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009da:	490d      	ldr	r1, [pc, #52]	; (8000a10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009dc:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e0:	e002      	b.n	80009e8 <LoopCopyDataInit>

080009e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e6:	3304      	adds	r3, #4

080009e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ec:	d3f9      	bcc.n	80009e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009f0:	4c0a      	ldr	r4, [pc, #40]	; (8000a1c <LoopFillZerobss+0x22>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f4:	e001      	b.n	80009fa <LoopFillZerobss>

080009f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f8:	3204      	adds	r2, #4

080009fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009fc:	d3fb      	bcc.n	80009f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009fe:	f004 fb7f 	bl	8005100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a02:	f7ff fd6b 	bl	80004dc <main>
  bx  lr    
 8000a06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a10:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000a14:	080056e8 	.word	0x080056e8
  ldr r2, =_sbss
 8000a18:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000a1c:	20004b88 	.word	0x20004b88

08000a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC_IRQHandler>
	...

08000a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <HAL_Init+0x40>)
 8000a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <HAL_Init+0x40>)
 8000a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <HAL_Init+0x40>)
 8000a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f000 f90d 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a52:	200f      	movs	r0, #15
 8000a54:	f000 f808 	bl	8000a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a58:	f7ff fe5e 	bl	8000718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023c00 	.word	0x40023c00

08000a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x54>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_InitTick+0x58>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 f917 	bl	8000cba <HAL_SYSTICK_Config>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00e      	b.n	8000ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b0f      	cmp	r3, #15
 8000a9a:	d80a      	bhi.n	8000ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f000 f8ed 	bl	8000c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa8:	4a06      	ldr	r2, [pc, #24]	; (8000ac4 <HAL_InitTick+0x5c>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e000      	b.n	8000ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x20>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_IncTick+0x24>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_IncTick+0x24>)
 8000ada:	6013      	str	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	200000e8 	.word	0x200000e8

08000af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <HAL_GetTick+0x14>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	200000e8 	.word	0x200000e8

08000b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b24:	4013      	ands	r3, r2
 8000b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3a:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	60d3      	str	r3, [r2, #12]
}
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <__NVIC_GetPriorityGrouping+0x18>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	f003 0307 	and.w	r3, r3, #7
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	db0a      	blt.n	8000b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	490c      	ldr	r1, [pc, #48]	; (8000bb8 <__NVIC_SetPriority+0x4c>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	0112      	lsls	r2, r2, #4
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440b      	add	r3, r1
 8000b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b94:	e00a      	b.n	8000bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4908      	ldr	r1, [pc, #32]	; (8000bbc <__NVIC_SetPriority+0x50>)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	3b04      	subs	r3, #4
 8000ba4:	0112      	lsls	r2, r2, #4
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	440b      	add	r3, r1
 8000baa:	761a      	strb	r2, [r3, #24]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f1c3 0307 	rsb	r3, r3, #7
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	bf28      	it	cs
 8000bde:	2304      	movcs	r3, #4
 8000be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3304      	adds	r3, #4
 8000be6:	2b06      	cmp	r3, #6
 8000be8:	d902      	bls.n	8000bf0 <NVIC_EncodePriority+0x30>
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3b03      	subs	r3, #3
 8000bee:	e000      	b.n	8000bf2 <NVIC_EncodePriority+0x32>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	401a      	ands	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43d9      	mvns	r1, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	4313      	orrs	r3, r2
         );
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3724      	adds	r7, #36	; 0x24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c38:	d301      	bcc.n	8000c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00f      	b.n	8000c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <SysTick_Config+0x40>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c46:	210f      	movs	r1, #15
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f7ff ff8e 	bl	8000b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <SysTick_Config+0x40>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <SysTick_Config+0x40>)
 8000c58:	2207      	movs	r2, #7
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff47 	bl	8000b08 <__NVIC_SetPriorityGrouping>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c94:	f7ff ff5c 	bl	8000b50 <__NVIC_GetPriorityGrouping>
 8000c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff ff8e 	bl	8000bc0 <NVIC_EncodePriority>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff5d 	bl	8000b6c <__NVIC_SetPriority>
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ffb0 	bl	8000c28 <SysTick_Config>
 8000cc8:	4603      	mov	r3, r0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b089      	sub	sp, #36	; 0x24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
 8000cee:	e159      	b.n	8000fa4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	f040 8148 	bne.w	8000f9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d005      	beq.n	8000d26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d130      	bne.n	8000d88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	2203      	movs	r2, #3
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	68da      	ldr	r2, [r3, #12]
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	091b      	lsrs	r3, r3, #4
 8000d72:	f003 0201 	and.w	r2, r3, #1
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0303 	and.w	r3, r3, #3
 8000d90:	2b03      	cmp	r3, #3
 8000d92:	d017      	beq.n	8000dc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	2203      	movs	r2, #3
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4013      	ands	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	689a      	ldr	r2, [r3, #8]
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d123      	bne.n	8000e18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	08da      	lsrs	r2, r3, #3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3208      	adds	r2, #8
 8000dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	f003 0307 	and.w	r3, r3, #7
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	220f      	movs	r2, #15
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	691a      	ldr	r2, [r3, #16]
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	08da      	lsrs	r2, r3, #3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	3208      	adds	r2, #8
 8000e12:	69b9      	ldr	r1, [r7, #24]
 8000e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0203 	and.w	r2, r3, #3
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	f000 80a2 	beq.w	8000f9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b57      	ldr	r3, [pc, #348]	; (8000fbc <HAL_GPIO_Init+0x2e8>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	4a56      	ldr	r2, [pc, #344]	; (8000fbc <HAL_GPIO_Init+0x2e8>)
 8000e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e68:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6a:	4b54      	ldr	r3, [pc, #336]	; (8000fbc <HAL_GPIO_Init+0x2e8>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e76:	4a52      	ldr	r2, [pc, #328]	; (8000fc0 <HAL_GPIO_Init+0x2ec>)
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	089b      	lsrs	r3, r3, #2
 8000e7c:	3302      	adds	r3, #2
 8000e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	220f      	movs	r2, #15
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a49      	ldr	r2, [pc, #292]	; (8000fc4 <HAL_GPIO_Init+0x2f0>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d019      	beq.n	8000ed6 <HAL_GPIO_Init+0x202>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a48      	ldr	r2, [pc, #288]	; (8000fc8 <HAL_GPIO_Init+0x2f4>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d013      	beq.n	8000ed2 <HAL_GPIO_Init+0x1fe>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a47      	ldr	r2, [pc, #284]	; (8000fcc <HAL_GPIO_Init+0x2f8>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d00d      	beq.n	8000ece <HAL_GPIO_Init+0x1fa>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a46      	ldr	r2, [pc, #280]	; (8000fd0 <HAL_GPIO_Init+0x2fc>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d007      	beq.n	8000eca <HAL_GPIO_Init+0x1f6>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a45      	ldr	r2, [pc, #276]	; (8000fd4 <HAL_GPIO_Init+0x300>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d101      	bne.n	8000ec6 <HAL_GPIO_Init+0x1f2>
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	e008      	b.n	8000ed8 <HAL_GPIO_Init+0x204>
 8000ec6:	2307      	movs	r3, #7
 8000ec8:	e006      	b.n	8000ed8 <HAL_GPIO_Init+0x204>
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e004      	b.n	8000ed8 <HAL_GPIO_Init+0x204>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e002      	b.n	8000ed8 <HAL_GPIO_Init+0x204>
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e000      	b.n	8000ed8 <HAL_GPIO_Init+0x204>
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	69fa      	ldr	r2, [r7, #28]
 8000eda:	f002 0203 	and.w	r2, r2, #3
 8000ede:	0092      	lsls	r2, r2, #2
 8000ee0:	4093      	lsls	r3, r2
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ee8:	4935      	ldr	r1, [pc, #212]	; (8000fc0 <HAL_GPIO_Init+0x2ec>)
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	3302      	adds	r3, #2
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef6:	4b38      	ldr	r3, [pc, #224]	; (8000fd8 <HAL_GPIO_Init+0x304>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f1a:	4a2f      	ldr	r2, [pc, #188]	; (8000fd8 <HAL_GPIO_Init+0x304>)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f20:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <HAL_GPIO_Init+0x304>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f44:	4a24      	ldr	r2, [pc, #144]	; (8000fd8 <HAL_GPIO_Init+0x304>)
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f4a:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <HAL_GPIO_Init+0x304>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f6e:	4a1a      	ldr	r2, [pc, #104]	; (8000fd8 <HAL_GPIO_Init+0x304>)
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_GPIO_Init+0x304>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f98:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <HAL_GPIO_Init+0x304>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	61fb      	str	r3, [r7, #28]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	2b0f      	cmp	r3, #15
 8000fa8:	f67f aea2 	bls.w	8000cf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3724      	adds	r7, #36	; 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40013800 	.word	0x40013800
 8000fc4:	40020000 	.word	0x40020000
 8000fc8:	40020400 	.word	0x40020400
 8000fcc:	40020800 	.word	0x40020800
 8000fd0:	40020c00 	.word	0x40020c00
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40013c00 	.word	0x40013c00

08000fdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e267      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d075      	beq.n	80010e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ffa:	4b88      	ldr	r3, [pc, #544]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
 8001002:	2b04      	cmp	r3, #4
 8001004:	d00c      	beq.n	8001020 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001006:	4b85      	ldr	r3, [pc, #532]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800100e:	2b08      	cmp	r3, #8
 8001010:	d112      	bne.n	8001038 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001012:	4b82      	ldr	r3, [pc, #520]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800101a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800101e:	d10b      	bne.n	8001038 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001020:	4b7e      	ldr	r3, [pc, #504]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d05b      	beq.n	80010e4 <HAL_RCC_OscConfig+0x108>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d157      	bne.n	80010e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e242      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001040:	d106      	bne.n	8001050 <HAL_RCC_OscConfig+0x74>
 8001042:	4b76      	ldr	r3, [pc, #472]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a75      	ldr	r2, [pc, #468]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	e01d      	b.n	800108c <HAL_RCC_OscConfig+0xb0>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001058:	d10c      	bne.n	8001074 <HAL_RCC_OscConfig+0x98>
 800105a:	4b70      	ldr	r3, [pc, #448]	; (800121c <HAL_RCC_OscConfig+0x240>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a6f      	ldr	r2, [pc, #444]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	4b6d      	ldr	r3, [pc, #436]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a6c      	ldr	r2, [pc, #432]	; (800121c <HAL_RCC_OscConfig+0x240>)
 800106c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	e00b      	b.n	800108c <HAL_RCC_OscConfig+0xb0>
 8001074:	4b69      	ldr	r3, [pc, #420]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a68      	ldr	r2, [pc, #416]	; (800121c <HAL_RCC_OscConfig+0x240>)
 800107a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	4b66      	ldr	r3, [pc, #408]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a65      	ldr	r2, [pc, #404]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800108a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d013      	beq.n	80010bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001094:	f7ff fd2c 	bl	8000af0 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800109c:	f7ff fd28 	bl	8000af0 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b64      	cmp	r3, #100	; 0x64
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e207      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ae:	4b5b      	ldr	r3, [pc, #364]	; (800121c <HAL_RCC_OscConfig+0x240>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0f0      	beq.n	800109c <HAL_RCC_OscConfig+0xc0>
 80010ba:	e014      	b.n	80010e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010bc:	f7ff fd18 	bl	8000af0 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010c4:	f7ff fd14 	bl	8000af0 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b64      	cmp	r3, #100	; 0x64
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e1f3      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d6:	4b51      	ldr	r3, [pc, #324]	; (800121c <HAL_RCC_OscConfig+0x240>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f0      	bne.n	80010c4 <HAL_RCC_OscConfig+0xe8>
 80010e2:	e000      	b.n	80010e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d063      	beq.n	80011ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010f2:	4b4a      	ldr	r3, [pc, #296]	; (800121c <HAL_RCC_OscConfig+0x240>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 030c 	and.w	r3, r3, #12
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00b      	beq.n	8001116 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010fe:	4b47      	ldr	r3, [pc, #284]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001106:	2b08      	cmp	r3, #8
 8001108:	d11c      	bne.n	8001144 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800110a:	4b44      	ldr	r3, [pc, #272]	; (800121c <HAL_RCC_OscConfig+0x240>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d116      	bne.n	8001144 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001116:	4b41      	ldr	r3, [pc, #260]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d005      	beq.n	800112e <HAL_RCC_OscConfig+0x152>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d001      	beq.n	800112e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e1c7      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112e:	4b3b      	ldr	r3, [pc, #236]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	4937      	ldr	r1, [pc, #220]	; (800121c <HAL_RCC_OscConfig+0x240>)
 800113e:	4313      	orrs	r3, r2
 8001140:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001142:	e03a      	b.n	80011ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d020      	beq.n	800118e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800114c:	4b34      	ldr	r3, [pc, #208]	; (8001220 <HAL_RCC_OscConfig+0x244>)
 800114e:	2201      	movs	r2, #1
 8001150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001152:	f7ff fccd 	bl	8000af0 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800115a:	f7ff fcc9 	bl	8000af0 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e1a8      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116c:	4b2b      	ldr	r3, [pc, #172]	; (800121c <HAL_RCC_OscConfig+0x240>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0f0      	beq.n	800115a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001178:	4b28      	ldr	r3, [pc, #160]	; (800121c <HAL_RCC_OscConfig+0x240>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	4925      	ldr	r1, [pc, #148]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001188:	4313      	orrs	r3, r2
 800118a:	600b      	str	r3, [r1, #0]
 800118c:	e015      	b.n	80011ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <HAL_RCC_OscConfig+0x244>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001194:	f7ff fcac 	bl	8000af0 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800119c:	f7ff fca8 	bl	8000af0 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e187      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ae:	4b1b      	ldr	r3, [pc, #108]	; (800121c <HAL_RCC_OscConfig+0x240>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f0      	bne.n	800119c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d036      	beq.n	8001234 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d016      	beq.n	80011fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_RCC_OscConfig+0x248>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011d4:	f7ff fc8c 	bl	8000af0 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011dc:	f7ff fc88 	bl	8000af0 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e167      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_RCC_OscConfig+0x240>)
 80011f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d0f0      	beq.n	80011dc <HAL_RCC_OscConfig+0x200>
 80011fa:	e01b      	b.n	8001234 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_RCC_OscConfig+0x248>)
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001202:	f7ff fc75 	bl	8000af0 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001208:	e00e      	b.n	8001228 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800120a:	f7ff fc71 	bl	8000af0 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d907      	bls.n	8001228 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e150      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
 800121c:	40023800 	.word	0x40023800
 8001220:	42470000 	.word	0x42470000
 8001224:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001228:	4b88      	ldr	r3, [pc, #544]	; (800144c <HAL_RCC_OscConfig+0x470>)
 800122a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1ea      	bne.n	800120a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 8097 	beq.w	8001370 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001246:	4b81      	ldr	r3, [pc, #516]	; (800144c <HAL_RCC_OscConfig+0x470>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10f      	bne.n	8001272 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	4b7d      	ldr	r3, [pc, #500]	; (800144c <HAL_RCC_OscConfig+0x470>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	4a7c      	ldr	r2, [pc, #496]	; (800144c <HAL_RCC_OscConfig+0x470>)
 800125c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001260:	6413      	str	r3, [r2, #64]	; 0x40
 8001262:	4b7a      	ldr	r3, [pc, #488]	; (800144c <HAL_RCC_OscConfig+0x470>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800126e:	2301      	movs	r3, #1
 8001270:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001272:	4b77      	ldr	r3, [pc, #476]	; (8001450 <HAL_RCC_OscConfig+0x474>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127a:	2b00      	cmp	r3, #0
 800127c:	d118      	bne.n	80012b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800127e:	4b74      	ldr	r3, [pc, #464]	; (8001450 <HAL_RCC_OscConfig+0x474>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a73      	ldr	r2, [pc, #460]	; (8001450 <HAL_RCC_OscConfig+0x474>)
 8001284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800128a:	f7ff fc31 	bl	8000af0 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001292:	f7ff fc2d 	bl	8000af0 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e10c      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a4:	4b6a      	ldr	r3, [pc, #424]	; (8001450 <HAL_RCC_OscConfig+0x474>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0f0      	beq.n	8001292 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d106      	bne.n	80012c6 <HAL_RCC_OscConfig+0x2ea>
 80012b8:	4b64      	ldr	r3, [pc, #400]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80012ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012bc:	4a63      	ldr	r2, [pc, #396]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6713      	str	r3, [r2, #112]	; 0x70
 80012c4:	e01c      	b.n	8001300 <HAL_RCC_OscConfig+0x324>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b05      	cmp	r3, #5
 80012cc:	d10c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x30c>
 80012ce:	4b5f      	ldr	r3, [pc, #380]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80012d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d2:	4a5e      	ldr	r2, [pc, #376]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	6713      	str	r3, [r2, #112]	; 0x70
 80012da:	4b5c      	ldr	r3, [pc, #368]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80012dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012de:	4a5b      	ldr	r2, [pc, #364]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6713      	str	r3, [r2, #112]	; 0x70
 80012e6:	e00b      	b.n	8001300 <HAL_RCC_OscConfig+0x324>
 80012e8:	4b58      	ldr	r3, [pc, #352]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80012ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ec:	4a57      	ldr	r2, [pc, #348]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80012ee:	f023 0301 	bic.w	r3, r3, #1
 80012f2:	6713      	str	r3, [r2, #112]	; 0x70
 80012f4:	4b55      	ldr	r3, [pc, #340]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80012f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f8:	4a54      	ldr	r2, [pc, #336]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80012fa:	f023 0304 	bic.w	r3, r3, #4
 80012fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d015      	beq.n	8001334 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001308:	f7ff fbf2 	bl	8000af0 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800130e:	e00a      	b.n	8001326 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001310:	f7ff fbee 	bl	8000af0 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	f241 3288 	movw	r2, #5000	; 0x1388
 800131e:	4293      	cmp	r3, r2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e0cb      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001326:	4b49      	ldr	r3, [pc, #292]	; (800144c <HAL_RCC_OscConfig+0x470>)
 8001328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0ee      	beq.n	8001310 <HAL_RCC_OscConfig+0x334>
 8001332:	e014      	b.n	800135e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001334:	f7ff fbdc 	bl	8000af0 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800133a:	e00a      	b.n	8001352 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800133c:	f7ff fbd8 	bl	8000af0 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	f241 3288 	movw	r2, #5000	; 0x1388
 800134a:	4293      	cmp	r3, r2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e0b5      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001352:	4b3e      	ldr	r3, [pc, #248]	; (800144c <HAL_RCC_OscConfig+0x470>)
 8001354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1ee      	bne.n	800133c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800135e:	7dfb      	ldrb	r3, [r7, #23]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d105      	bne.n	8001370 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001364:	4b39      	ldr	r3, [pc, #228]	; (800144c <HAL_RCC_OscConfig+0x470>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	4a38      	ldr	r2, [pc, #224]	; (800144c <HAL_RCC_OscConfig+0x470>)
 800136a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800136e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 80a1 	beq.w	80014bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800137a:	4b34      	ldr	r3, [pc, #208]	; (800144c <HAL_RCC_OscConfig+0x470>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b08      	cmp	r3, #8
 8001384:	d05c      	beq.n	8001440 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d141      	bne.n	8001412 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138e:	4b31      	ldr	r3, [pc, #196]	; (8001454 <HAL_RCC_OscConfig+0x478>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001394:	f7ff fbac 	bl	8000af0 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800139c:	f7ff fba8 	bl	8000af0 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e087      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ae:	4b27      	ldr	r3, [pc, #156]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69da      	ldr	r2, [r3, #28]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	431a      	orrs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	019b      	lsls	r3, r3, #6
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	3b01      	subs	r3, #1
 80013d4:	041b      	lsls	r3, r3, #16
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013dc:	061b      	lsls	r3, r3, #24
 80013de:	491b      	ldr	r1, [pc, #108]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_RCC_OscConfig+0x478>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ea:	f7ff fb81 	bl	8000af0 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f2:	f7ff fb7d 	bl	8000af0 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e05c      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_RCC_OscConfig+0x470>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0f0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x416>
 8001410:	e054      	b.n	80014bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <HAL_RCC_OscConfig+0x478>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fb6a 	bl	8000af0 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001420:	f7ff fb66 	bl	8000af0 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e045      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_RCC_OscConfig+0x470>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x444>
 800143e:	e03d      	b.n	80014bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d107      	bne.n	8001458 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e038      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
 800144c:	40023800 	.word	0x40023800
 8001450:	40007000 	.word	0x40007000
 8001454:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <HAL_RCC_OscConfig+0x4ec>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d028      	beq.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001470:	429a      	cmp	r2, r3
 8001472:	d121      	bne.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800147e:	429a      	cmp	r2, r3
 8001480:	d11a      	bne.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001488:	4013      	ands	r3, r2
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800148e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001490:	4293      	cmp	r3, r2
 8001492:	d111      	bne.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	085b      	lsrs	r3, r3, #1
 80014a0:	3b01      	subs	r3, #1
 80014a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d107      	bne.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d001      	beq.n	80014bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800

080014cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e0cc      	b.n	800167a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014e0:	4b68      	ldr	r3, [pc, #416]	; (8001684 <HAL_RCC_ClockConfig+0x1b8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d90c      	bls.n	8001508 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ee:	4b65      	ldr	r3, [pc, #404]	; (8001684 <HAL_RCC_ClockConfig+0x1b8>)
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f6:	4b63      	ldr	r3, [pc, #396]	; (8001684 <HAL_RCC_ClockConfig+0x1b8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	d001      	beq.n	8001508 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e0b8      	b.n	800167a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d020      	beq.n	8001556 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001520:	4b59      	ldr	r3, [pc, #356]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	4a58      	ldr	r2, [pc, #352]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800152a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001538:	4b53      	ldr	r3, [pc, #332]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	4a52      	ldr	r2, [pc, #328]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001542:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001544:	4b50      	ldr	r3, [pc, #320]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	494d      	ldr	r1, [pc, #308]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	4313      	orrs	r3, r2
 8001554:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	d044      	beq.n	80015ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d107      	bne.n	800157a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156a:	4b47      	ldr	r3, [pc, #284]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d119      	bne.n	80015aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e07f      	b.n	800167a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d003      	beq.n	800158a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001586:	2b03      	cmp	r3, #3
 8001588:	d107      	bne.n	800159a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158a:	4b3f      	ldr	r3, [pc, #252]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d109      	bne.n	80015aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e06f      	b.n	800167a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159a:	4b3b      	ldr	r3, [pc, #236]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e067      	b.n	800167a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015aa:	4b37      	ldr	r3, [pc, #220]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f023 0203 	bic.w	r2, r3, #3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	4934      	ldr	r1, [pc, #208]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015bc:	f7ff fa98 	bl	8000af0 <HAL_GetTick>
 80015c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c2:	e00a      	b.n	80015da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c4:	f7ff fa94 	bl	8000af0 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e04f      	b.n	800167a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015da:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 020c 	and.w	r2, r3, #12
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d1eb      	bne.n	80015c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015ec:	4b25      	ldr	r3, [pc, #148]	; (8001684 <HAL_RCC_ClockConfig+0x1b8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d20c      	bcs.n	8001614 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fa:	4b22      	ldr	r3, [pc, #136]	; (8001684 <HAL_RCC_ClockConfig+0x1b8>)
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <HAL_RCC_ClockConfig+0x1b8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d001      	beq.n	8001614 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e032      	b.n	800167a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d008      	beq.n	8001632 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	4916      	ldr	r1, [pc, #88]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	4313      	orrs	r3, r2
 8001630:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	2b00      	cmp	r3, #0
 800163c:	d009      	beq.n	8001652 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800163e:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	490e      	ldr	r1, [pc, #56]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	4313      	orrs	r3, r2
 8001650:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001652:	f000 f821 	bl	8001698 <HAL_RCC_GetSysClockFreq>
 8001656:	4602      	mov	r2, r0
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	091b      	lsrs	r3, r3, #4
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	490a      	ldr	r1, [pc, #40]	; (800168c <HAL_RCC_ClockConfig+0x1c0>)
 8001664:	5ccb      	ldrb	r3, [r1, r3]
 8001666:	fa22 f303 	lsr.w	r3, r2, r3
 800166a:	4a09      	ldr	r2, [pc, #36]	; (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_RCC_ClockConfig+0x1c8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff f9f8 	bl	8000a68 <HAL_InitTick>

  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023c00 	.word	0x40023c00
 8001688:	40023800 	.word	0x40023800
 800168c:	080056c0 	.word	0x080056c0
 8001690:	20000000 	.word	0x20000000
 8001694:	20000004 	.word	0x20000004

08001698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800169c:	b090      	sub	sp, #64	; 0x40
 800169e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
 80016a4:	2300      	movs	r3, #0
 80016a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016a8:	2300      	movs	r3, #0
 80016aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016b0:	4b59      	ldr	r3, [pc, #356]	; (8001818 <HAL_RCC_GetSysClockFreq+0x180>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d00d      	beq.n	80016d8 <HAL_RCC_GetSysClockFreq+0x40>
 80016bc:	2b08      	cmp	r3, #8
 80016be:	f200 80a1 	bhi.w	8001804 <HAL_RCC_GetSysClockFreq+0x16c>
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <HAL_RCC_GetSysClockFreq+0x34>
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d003      	beq.n	80016d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80016ca:	e09b      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016cc:	4b53      	ldr	r3, [pc, #332]	; (800181c <HAL_RCC_GetSysClockFreq+0x184>)
 80016ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80016d0:	e09b      	b.n	800180a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016d2:	4b53      	ldr	r3, [pc, #332]	; (8001820 <HAL_RCC_GetSysClockFreq+0x188>)
 80016d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016d6:	e098      	b.n	800180a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016d8:	4b4f      	ldr	r3, [pc, #316]	; (8001818 <HAL_RCC_GetSysClockFreq+0x180>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016e2:	4b4d      	ldr	r3, [pc, #308]	; (8001818 <HAL_RCC_GetSysClockFreq+0x180>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d028      	beq.n	8001740 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ee:	4b4a      	ldr	r3, [pc, #296]	; (8001818 <HAL_RCC_GetSysClockFreq+0x180>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	099b      	lsrs	r3, r3, #6
 80016f4:	2200      	movs	r2, #0
 80016f6:	623b      	str	r3, [r7, #32]
 80016f8:	627a      	str	r2, [r7, #36]	; 0x24
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001700:	2100      	movs	r1, #0
 8001702:	4b47      	ldr	r3, [pc, #284]	; (8001820 <HAL_RCC_GetSysClockFreq+0x188>)
 8001704:	fb03 f201 	mul.w	r2, r3, r1
 8001708:	2300      	movs	r3, #0
 800170a:	fb00 f303 	mul.w	r3, r0, r3
 800170e:	4413      	add	r3, r2
 8001710:	4a43      	ldr	r2, [pc, #268]	; (8001820 <HAL_RCC_GetSysClockFreq+0x188>)
 8001712:	fba0 1202 	umull	r1, r2, r0, r2
 8001716:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001718:	460a      	mov	r2, r1
 800171a:	62ba      	str	r2, [r7, #40]	; 0x28
 800171c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800171e:	4413      	add	r3, r2
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001724:	2200      	movs	r2, #0
 8001726:	61bb      	str	r3, [r7, #24]
 8001728:	61fa      	str	r2, [r7, #28]
 800172a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800172e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001732:	f7fe fd55 	bl	80001e0 <__aeabi_uldivmod>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4613      	mov	r3, r2
 800173c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800173e:	e053      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001740:	4b35      	ldr	r3, [pc, #212]	; (8001818 <HAL_RCC_GetSysClockFreq+0x180>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	099b      	lsrs	r3, r3, #6
 8001746:	2200      	movs	r2, #0
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	617a      	str	r2, [r7, #20]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001752:	f04f 0b00 	mov.w	fp, #0
 8001756:	4652      	mov	r2, sl
 8001758:	465b      	mov	r3, fp
 800175a:	f04f 0000 	mov.w	r0, #0
 800175e:	f04f 0100 	mov.w	r1, #0
 8001762:	0159      	lsls	r1, r3, #5
 8001764:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001768:	0150      	lsls	r0, r2, #5
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	ebb2 080a 	subs.w	r8, r2, sl
 8001772:	eb63 090b 	sbc.w	r9, r3, fp
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001782:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001786:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800178a:	ebb2 0408 	subs.w	r4, r2, r8
 800178e:	eb63 0509 	sbc.w	r5, r3, r9
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	00eb      	lsls	r3, r5, #3
 800179c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017a0:	00e2      	lsls	r2, r4, #3
 80017a2:	4614      	mov	r4, r2
 80017a4:	461d      	mov	r5, r3
 80017a6:	eb14 030a 	adds.w	r3, r4, sl
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	eb45 030b 	adc.w	r3, r5, fp
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017be:	4629      	mov	r1, r5
 80017c0:	028b      	lsls	r3, r1, #10
 80017c2:	4621      	mov	r1, r4
 80017c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017c8:	4621      	mov	r1, r4
 80017ca:	028a      	lsls	r2, r1, #10
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d2:	2200      	movs	r2, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	60fa      	str	r2, [r7, #12]
 80017d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017dc:	f7fe fd00 	bl	80001e0 <__aeabi_uldivmod>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4613      	mov	r3, r2
 80017e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	0c1b      	lsrs	r3, r3, #16
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	3301      	adds	r3, #1
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80017f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001800:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001802:	e002      	b.n	800180a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <HAL_RCC_GetSysClockFreq+0x184>)
 8001806:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001808:	bf00      	nop
    }
  }
  return sysclockfreq;
 800180a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800180c:	4618      	mov	r0, r3
 800180e:	3740      	adds	r7, #64	; 0x40
 8001810:	46bd      	mov	sp, r7
 8001812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800
 800181c:	00f42400 	.word	0x00f42400
 8001820:	017d7840 	.word	0x017d7840

08001824 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <HAL_RCC_GetHCLKFreq+0x14>)
 800182a:	681b      	ldr	r3, [r3, #0]
}
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000000 	.word	0x20000000

0800183c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001840:	f7ff fff0 	bl	8001824 <HAL_RCC_GetHCLKFreq>
 8001844:	4602      	mov	r2, r0
 8001846:	4b05      	ldr	r3, [pc, #20]	; (800185c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	0a9b      	lsrs	r3, r3, #10
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	4903      	ldr	r1, [pc, #12]	; (8001860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001852:	5ccb      	ldrb	r3, [r1, r3]
 8001854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001858:	4618      	mov	r0, r3
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40023800 	.word	0x40023800
 8001860:	080056d0 	.word	0x080056d0

08001864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001868:	f7ff ffdc 	bl	8001824 <HAL_RCC_GetHCLKFreq>
 800186c:	4602      	mov	r2, r0
 800186e:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	0b5b      	lsrs	r3, r3, #13
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	4903      	ldr	r1, [pc, #12]	; (8001888 <HAL_RCC_GetPCLK2Freq+0x24>)
 800187a:	5ccb      	ldrb	r3, [r1, r3]
 800187c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001880:	4618      	mov	r0, r3
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40023800 	.word	0x40023800
 8001888:	080056d0 	.word	0x080056d0

0800188c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e042      	b.n	8001924 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d106      	bne.n	80018b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7fe ff5c 	bl	8000770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2224      	movs	r2, #36	; 0x24
 80018bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 f9d1 	bl	8001c78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	695a      	ldr	r2, [r3, #20]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001904:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2220      	movs	r2, #32
 8001910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2220      	movs	r2, #32
 8001918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af02      	add	r7, sp, #8
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	4613      	mov	r3, r2
 800193a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b20      	cmp	r3, #32
 800194a:	d175      	bne.n	8001a38 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d002      	beq.n	8001958 <HAL_UART_Transmit+0x2c>
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e06e      	b.n	8001a3a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2221      	movs	r2, #33	; 0x21
 8001966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800196a:	f7ff f8c1 	bl	8000af0 <HAL_GetTick>
 800196e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	88fa      	ldrh	r2, [r7, #6]
 8001974:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	88fa      	ldrh	r2, [r7, #6]
 800197a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001984:	d108      	bne.n	8001998 <HAL_UART_Transmit+0x6c>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d104      	bne.n	8001998 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	61bb      	str	r3, [r7, #24]
 8001996:	e003      	b.n	80019a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800199c:	2300      	movs	r3, #0
 800199e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80019a0:	e02e      	b.n	8001a00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	2200      	movs	r2, #0
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 f86d 	bl	8001a8c <UART_WaitOnFlagUntilTimeout>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2220      	movs	r2, #32
 80019bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e03a      	b.n	8001a3a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10b      	bne.n	80019e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	3302      	adds	r3, #2
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	e007      	b.n	80019f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	781a      	ldrb	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	3301      	adds	r3, #1
 80019f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	3b01      	subs	r3, #1
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1cb      	bne.n	80019a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2200      	movs	r2, #0
 8001a12:	2140      	movs	r1, #64	; 0x40
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 f839 	bl	8001a8c <UART_WaitOnFlagUntilTimeout>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2220      	movs	r2, #32
 8001a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e006      	b.n	8001a3a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2220      	movs	r2, #32
 8001a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	e000      	b.n	8001a3a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001a38:	2302      	movs	r3, #2
  }
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3720      	adds	r7, #32
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b084      	sub	sp, #16
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b20      	cmp	r3, #32
 8001a5a:	d112      	bne.n	8001a82 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <HAL_UART_Receive_IT+0x26>
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e00b      	b.n	8001a84 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	461a      	mov	r2, r3
 8001a76:	68b9      	ldr	r1, [r7, #8]
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f000 f860 	bl	8001b3e <UART_Start_Receive_IT>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	e000      	b.n	8001a84 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001a82:	2302      	movs	r3, #2
  }
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a9c:	e03b      	b.n	8001b16 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa4:	d037      	beq.n	8001b16 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aa6:	f7ff f823 	bl	8000af0 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	6a3a      	ldr	r2, [r7, #32]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d302      	bcc.n	8001abc <UART_WaitOnFlagUntilTimeout+0x30>
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e03a      	b.n	8001b36 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d023      	beq.n	8001b16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b80      	cmp	r3, #128	; 0x80
 8001ad2:	d020      	beq.n	8001b16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b40      	cmp	r3, #64	; 0x40
 8001ad8:	d01d      	beq.n	8001b16 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d116      	bne.n	8001b16 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 f857 	bl	8001bb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2208      	movs	r2, #8
 8001b08:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00f      	b.n	8001b36 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	bf0c      	ite	eq
 8001b26:	2301      	moveq	r3, #1
 8001b28:	2300      	movne	r3, #0
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d0b4      	beq.n	8001a9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b085      	sub	sp, #20
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	88fa      	ldrh	r2, [r7, #6]
 8001b56:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	88fa      	ldrh	r2, [r7, #6]
 8001b5c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2222      	movs	r2, #34	; 0x22
 8001b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d007      	beq.n	8001b84 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b82:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0201 	orr.w	r2, r2, #1
 8001b92:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0220 	orr.w	r2, r2, #32
 8001ba2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b095      	sub	sp, #84	; 0x54
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	330c      	adds	r3, #12
 8001bc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc4:	e853 3f00 	ldrex	r3, [r3]
 8001bc8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	330c      	adds	r3, #12
 8001bd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bda:	643a      	str	r2, [r7, #64]	; 0x40
 8001bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001be0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001be2:	e841 2300 	strex	r3, r2, [r1]
 8001be6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1e5      	bne.n	8001bba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	3314      	adds	r3, #20
 8001bf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	e853 3f00 	ldrex	r3, [r3]
 8001bfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	3314      	adds	r3, #20
 8001c0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c16:	e841 2300 	strex	r3, r2, [r1]
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1e5      	bne.n	8001bee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d119      	bne.n	8001c5e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	330c      	adds	r3, #12
 8001c30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	e853 3f00 	ldrex	r3, [r3]
 8001c38:	60bb      	str	r3, [r7, #8]
   return(result);
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	f023 0310 	bic.w	r3, r3, #16
 8001c40:	647b      	str	r3, [r7, #68]	; 0x44
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	330c      	adds	r3, #12
 8001c48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c4a:	61ba      	str	r2, [r7, #24]
 8001c4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c4e:	6979      	ldr	r1, [r7, #20]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	e841 2300 	strex	r3, r2, [r1]
 8001c56:	613b      	str	r3, [r7, #16]
   return(result);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1e5      	bne.n	8001c2a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2220      	movs	r2, #32
 8001c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001c6c:	bf00      	nop
 8001c6e:	3754      	adds	r7, #84	; 0x54
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c7c:	b0c0      	sub	sp, #256	; 0x100
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c94:	68d9      	ldr	r1, [r3, #12]
 8001c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	ea40 0301 	orr.w	r3, r0, r1
 8001ca0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001cd0:	f021 010c 	bic.w	r1, r1, #12
 8001cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001cde:	430b      	orrs	r3, r1
 8001ce0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cf2:	6999      	ldr	r1, [r3, #24]
 8001cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	ea40 0301 	orr.w	r3, r0, r1
 8001cfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	4b8f      	ldr	r3, [pc, #572]	; (8001f44 <UART_SetConfig+0x2cc>)
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d005      	beq.n	8001d18 <UART_SetConfig+0xa0>
 8001d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	4b8d      	ldr	r3, [pc, #564]	; (8001f48 <UART_SetConfig+0x2d0>)
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d104      	bne.n	8001d22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d18:	f7ff fda4 	bl	8001864 <HAL_RCC_GetPCLK2Freq>
 8001d1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001d20:	e003      	b.n	8001d2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d22:	f7ff fd8b 	bl	800183c <HAL_RCC_GetPCLK1Freq>
 8001d26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d34:	f040 810c 	bne.w	8001f50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001d42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001d46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001d4a:	4622      	mov	r2, r4
 8001d4c:	462b      	mov	r3, r5
 8001d4e:	1891      	adds	r1, r2, r2
 8001d50:	65b9      	str	r1, [r7, #88]	; 0x58
 8001d52:	415b      	adcs	r3, r3
 8001d54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d5a:	4621      	mov	r1, r4
 8001d5c:	eb12 0801 	adds.w	r8, r2, r1
 8001d60:	4629      	mov	r1, r5
 8001d62:	eb43 0901 	adc.w	r9, r3, r1
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d7a:	4690      	mov	r8, r2
 8001d7c:	4699      	mov	r9, r3
 8001d7e:	4623      	mov	r3, r4
 8001d80:	eb18 0303 	adds.w	r3, r8, r3
 8001d84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001d88:	462b      	mov	r3, r5
 8001d8a:	eb49 0303 	adc.w	r3, r9, r3
 8001d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001d9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001da2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001da6:	460b      	mov	r3, r1
 8001da8:	18db      	adds	r3, r3, r3
 8001daa:	653b      	str	r3, [r7, #80]	; 0x50
 8001dac:	4613      	mov	r3, r2
 8001dae:	eb42 0303 	adc.w	r3, r2, r3
 8001db2:	657b      	str	r3, [r7, #84]	; 0x54
 8001db4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001db8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001dbc:	f7fe fa10 	bl	80001e0 <__aeabi_uldivmod>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4b61      	ldr	r3, [pc, #388]	; (8001f4c <UART_SetConfig+0x2d4>)
 8001dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	011c      	lsls	r4, r3, #4
 8001dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001dd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001ddc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001de0:	4642      	mov	r2, r8
 8001de2:	464b      	mov	r3, r9
 8001de4:	1891      	adds	r1, r2, r2
 8001de6:	64b9      	str	r1, [r7, #72]	; 0x48
 8001de8:	415b      	adcs	r3, r3
 8001dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001df0:	4641      	mov	r1, r8
 8001df2:	eb12 0a01 	adds.w	sl, r2, r1
 8001df6:	4649      	mov	r1, r9
 8001df8:	eb43 0b01 	adc.w	fp, r3, r1
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e10:	4692      	mov	sl, r2
 8001e12:	469b      	mov	fp, r3
 8001e14:	4643      	mov	r3, r8
 8001e16:	eb1a 0303 	adds.w	r3, sl, r3
 8001e1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001e1e:	464b      	mov	r3, r9
 8001e20:	eb4b 0303 	adc.w	r3, fp, r3
 8001e24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001e34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001e38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	18db      	adds	r3, r3, r3
 8001e40:	643b      	str	r3, [r7, #64]	; 0x40
 8001e42:	4613      	mov	r3, r2
 8001e44:	eb42 0303 	adc.w	r3, r2, r3
 8001e48:	647b      	str	r3, [r7, #68]	; 0x44
 8001e4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001e52:	f7fe f9c5 	bl	80001e0 <__aeabi_uldivmod>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4b3b      	ldr	r3, [pc, #236]	; (8001f4c <UART_SetConfig+0x2d4>)
 8001e5e:	fba3 2301 	umull	r2, r3, r3, r1
 8001e62:	095b      	lsrs	r3, r3, #5
 8001e64:	2264      	movs	r2, #100	; 0x64
 8001e66:	fb02 f303 	mul.w	r3, r2, r3
 8001e6a:	1acb      	subs	r3, r1, r3
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001e72:	4b36      	ldr	r3, [pc, #216]	; (8001f4c <UART_SetConfig+0x2d4>)
 8001e74:	fba3 2302 	umull	r2, r3, r3, r2
 8001e78:	095b      	lsrs	r3, r3, #5
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e80:	441c      	add	r4, r3
 8001e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e86:	2200      	movs	r2, #0
 8001e88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001e90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001e94:	4642      	mov	r2, r8
 8001e96:	464b      	mov	r3, r9
 8001e98:	1891      	adds	r1, r2, r2
 8001e9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e9c:	415b      	adcs	r3, r3
 8001e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ea0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001ea4:	4641      	mov	r1, r8
 8001ea6:	1851      	adds	r1, r2, r1
 8001ea8:	6339      	str	r1, [r7, #48]	; 0x30
 8001eaa:	4649      	mov	r1, r9
 8001eac:	414b      	adcs	r3, r1
 8001eae:	637b      	str	r3, [r7, #52]	; 0x34
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001ebc:	4659      	mov	r1, fp
 8001ebe:	00cb      	lsls	r3, r1, #3
 8001ec0:	4651      	mov	r1, sl
 8001ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ec6:	4651      	mov	r1, sl
 8001ec8:	00ca      	lsls	r2, r1, #3
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4642      	mov	r2, r8
 8001ed2:	189b      	adds	r3, r3, r2
 8001ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ed8:	464b      	mov	r3, r9
 8001eda:	460a      	mov	r2, r1
 8001edc:	eb42 0303 	adc.w	r3, r2, r3
 8001ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001ef0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001ef4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001ef8:	460b      	mov	r3, r1
 8001efa:	18db      	adds	r3, r3, r3
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001efe:	4613      	mov	r3, r2
 8001f00:	eb42 0303 	adc.w	r3, r2, r3
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001f0e:	f7fe f967 	bl	80001e0 <__aeabi_uldivmod>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <UART_SetConfig+0x2d4>)
 8001f18:	fba3 1302 	umull	r1, r3, r3, r2
 8001f1c:	095b      	lsrs	r3, r3, #5
 8001f1e:	2164      	movs	r1, #100	; 0x64
 8001f20:	fb01 f303 	mul.w	r3, r1, r3
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	3332      	adds	r3, #50	; 0x32
 8001f2a:	4a08      	ldr	r2, [pc, #32]	; (8001f4c <UART_SetConfig+0x2d4>)
 8001f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f30:	095b      	lsrs	r3, r3, #5
 8001f32:	f003 0207 	and.w	r2, r3, #7
 8001f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4422      	add	r2, r4
 8001f3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001f40:	e106      	b.n	8002150 <UART_SetConfig+0x4d8>
 8001f42:	bf00      	nop
 8001f44:	40011000 	.word	0x40011000
 8001f48:	40011400 	.word	0x40011400
 8001f4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f54:	2200      	movs	r2, #0
 8001f56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001f5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001f5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001f62:	4642      	mov	r2, r8
 8001f64:	464b      	mov	r3, r9
 8001f66:	1891      	adds	r1, r2, r2
 8001f68:	6239      	str	r1, [r7, #32]
 8001f6a:	415b      	adcs	r3, r3
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f72:	4641      	mov	r1, r8
 8001f74:	1854      	adds	r4, r2, r1
 8001f76:	4649      	mov	r1, r9
 8001f78:	eb43 0501 	adc.w	r5, r3, r1
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	00eb      	lsls	r3, r5, #3
 8001f86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f8a:	00e2      	lsls	r2, r4, #3
 8001f8c:	4614      	mov	r4, r2
 8001f8e:	461d      	mov	r5, r3
 8001f90:	4643      	mov	r3, r8
 8001f92:	18e3      	adds	r3, r4, r3
 8001f94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001f98:	464b      	mov	r3, r9
 8001f9a:	eb45 0303 	adc.w	r3, r5, r3
 8001f9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001fae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	008b      	lsls	r3, r1, #2
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fc8:	4621      	mov	r1, r4
 8001fca:	008a      	lsls	r2, r1, #2
 8001fcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001fd0:	f7fe f906 	bl	80001e0 <__aeabi_uldivmod>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4b60      	ldr	r3, [pc, #384]	; (800215c <UART_SetConfig+0x4e4>)
 8001fda:	fba3 2302 	umull	r2, r3, r3, r2
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	011c      	lsls	r4, r3, #4
 8001fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001fec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ff0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001ff4:	4642      	mov	r2, r8
 8001ff6:	464b      	mov	r3, r9
 8001ff8:	1891      	adds	r1, r2, r2
 8001ffa:	61b9      	str	r1, [r7, #24]
 8001ffc:	415b      	adcs	r3, r3
 8001ffe:	61fb      	str	r3, [r7, #28]
 8002000:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002004:	4641      	mov	r1, r8
 8002006:	1851      	adds	r1, r2, r1
 8002008:	6139      	str	r1, [r7, #16]
 800200a:	4649      	mov	r1, r9
 800200c:	414b      	adcs	r3, r1
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800201c:	4659      	mov	r1, fp
 800201e:	00cb      	lsls	r3, r1, #3
 8002020:	4651      	mov	r1, sl
 8002022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002026:	4651      	mov	r1, sl
 8002028:	00ca      	lsls	r2, r1, #3
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	4603      	mov	r3, r0
 8002030:	4642      	mov	r2, r8
 8002032:	189b      	adds	r3, r3, r2
 8002034:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002038:	464b      	mov	r3, r9
 800203a:	460a      	mov	r2, r1
 800203c:	eb42 0303 	adc.w	r3, r2, r3
 8002040:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	67bb      	str	r3, [r7, #120]	; 0x78
 800204e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800205c:	4649      	mov	r1, r9
 800205e:	008b      	lsls	r3, r1, #2
 8002060:	4641      	mov	r1, r8
 8002062:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002066:	4641      	mov	r1, r8
 8002068:	008a      	lsls	r2, r1, #2
 800206a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800206e:	f7fe f8b7 	bl	80001e0 <__aeabi_uldivmod>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4611      	mov	r1, r2
 8002078:	4b38      	ldr	r3, [pc, #224]	; (800215c <UART_SetConfig+0x4e4>)
 800207a:	fba3 2301 	umull	r2, r3, r3, r1
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	2264      	movs	r2, #100	; 0x64
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	1acb      	subs	r3, r1, r3
 8002088:	011b      	lsls	r3, r3, #4
 800208a:	3332      	adds	r3, #50	; 0x32
 800208c:	4a33      	ldr	r2, [pc, #204]	; (800215c <UART_SetConfig+0x4e4>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	095b      	lsrs	r3, r3, #5
 8002094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002098:	441c      	add	r4, r3
 800209a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800209e:	2200      	movs	r2, #0
 80020a0:	673b      	str	r3, [r7, #112]	; 0x70
 80020a2:	677a      	str	r2, [r7, #116]	; 0x74
 80020a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80020a8:	4642      	mov	r2, r8
 80020aa:	464b      	mov	r3, r9
 80020ac:	1891      	adds	r1, r2, r2
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	415b      	adcs	r3, r3
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020b8:	4641      	mov	r1, r8
 80020ba:	1851      	adds	r1, r2, r1
 80020bc:	6039      	str	r1, [r7, #0]
 80020be:	4649      	mov	r1, r9
 80020c0:	414b      	adcs	r3, r1
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80020d0:	4659      	mov	r1, fp
 80020d2:	00cb      	lsls	r3, r1, #3
 80020d4:	4651      	mov	r1, sl
 80020d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020da:	4651      	mov	r1, sl
 80020dc:	00ca      	lsls	r2, r1, #3
 80020de:	4610      	mov	r0, r2
 80020e0:	4619      	mov	r1, r3
 80020e2:	4603      	mov	r3, r0
 80020e4:	4642      	mov	r2, r8
 80020e6:	189b      	adds	r3, r3, r2
 80020e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80020ea:	464b      	mov	r3, r9
 80020ec:	460a      	mov	r2, r1
 80020ee:	eb42 0303 	adc.w	r3, r2, r3
 80020f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80020f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	663b      	str	r3, [r7, #96]	; 0x60
 80020fe:	667a      	str	r2, [r7, #100]	; 0x64
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800210c:	4649      	mov	r1, r9
 800210e:	008b      	lsls	r3, r1, #2
 8002110:	4641      	mov	r1, r8
 8002112:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002116:	4641      	mov	r1, r8
 8002118:	008a      	lsls	r2, r1, #2
 800211a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800211e:	f7fe f85f 	bl	80001e0 <__aeabi_uldivmod>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4b0d      	ldr	r3, [pc, #52]	; (800215c <UART_SetConfig+0x4e4>)
 8002128:	fba3 1302 	umull	r1, r3, r3, r2
 800212c:	095b      	lsrs	r3, r3, #5
 800212e:	2164      	movs	r1, #100	; 0x64
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	3332      	adds	r3, #50	; 0x32
 800213a:	4a08      	ldr	r2, [pc, #32]	; (800215c <UART_SetConfig+0x4e4>)
 800213c:	fba2 2303 	umull	r2, r3, r2, r3
 8002140:	095b      	lsrs	r3, r3, #5
 8002142:	f003 020f 	and.w	r2, r3, #15
 8002146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4422      	add	r2, r4
 800214e:	609a      	str	r2, [r3, #8]
}
 8002150:	bf00      	nop
 8002152:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002156:	46bd      	mov	sp, r7
 8002158:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800215c:	51eb851f 	.word	0x51eb851f

08002160 <__NVIC_SetPriority>:
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	6039      	str	r1, [r7, #0]
 800216a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002170:	2b00      	cmp	r3, #0
 8002172:	db0a      	blt.n	800218a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	490c      	ldr	r1, [pc, #48]	; (80021ac <__NVIC_SetPriority+0x4c>)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	0112      	lsls	r2, r2, #4
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	440b      	add	r3, r1
 8002184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002188:	e00a      	b.n	80021a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4908      	ldr	r1, [pc, #32]	; (80021b0 <__NVIC_SetPriority+0x50>)
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	3b04      	subs	r3, #4
 8002198:	0112      	lsls	r2, r2, #4
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	440b      	add	r3, r1
 800219e:	761a      	strb	r2, [r3, #24]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000e100 	.word	0xe000e100
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80021b8:	2100      	movs	r1, #0
 80021ba:	f06f 0004 	mvn.w	r0, #4
 80021be:	f7ff ffcf 	bl	8002160 <__NVIC_SetPriority>
#endif
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021ce:	f3ef 8305 	mrs	r3, IPSR
 80021d2:	603b      	str	r3, [r7, #0]
  return(result);
 80021d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80021da:	f06f 0305 	mvn.w	r3, #5
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	e00c      	b.n	80021fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <osKernelInitialize+0x44>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d105      	bne.n	80021f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <osKernelInitialize+0x44>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	e002      	b.n	80021fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295
 80021fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80021fc:	687b      	ldr	r3, [r7, #4]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	200000ec 	.word	0x200000ec

08002210 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002216:	f3ef 8305 	mrs	r3, IPSR
 800221a:	603b      	str	r3, [r7, #0]
  return(result);
 800221c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002222:	f06f 0305 	mvn.w	r3, #5
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	e010      	b.n	800224c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <osKernelStart+0x48>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d109      	bne.n	8002246 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002232:	f7ff ffbf 	bl	80021b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <osKernelStart+0x48>)
 8002238:	2202      	movs	r2, #2
 800223a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800223c:	f001 f866 	bl	800330c <vTaskStartScheduler>
      stat = osOK;
 8002240:	2300      	movs	r3, #0
 8002242:	607b      	str	r3, [r7, #4]
 8002244:	e002      	b.n	800224c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002246:	f04f 33ff 	mov.w	r3, #4294967295
 800224a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800224c:	687b      	ldr	r3, [r7, #4]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	200000ec 	.word	0x200000ec

0800225c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b08e      	sub	sp, #56	; 0x38
 8002260:	af04      	add	r7, sp, #16
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002268:	2300      	movs	r3, #0
 800226a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800226c:	f3ef 8305 	mrs	r3, IPSR
 8002270:	617b      	str	r3, [r7, #20]
  return(result);
 8002272:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002274:	2b00      	cmp	r3, #0
 8002276:	d17e      	bne.n	8002376 <osThreadNew+0x11a>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d07b      	beq.n	8002376 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800227e:	2380      	movs	r3, #128	; 0x80
 8002280:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002282:	2318      	movs	r3, #24
 8002284:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002286:	2300      	movs	r3, #0
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800228a:	f04f 33ff 	mov.w	r3, #4294967295
 800228e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d045      	beq.n	8002322 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <osThreadNew+0x48>
        name = attr->name;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <osThreadNew+0x6e>
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	2b38      	cmp	r3, #56	; 0x38
 80022bc:	d805      	bhi.n	80022ca <osThreadNew+0x6e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <osThreadNew+0x72>
        return (NULL);
 80022ca:	2300      	movs	r3, #0
 80022cc:	e054      	b.n	8002378 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	089b      	lsrs	r3, r3, #2
 80022dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00e      	beq.n	8002304 <osThreadNew+0xa8>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2b5b      	cmp	r3, #91	; 0x5b
 80022ec:	d90a      	bls.n	8002304 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d006      	beq.n	8002304 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <osThreadNew+0xa8>
        mem = 1;
 80022fe:	2301      	movs	r3, #1
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	e010      	b.n	8002326 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10c      	bne.n	8002326 <osThreadNew+0xca>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d108      	bne.n	8002326 <osThreadNew+0xca>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d104      	bne.n	8002326 <osThreadNew+0xca>
          mem = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	61bb      	str	r3, [r7, #24]
 8002320:	e001      	b.n	8002326 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d110      	bne.n	800234e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002334:	9202      	str	r2, [sp, #8]
 8002336:	9301      	str	r3, [sp, #4]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	6a3a      	ldr	r2, [r7, #32]
 8002340:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 fe0c 	bl	8002f60 <xTaskCreateStatic>
 8002348:	4603      	mov	r3, r0
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	e013      	b.n	8002376 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d110      	bne.n	8002376 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	b29a      	uxth	r2, r3
 8002358:	f107 0310 	add.w	r3, r7, #16
 800235c:	9301      	str	r3, [sp, #4]
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 fe57 	bl	800301a <xTaskCreate>
 800236c:	4603      	mov	r3, r0
 800236e:	2b01      	cmp	r3, #1
 8002370:	d001      	beq.n	8002376 <osThreadNew+0x11a>
            hTask = NULL;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002376:	693b      	ldr	r3, [r7, #16]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3728      	adds	r7, #40	; 0x28
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002388:	f3ef 8305 	mrs	r3, IPSR
 800238c:	60bb      	str	r3, [r7, #8]
  return(result);
 800238e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <osDelay+0x1c>
    stat = osErrorISR;
 8002394:	f06f 0305 	mvn.w	r3, #5
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	e007      	b.n	80023ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 ff7c 	bl	80032a4 <vTaskDelay>
    }
  }

  return (stat);
 80023ac:	68fb      	ldr	r3, [r7, #12]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80023c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	4a06      	ldr	r2, [pc, #24]	; (80023e8 <vApplicationGetIdleTaskMemory+0x30>)
 80023ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2280      	movs	r2, #128	; 0x80
 80023d4:	601a      	str	r2, [r3, #0]
}
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	200000f0 	.word	0x200000f0
 80023e8:	2000014c 	.word	0x2000014c

080023ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4a07      	ldr	r2, [pc, #28]	; (8002418 <vApplicationGetTimerTaskMemory+0x2c>)
 80023fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	4a06      	ldr	r2, [pc, #24]	; (800241c <vApplicationGetTimerTaskMemory+0x30>)
 8002402:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f44f 7280 	mov.w	r2, #256	; 0x100
 800240a:	601a      	str	r2, [r3, #0]
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	2000034c 	.word	0x2000034c
 800241c:	200003a8 	.word	0x200003a8

08002420 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f103 0208 	add.w	r2, r3, #8
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f04f 32ff 	mov.w	r2, #4294967295
 8002438:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f103 0208 	add.w	r2, r3, #8
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f103 0208 	add.w	r2, r3, #8
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800247a:	b480      	push	{r7}
 800247c:	b085      	sub	sp, #20
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	601a      	str	r2, [r3, #0]
}
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024c2:	b480      	push	{r7}
 80024c4:	b085      	sub	sp, #20
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d8:	d103      	bne.n	80024e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	e00c      	b.n	80024fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3308      	adds	r3, #8
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	e002      	b.n	80024f0 <vListInsert+0x2e>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d2f6      	bcs.n	80024ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	601a      	str	r2, [r3, #0]
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6892      	ldr	r2, [r2, #8]
 800254a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6852      	ldr	r2, [r2, #4]
 8002554:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	429a      	cmp	r2, r3
 800255e:	d103      	bne.n	8002568 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	1e5a      	subs	r2, r3, #1
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10a      	bne.n	80025b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800259c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a0:	f383 8811 	msr	BASEPRI, r3
 80025a4:	f3bf 8f6f 	isb	sy
 80025a8:	f3bf 8f4f 	dsb	sy
 80025ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80025ae:	bf00      	nop
 80025b0:	e7fe      	b.n	80025b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80025b2:	f002 f84f 	bl	8004654 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025be:	68f9      	ldr	r1, [r7, #12]
 80025c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	441a      	add	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e2:	3b01      	subs	r3, #1
 80025e4:	68f9      	ldr	r1, [r7, #12]
 80025e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	441a      	add	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	22ff      	movs	r2, #255	; 0xff
 80025f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	22ff      	movs	r2, #255	; 0xff
 80025fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d114      	bne.n	8002632 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d01a      	beq.n	8002646 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3310      	adds	r3, #16
 8002614:	4618      	mov	r0, r3
 8002616:	f001 f903 	bl	8003820 <xTaskRemoveFromEventList>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d012      	beq.n	8002646 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <xQueueGenericReset+0xcc>)
 8002622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	f3bf 8f4f 	dsb	sy
 800262c:	f3bf 8f6f 	isb	sy
 8002630:	e009      	b.n	8002646 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	3310      	adds	r3, #16
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fef2 	bl	8002420 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	3324      	adds	r3, #36	; 0x24
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff feed 	bl	8002420 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002646:	f002 f835 	bl	80046b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800264a:	2301      	movs	r3, #1
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	e000ed04 	.word	0xe000ed04

08002658 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08e      	sub	sp, #56	; 0x38
 800265c:	af02      	add	r7, sp, #8
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10a      	bne.n	8002682 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800266c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002670:	f383 8811 	msr	BASEPRI, r3
 8002674:	f3bf 8f6f 	isb	sy
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800267e:	bf00      	nop
 8002680:	e7fe      	b.n	8002680 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10a      	bne.n	800269e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268c:	f383 8811 	msr	BASEPRI, r3
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
}
 800269a:	bf00      	nop
 800269c:	e7fe      	b.n	800269c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <xQueueGenericCreateStatic+0x52>
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <xQueueGenericCreateStatic+0x56>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <xQueueGenericCreateStatic+0x58>
 80026ae:	2300      	movs	r3, #0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10a      	bne.n	80026ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80026b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b8:	f383 8811 	msr	BASEPRI, r3
 80026bc:	f3bf 8f6f 	isb	sy
 80026c0:	f3bf 8f4f 	dsb	sy
 80026c4:	623b      	str	r3, [r7, #32]
}
 80026c6:	bf00      	nop
 80026c8:	e7fe      	b.n	80026c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d102      	bne.n	80026d6 <xQueueGenericCreateStatic+0x7e>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <xQueueGenericCreateStatic+0x82>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <xQueueGenericCreateStatic+0x84>
 80026da:	2300      	movs	r3, #0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10a      	bne.n	80026f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	61fb      	str	r3, [r7, #28]
}
 80026f2:	bf00      	nop
 80026f4:	e7fe      	b.n	80026f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80026f6:	2350      	movs	r3, #80	; 0x50
 80026f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2b50      	cmp	r3, #80	; 0x50
 80026fe:	d00a      	beq.n	8002716 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002704:	f383 8811 	msr	BASEPRI, r3
 8002708:	f3bf 8f6f 	isb	sy
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	61bb      	str	r3, [r7, #24]
}
 8002712:	bf00      	nop
 8002714:	e7fe      	b.n	8002714 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002716:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800271c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00d      	beq.n	800273e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800272a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800272e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	4613      	mov	r3, r2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	68b9      	ldr	r1, [r7, #8]
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 f805 	bl	8002748 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002740:	4618      	mov	r0, r3
 8002742:	3730      	adds	r7, #48	; 0x30
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d103      	bne.n	8002764 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	e002      	b.n	800276a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002776:	2101      	movs	r1, #1
 8002778:	69b8      	ldr	r0, [r7, #24]
 800277a:	f7ff ff05 	bl	8002588 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08e      	sub	sp, #56	; 0x38
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800279e:	2300      	movs	r3, #0
 80027a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80027a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10a      	bne.n	80027c2 <xQueueGenericSend+0x32>
	__asm volatile
 80027ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b0:	f383 8811 	msr	BASEPRI, r3
 80027b4:	f3bf 8f6f 	isb	sy
 80027b8:	f3bf 8f4f 	dsb	sy
 80027bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027be:	bf00      	nop
 80027c0:	e7fe      	b.n	80027c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d103      	bne.n	80027d0 <xQueueGenericSend+0x40>
 80027c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <xQueueGenericSend+0x44>
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <xQueueGenericSend+0x46>
 80027d4:	2300      	movs	r3, #0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10a      	bne.n	80027f0 <xQueueGenericSend+0x60>
	__asm volatile
 80027da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027de:	f383 8811 	msr	BASEPRI, r3
 80027e2:	f3bf 8f6f 	isb	sy
 80027e6:	f3bf 8f4f 	dsb	sy
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80027ec:	bf00      	nop
 80027ee:	e7fe      	b.n	80027ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d103      	bne.n	80027fe <xQueueGenericSend+0x6e>
 80027f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <xQueueGenericSend+0x72>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <xQueueGenericSend+0x74>
 8002802:	2300      	movs	r3, #0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10a      	bne.n	800281e <xQueueGenericSend+0x8e>
	__asm volatile
 8002808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280c:	f383 8811 	msr	BASEPRI, r3
 8002810:	f3bf 8f6f 	isb	sy
 8002814:	f3bf 8f4f 	dsb	sy
 8002818:	623b      	str	r3, [r7, #32]
}
 800281a:	bf00      	nop
 800281c:	e7fe      	b.n	800281c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800281e:	f001 f9bd 	bl	8003b9c <xTaskGetSchedulerState>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d102      	bne.n	800282e <xQueueGenericSend+0x9e>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <xQueueGenericSend+0xa2>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <xQueueGenericSend+0xa4>
 8002832:	2300      	movs	r3, #0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10a      	bne.n	800284e <xQueueGenericSend+0xbe>
	__asm volatile
 8002838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283c:	f383 8811 	msr	BASEPRI, r3
 8002840:	f3bf 8f6f 	isb	sy
 8002844:	f3bf 8f4f 	dsb	sy
 8002848:	61fb      	str	r3, [r7, #28]
}
 800284a:	bf00      	nop
 800284c:	e7fe      	b.n	800284c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800284e:	f001 ff01 	bl	8004654 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285a:	429a      	cmp	r2, r3
 800285c:	d302      	bcc.n	8002864 <xQueueGenericSend+0xd4>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d129      	bne.n	80028b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	68b9      	ldr	r1, [r7, #8]
 8002868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800286a:	f000 fa0b 	bl	8002c84 <prvCopyDataToQueue>
 800286e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	2b00      	cmp	r3, #0
 8002876:	d010      	beq.n	800289a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287a:	3324      	adds	r3, #36	; 0x24
 800287c:	4618      	mov	r0, r3
 800287e:	f000 ffcf 	bl	8003820 <xTaskRemoveFromEventList>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d013      	beq.n	80028b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002888:	4b3f      	ldr	r3, [pc, #252]	; (8002988 <xQueueGenericSend+0x1f8>)
 800288a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	f3bf 8f4f 	dsb	sy
 8002894:	f3bf 8f6f 	isb	sy
 8002898:	e00a      	b.n	80028b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800289a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289c:	2b00      	cmp	r3, #0
 800289e:	d007      	beq.n	80028b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80028a0:	4b39      	ldr	r3, [pc, #228]	; (8002988 <xQueueGenericSend+0x1f8>)
 80028a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80028b0:	f001 ff00 	bl	80046b4 <vPortExitCritical>
				return pdPASS;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e063      	b.n	8002980 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d103      	bne.n	80028c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028be:	f001 fef9 	bl	80046b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e05c      	b.n	8002980 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d106      	bne.n	80028da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	4618      	mov	r0, r3
 80028d2:	f001 f809 	bl	80038e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028d6:	2301      	movs	r3, #1
 80028d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028da:	f001 feeb 	bl	80046b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028de:	f000 fd7b 	bl	80033d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028e2:	f001 feb7 	bl	8004654 <vPortEnterCritical>
 80028e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028ec:	b25b      	sxtb	r3, r3
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f2:	d103      	bne.n	80028fc <xQueueGenericSend+0x16c>
 80028f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002902:	b25b      	sxtb	r3, r3
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002908:	d103      	bne.n	8002912 <xQueueGenericSend+0x182>
 800290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002912:	f001 fecf 	bl	80046b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002916:	1d3a      	adds	r2, r7, #4
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	4611      	mov	r1, r2
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fff8 	bl	8003914 <xTaskCheckForTimeOut>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d124      	bne.n	8002974 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800292a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800292c:	f000 faa2 	bl	8002e74 <prvIsQueueFull>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d018      	beq.n	8002968 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002938:	3310      	adds	r3, #16
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	4611      	mov	r1, r2
 800293e:	4618      	mov	r0, r3
 8002940:	f000 ff1e 	bl	8003780 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002946:	f000 fa2d 	bl	8002da4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800294a:	f000 fd53 	bl	80033f4 <xTaskResumeAll>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	f47f af7c 	bne.w	800284e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002956:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <xQueueGenericSend+0x1f8>)
 8002958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	f3bf 8f4f 	dsb	sy
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	e772      	b.n	800284e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800296a:	f000 fa1b 	bl	8002da4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800296e:	f000 fd41 	bl	80033f4 <xTaskResumeAll>
 8002972:	e76c      	b.n	800284e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002976:	f000 fa15 	bl	8002da4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800297a:	f000 fd3b 	bl	80033f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800297e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002980:	4618      	mov	r0, r3
 8002982:	3738      	adds	r7, #56	; 0x38
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	e000ed04 	.word	0xe000ed04

0800298c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b090      	sub	sp, #64	; 0x40
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800299e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10a      	bne.n	80029ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80029a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a8:	f383 8811 	msr	BASEPRI, r3
 80029ac:	f3bf 8f6f 	isb	sy
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029b6:	bf00      	nop
 80029b8:	e7fe      	b.n	80029b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d103      	bne.n	80029c8 <xQueueGenericSendFromISR+0x3c>
 80029c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <xQueueGenericSendFromISR+0x40>
 80029c8:	2301      	movs	r3, #1
 80029ca:	e000      	b.n	80029ce <xQueueGenericSendFromISR+0x42>
 80029cc:	2300      	movs	r3, #0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10a      	bne.n	80029e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80029d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d6:	f383 8811 	msr	BASEPRI, r3
 80029da:	f3bf 8f6f 	isb	sy
 80029de:	f3bf 8f4f 	dsb	sy
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029e4:	bf00      	nop
 80029e6:	e7fe      	b.n	80029e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d103      	bne.n	80029f6 <xQueueGenericSendFromISR+0x6a>
 80029ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d101      	bne.n	80029fa <xQueueGenericSendFromISR+0x6e>
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <xQueueGenericSendFromISR+0x70>
 80029fa:	2300      	movs	r3, #0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a04:	f383 8811 	msr	BASEPRI, r3
 8002a08:	f3bf 8f6f 	isb	sy
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	623b      	str	r3, [r7, #32]
}
 8002a12:	bf00      	nop
 8002a14:	e7fe      	b.n	8002a14 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a16:	f001 feff 	bl	8004818 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002a1a:	f3ef 8211 	mrs	r2, BASEPRI
 8002a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a22:	f383 8811 	msr	BASEPRI, r3
 8002a26:	f3bf 8f6f 	isb	sy
 8002a2a:	f3bf 8f4f 	dsb	sy
 8002a2e:	61fa      	str	r2, [r7, #28]
 8002a30:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002a32:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a34:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d302      	bcc.n	8002a48 <xQueueGenericSendFromISR+0xbc>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d12f      	bne.n	8002aa8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	68b9      	ldr	r1, [r7, #8]
 8002a5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a5e:	f000 f911 	bl	8002c84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002a62:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6a:	d112      	bne.n	8002a92 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d016      	beq.n	8002aa2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a76:	3324      	adds	r3, #36	; 0x24
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 fed1 	bl	8003820 <xTaskRemoveFromEventList>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00e      	beq.n	8002aa2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	e007      	b.n	8002aa2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a96:	3301      	adds	r3, #1
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	b25a      	sxtb	r2, r3
 8002a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002aa6:	e001      	b.n	8002aac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002ab6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3740      	adds	r7, #64	; 0x40
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08c      	sub	sp, #48	; 0x30
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10a      	bne.n	8002af4 <xQueueReceive+0x30>
	__asm volatile
 8002ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	623b      	str	r3, [r7, #32]
}
 8002af0:	bf00      	nop
 8002af2:	e7fe      	b.n	8002af2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d103      	bne.n	8002b02 <xQueueReceive+0x3e>
 8002afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <xQueueReceive+0x42>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <xQueueReceive+0x44>
 8002b06:	2300      	movs	r3, #0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10a      	bne.n	8002b22 <xQueueReceive+0x5e>
	__asm volatile
 8002b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b10:	f383 8811 	msr	BASEPRI, r3
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	61fb      	str	r3, [r7, #28]
}
 8002b1e:	bf00      	nop
 8002b20:	e7fe      	b.n	8002b20 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b22:	f001 f83b 	bl	8003b9c <xTaskGetSchedulerState>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <xQueueReceive+0x6e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <xQueueReceive+0x72>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <xQueueReceive+0x74>
 8002b36:	2300      	movs	r3, #0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <xQueueReceive+0x8e>
	__asm volatile
 8002b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b40:	f383 8811 	msr	BASEPRI, r3
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	61bb      	str	r3, [r7, #24]
}
 8002b4e:	bf00      	nop
 8002b50:	e7fe      	b.n	8002b50 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b52:	f001 fd7f 	bl	8004654 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d01f      	beq.n	8002ba2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b62:	68b9      	ldr	r1, [r7, #8]
 8002b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b66:	f000 f8f7 	bl	8002d58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	1e5a      	subs	r2, r3, #1
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00f      	beq.n	8002b9a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7c:	3310      	adds	r3, #16
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 fe4e 	bl	8003820 <xTaskRemoveFromEventList>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d007      	beq.n	8002b9a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002b8a:	4b3d      	ldr	r3, [pc, #244]	; (8002c80 <xQueueReceive+0x1bc>)
 8002b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002b9a:	f001 fd8b 	bl	80046b4 <vPortExitCritical>
				return pdPASS;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e069      	b.n	8002c76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d103      	bne.n	8002bb0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ba8:	f001 fd84 	bl	80046b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002bac:	2300      	movs	r3, #0
 8002bae:	e062      	b.n	8002c76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002bb6:	f107 0310 	add.w	r3, r7, #16
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fe94 	bl	80038e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bc4:	f001 fd76 	bl	80046b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bc8:	f000 fc06 	bl	80033d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bcc:	f001 fd42 	bl	8004654 <vPortEnterCritical>
 8002bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bd6:	b25b      	sxtb	r3, r3
 8002bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bdc:	d103      	bne.n	8002be6 <xQueueReceive+0x122>
 8002bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bec:	b25b      	sxtb	r3, r3
 8002bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf2:	d103      	bne.n	8002bfc <xQueueReceive+0x138>
 8002bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bfc:	f001 fd5a 	bl	80046b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c00:	1d3a      	adds	r2, r7, #4
 8002c02:	f107 0310 	add.w	r3, r7, #16
 8002c06:	4611      	mov	r1, r2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 fe83 	bl	8003914 <xTaskCheckForTimeOut>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d123      	bne.n	8002c5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c16:	f000 f917 	bl	8002e48 <prvIsQueueEmpty>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d017      	beq.n	8002c50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c22:	3324      	adds	r3, #36	; 0x24
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 fda9 	bl	8003780 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c30:	f000 f8b8 	bl	8002da4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c34:	f000 fbde 	bl	80033f4 <xTaskResumeAll>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d189      	bne.n	8002b52 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002c3e:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <xQueueReceive+0x1bc>)
 8002c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	f3bf 8f6f 	isb	sy
 8002c4e:	e780      	b.n	8002b52 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c52:	f000 f8a7 	bl	8002da4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c56:	f000 fbcd 	bl	80033f4 <xTaskResumeAll>
 8002c5a:	e77a      	b.n	8002b52 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c5e:	f000 f8a1 	bl	8002da4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c62:	f000 fbc7 	bl	80033f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c68:	f000 f8ee 	bl	8002e48 <prvIsQueueEmpty>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f43f af6f 	beq.w	8002b52 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3730      	adds	r7, #48	; 0x30
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	e000ed04 	.word	0xe000ed04

08002c84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10d      	bne.n	8002cbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d14d      	bne.n	8002d46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 ff92 	bl	8003bd8 <xTaskPriorityDisinherit>
 8002cb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	e043      	b.n	8002d46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d119      	bne.n	8002cf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6858      	ldr	r0, [r3, #4]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	461a      	mov	r2, r3
 8002cce:	68b9      	ldr	r1, [r7, #8]
 8002cd0:	f002 fa3d 	bl	800514e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	441a      	add	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d32b      	bcc.n	8002d46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	e026      	b.n	8002d46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	68d8      	ldr	r0, [r3, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	461a      	mov	r2, r3
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	f002 fa23 	bl	800514e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	425b      	negs	r3, r3
 8002d12:	441a      	add	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d207      	bcs.n	8002d34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	425b      	negs	r3, r3
 8002d2e:	441a      	add	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d105      	bne.n	8002d46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002d4e:	697b      	ldr	r3, [r7, #20]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d018      	beq.n	8002d9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	441a      	add	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d303      	bcc.n	8002d8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68d9      	ldr	r1, [r3, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	461a      	mov	r2, r3
 8002d96:	6838      	ldr	r0, [r7, #0]
 8002d98:	f002 f9d9 	bl	800514e <memcpy>
	}
}
 8002d9c:	bf00      	nop
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002dac:	f001 fc52 	bl	8004654 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002db6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002db8:	e011      	b.n	8002dde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d012      	beq.n	8002de8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3324      	adds	r3, #36	; 0x24
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fd2a 	bl	8003820 <xTaskRemoveFromEventList>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002dd2:	f000 fe01 	bl	80039d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	dce9      	bgt.n	8002dba <prvUnlockQueue+0x16>
 8002de6:	e000      	b.n	8002dea <prvUnlockQueue+0x46>
					break;
 8002de8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	22ff      	movs	r2, #255	; 0xff
 8002dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002df2:	f001 fc5f 	bl	80046b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002df6:	f001 fc2d 	bl	8004654 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e02:	e011      	b.n	8002e28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d012      	beq.n	8002e32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3310      	adds	r3, #16
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 fd05 	bl	8003820 <xTaskRemoveFromEventList>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002e1c:	f000 fddc 	bl	80039d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002e20:	7bbb      	ldrb	r3, [r7, #14]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	dce9      	bgt.n	8002e04 <prvUnlockQueue+0x60>
 8002e30:	e000      	b.n	8002e34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002e32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	22ff      	movs	r2, #255	; 0xff
 8002e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002e3c:	f001 fc3a 	bl	80046b4 <vPortExitCritical>
}
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e50:	f001 fc00 	bl	8004654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	e001      	b.n	8002e66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e66:	f001 fc25 	bl	80046b4 <vPortExitCritical>

	return xReturn;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e7c:	f001 fbea 	bl	8004654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d102      	bne.n	8002e92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	e001      	b.n	8002e96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e96:	f001 fc0d 	bl	80046b4 <vPortExitCritical>

	return xReturn;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	e014      	b.n	8002ede <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002eb4:	4a0f      	ldr	r2, [pc, #60]	; (8002ef4 <vQueueAddToRegistry+0x50>)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10b      	bne.n	8002ed8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ec0:	490c      	ldr	r1, [pc, #48]	; (8002ef4 <vQueueAddToRegistry+0x50>)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002eca:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <vQueueAddToRegistry+0x50>)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002ed6:	e006      	b.n	8002ee6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3301      	adds	r3, #1
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b07      	cmp	r3, #7
 8002ee2:	d9e7      	bls.n	8002eb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	200007a8 	.word	0x200007a8

08002ef8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002f08:	f001 fba4 	bl	8004654 <vPortEnterCritical>
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f12:	b25b      	sxtb	r3, r3
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f18:	d103      	bne.n	8002f22 <vQueueWaitForMessageRestricted+0x2a>
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f28:	b25b      	sxtb	r3, r3
 8002f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2e:	d103      	bne.n	8002f38 <vQueueWaitForMessageRestricted+0x40>
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f38:	f001 fbbc 	bl	80046b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d106      	bne.n	8002f52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	3324      	adds	r3, #36	; 0x24
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	68b9      	ldr	r1, [r7, #8]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 fc3b 	bl	80037c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002f52:	6978      	ldr	r0, [r7, #20]
 8002f54:	f7ff ff26 	bl	8002da4 <prvUnlockQueue>
	}
 8002f58:	bf00      	nop
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08e      	sub	sp, #56	; 0x38
 8002f64:	af04      	add	r7, sp, #16
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10a      	bne.n	8002f8a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f78:	f383 8811 	msr	BASEPRI, r3
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	623b      	str	r3, [r7, #32]
}
 8002f86:	bf00      	nop
 8002f88:	e7fe      	b.n	8002f88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10a      	bne.n	8002fa6 <xTaskCreateStatic+0x46>
	__asm volatile
 8002f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	61fb      	str	r3, [r7, #28]
}
 8002fa2:	bf00      	nop
 8002fa4:	e7fe      	b.n	8002fa4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002fa6:	235c      	movs	r3, #92	; 0x5c
 8002fa8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	2b5c      	cmp	r3, #92	; 0x5c
 8002fae:	d00a      	beq.n	8002fc6 <xTaskCreateStatic+0x66>
	__asm volatile
 8002fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb4:	f383 8811 	msr	BASEPRI, r3
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	61bb      	str	r3, [r7, #24]
}
 8002fc2:	bf00      	nop
 8002fc4:	e7fe      	b.n	8002fc4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002fc6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01e      	beq.n	800300c <xTaskCreateStatic+0xac>
 8002fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d01b      	beq.n	800300c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	9303      	str	r3, [sp, #12]
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	9302      	str	r3, [sp, #8]
 8002fee:	f107 0314 	add.w	r3, r7, #20
 8002ff2:	9301      	str	r3, [sp, #4]
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	68b9      	ldr	r1, [r7, #8]
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 f850 	bl	80030a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003004:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003006:	f000 f8dd 	bl	80031c4 <prvAddNewTaskToReadyList>
 800300a:	e001      	b.n	8003010 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003010:	697b      	ldr	r3, [r7, #20]
	}
 8003012:	4618      	mov	r0, r3
 8003014:	3728      	adds	r7, #40	; 0x28
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800301a:	b580      	push	{r7, lr}
 800301c:	b08c      	sub	sp, #48	; 0x30
 800301e:	af04      	add	r7, sp, #16
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	603b      	str	r3, [r7, #0]
 8003026:	4613      	mov	r3, r2
 8003028:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4618      	mov	r0, r3
 8003030:	f001 fc32 	bl	8004898 <pvPortMalloc>
 8003034:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00e      	beq.n	800305a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800303c:	205c      	movs	r0, #92	; 0x5c
 800303e:	f001 fc2b 	bl	8004898 <pvPortMalloc>
 8003042:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	631a      	str	r2, [r3, #48]	; 0x30
 8003050:	e005      	b.n	800305e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003052:	6978      	ldr	r0, [r7, #20]
 8003054:	f001 fcec 	bl	8004a30 <vPortFree>
 8003058:	e001      	b.n	800305e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800305a:	2300      	movs	r3, #0
 800305c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d017      	beq.n	8003094 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800306c:	88fa      	ldrh	r2, [r7, #6]
 800306e:	2300      	movs	r3, #0
 8003070:	9303      	str	r3, [sp, #12]
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	9302      	str	r3, [sp, #8]
 8003076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003078:	9301      	str	r3, [sp, #4]
 800307a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 f80e 	bl	80030a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003088:	69f8      	ldr	r0, [r7, #28]
 800308a:	f000 f89b 	bl	80031c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800308e:	2301      	movs	r3, #1
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	e002      	b.n	800309a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003094:	f04f 33ff 	mov.w	r3, #4294967295
 8003098:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800309a:	69bb      	ldr	r3, [r7, #24]
	}
 800309c:	4618      	mov	r0, r3
 800309e:	3720      	adds	r7, #32
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80030b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	461a      	mov	r2, r3
 80030bc:	21a5      	movs	r1, #165	; 0xa5
 80030be:	f001 ffcb 	bl	8005058 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030cc:	3b01      	subs	r3, #1
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	f023 0307 	bic.w	r3, r3, #7
 80030da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80030e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ea:	f383 8811 	msr	BASEPRI, r3
 80030ee:	f3bf 8f6f 	isb	sy
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	617b      	str	r3, [r7, #20]
}
 80030f8:	bf00      	nop
 80030fa:	e7fe      	b.n	80030fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d01f      	beq.n	8003142 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	e012      	b.n	800312e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	4413      	add	r3, r2
 800310e:	7819      	ldrb	r1, [r3, #0]
 8003110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	4413      	add	r3, r2
 8003116:	3334      	adds	r3, #52	; 0x34
 8003118:	460a      	mov	r2, r1
 800311a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	4413      	add	r3, r2
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d006      	beq.n	8003136 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	3301      	adds	r3, #1
 800312c:	61fb      	str	r3, [r7, #28]
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	2b0f      	cmp	r3, #15
 8003132:	d9e9      	bls.n	8003108 <prvInitialiseNewTask+0x64>
 8003134:	e000      	b.n	8003138 <prvInitialiseNewTask+0x94>
			{
				break;
 8003136:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003140:	e003      	b.n	800314a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800314a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314c:	2b37      	cmp	r3, #55	; 0x37
 800314e:	d901      	bls.n	8003154 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003150:	2337      	movs	r3, #55	; 0x37
 8003152:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003158:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800315a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800315e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003162:	2200      	movs	r2, #0
 8003164:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003168:	3304      	adds	r3, #4
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff f978 	bl	8002460 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003172:	3318      	adds	r3, #24
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff f973 	bl	8002460 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800317e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003182:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003188:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800318a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800318e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003192:	2200      	movs	r2, #0
 8003194:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	68f9      	ldr	r1, [r7, #12]
 80031a2:	69b8      	ldr	r0, [r7, #24]
 80031a4:	f001 f928 	bl	80043f8 <pxPortInitialiseStack>
 80031a8:	4602      	mov	r2, r0
 80031aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80031ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031ba:	bf00      	nop
 80031bc:	3720      	adds	r7, #32
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80031cc:	f001 fa42 	bl	8004654 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80031d0:	4b2d      	ldr	r3, [pc, #180]	; (8003288 <prvAddNewTaskToReadyList+0xc4>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	3301      	adds	r3, #1
 80031d6:	4a2c      	ldr	r2, [pc, #176]	; (8003288 <prvAddNewTaskToReadyList+0xc4>)
 80031d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80031da:	4b2c      	ldr	r3, [pc, #176]	; (800328c <prvAddNewTaskToReadyList+0xc8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80031e2:	4a2a      	ldr	r2, [pc, #168]	; (800328c <prvAddNewTaskToReadyList+0xc8>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031e8:	4b27      	ldr	r3, [pc, #156]	; (8003288 <prvAddNewTaskToReadyList+0xc4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d110      	bne.n	8003212 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80031f0:	f000 fc16 	bl	8003a20 <prvInitialiseTaskLists>
 80031f4:	e00d      	b.n	8003212 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80031f6:	4b26      	ldr	r3, [pc, #152]	; (8003290 <prvAddNewTaskToReadyList+0xcc>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031fe:	4b23      	ldr	r3, [pc, #140]	; (800328c <prvAddNewTaskToReadyList+0xc8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	429a      	cmp	r2, r3
 800320a:	d802      	bhi.n	8003212 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800320c:	4a1f      	ldr	r2, [pc, #124]	; (800328c <prvAddNewTaskToReadyList+0xc8>)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003212:	4b20      	ldr	r3, [pc, #128]	; (8003294 <prvAddNewTaskToReadyList+0xd0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3301      	adds	r3, #1
 8003218:	4a1e      	ldr	r2, [pc, #120]	; (8003294 <prvAddNewTaskToReadyList+0xd0>)
 800321a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800321c:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <prvAddNewTaskToReadyList+0xd0>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003228:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <prvAddNewTaskToReadyList+0xd4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d903      	bls.n	8003238 <prvAddNewTaskToReadyList+0x74>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	4a18      	ldr	r2, [pc, #96]	; (8003298 <prvAddNewTaskToReadyList+0xd4>)
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4a15      	ldr	r2, [pc, #84]	; (800329c <prvAddNewTaskToReadyList+0xd8>)
 8003246:	441a      	add	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3304      	adds	r3, #4
 800324c:	4619      	mov	r1, r3
 800324e:	4610      	mov	r0, r2
 8003250:	f7ff f913 	bl	800247a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003254:	f001 fa2e 	bl	80046b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003258:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <prvAddNewTaskToReadyList+0xcc>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00e      	beq.n	800327e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003260:	4b0a      	ldr	r3, [pc, #40]	; (800328c <prvAddNewTaskToReadyList+0xc8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	429a      	cmp	r2, r3
 800326c:	d207      	bcs.n	800327e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800326e:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <prvAddNewTaskToReadyList+0xdc>)
 8003270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000cbc 	.word	0x20000cbc
 800328c:	200007e8 	.word	0x200007e8
 8003290:	20000cc8 	.word	0x20000cc8
 8003294:	20000cd8 	.word	0x20000cd8
 8003298:	20000cc4 	.word	0x20000cc4
 800329c:	200007ec 	.word	0x200007ec
 80032a0:	e000ed04 	.word	0xe000ed04

080032a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d017      	beq.n	80032e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80032b6:	4b13      	ldr	r3, [pc, #76]	; (8003304 <vTaskDelay+0x60>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <vTaskDelay+0x30>
	__asm volatile
 80032be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	60bb      	str	r3, [r7, #8]
}
 80032d0:	bf00      	nop
 80032d2:	e7fe      	b.n	80032d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80032d4:	f000 f880 	bl	80033d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032d8:	2100      	movs	r1, #0
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fcea 	bl	8003cb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80032e0:	f000 f888 	bl	80033f4 <xTaskResumeAll>
 80032e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d107      	bne.n	80032fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80032ec:	4b06      	ldr	r3, [pc, #24]	; (8003308 <vTaskDelay+0x64>)
 80032ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80032fc:	bf00      	nop
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20000ce4 	.word	0x20000ce4
 8003308:	e000ed04 	.word	0xe000ed04

0800330c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08a      	sub	sp, #40	; 0x28
 8003310:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003312:	2300      	movs	r3, #0
 8003314:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003316:	2300      	movs	r3, #0
 8003318:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800331a:	463a      	mov	r2, r7
 800331c:	1d39      	adds	r1, r7, #4
 800331e:	f107 0308 	add.w	r3, r7, #8
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff f848 	bl	80023b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003328:	6839      	ldr	r1, [r7, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	9202      	str	r2, [sp, #8]
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	2300      	movs	r3, #0
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	2300      	movs	r3, #0
 8003338:	460a      	mov	r2, r1
 800333a:	4921      	ldr	r1, [pc, #132]	; (80033c0 <vTaskStartScheduler+0xb4>)
 800333c:	4821      	ldr	r0, [pc, #132]	; (80033c4 <vTaskStartScheduler+0xb8>)
 800333e:	f7ff fe0f 	bl	8002f60 <xTaskCreateStatic>
 8003342:	4603      	mov	r3, r0
 8003344:	4a20      	ldr	r2, [pc, #128]	; (80033c8 <vTaskStartScheduler+0xbc>)
 8003346:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003348:	4b1f      	ldr	r3, [pc, #124]	; (80033c8 <vTaskStartScheduler+0xbc>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003350:	2301      	movs	r3, #1
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	e001      	b.n	800335a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d102      	bne.n	8003366 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003360:	f000 fcfc 	bl	8003d5c <xTimerCreateTimerTask>
 8003364:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d116      	bne.n	800339a <vTaskStartScheduler+0x8e>
	__asm volatile
 800336c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	613b      	str	r3, [r7, #16]
}
 800337e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003380:	4b12      	ldr	r3, [pc, #72]	; (80033cc <vTaskStartScheduler+0xc0>)
 8003382:	f04f 32ff 	mov.w	r2, #4294967295
 8003386:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003388:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <vTaskStartScheduler+0xc4>)
 800338a:	2201      	movs	r2, #1
 800338c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800338e:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <vTaskStartScheduler+0xc8>)
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003394:	f001 f8bc 	bl	8004510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003398:	e00e      	b.n	80033b8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a0:	d10a      	bne.n	80033b8 <vTaskStartScheduler+0xac>
	__asm volatile
 80033a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a6:	f383 8811 	msr	BASEPRI, r3
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	60fb      	str	r3, [r7, #12]
}
 80033b4:	bf00      	nop
 80033b6:	e7fe      	b.n	80033b6 <vTaskStartScheduler+0xaa>
}
 80033b8:	bf00      	nop
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	0800563c 	.word	0x0800563c
 80033c4:	080039f1 	.word	0x080039f1
 80033c8:	20000ce0 	.word	0x20000ce0
 80033cc:	20000cdc 	.word	0x20000cdc
 80033d0:	20000cc8 	.word	0x20000cc8
 80033d4:	20000cc0 	.word	0x20000cc0

080033d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80033dc:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <vTaskSuspendAll+0x18>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3301      	adds	r3, #1
 80033e2:	4a03      	ldr	r2, [pc, #12]	; (80033f0 <vTaskSuspendAll+0x18>)
 80033e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80033e6:	bf00      	nop
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	20000ce4 	.word	0x20000ce4

080033f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80033fe:	2300      	movs	r3, #0
 8003400:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003402:	4b42      	ldr	r3, [pc, #264]	; (800350c <xTaskResumeAll+0x118>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <xTaskResumeAll+0x2c>
	__asm volatile
 800340a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	603b      	str	r3, [r7, #0]
}
 800341c:	bf00      	nop
 800341e:	e7fe      	b.n	800341e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003420:	f001 f918 	bl	8004654 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003424:	4b39      	ldr	r3, [pc, #228]	; (800350c <xTaskResumeAll+0x118>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3b01      	subs	r3, #1
 800342a:	4a38      	ldr	r2, [pc, #224]	; (800350c <xTaskResumeAll+0x118>)
 800342c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800342e:	4b37      	ldr	r3, [pc, #220]	; (800350c <xTaskResumeAll+0x118>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d162      	bne.n	80034fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003436:	4b36      	ldr	r3, [pc, #216]	; (8003510 <xTaskResumeAll+0x11c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d05e      	beq.n	80034fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800343e:	e02f      	b.n	80034a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003440:	4b34      	ldr	r3, [pc, #208]	; (8003514 <xTaskResumeAll+0x120>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	3318      	adds	r3, #24
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff f871 	bl	8002534 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	3304      	adds	r3, #4
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff f86c 	bl	8002534 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003460:	4b2d      	ldr	r3, [pc, #180]	; (8003518 <xTaskResumeAll+0x124>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d903      	bls.n	8003470 <xTaskResumeAll+0x7c>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	4a2a      	ldr	r2, [pc, #168]	; (8003518 <xTaskResumeAll+0x124>)
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4a27      	ldr	r2, [pc, #156]	; (800351c <xTaskResumeAll+0x128>)
 800347e:	441a      	add	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	3304      	adds	r3, #4
 8003484:	4619      	mov	r1, r3
 8003486:	4610      	mov	r0, r2
 8003488:	f7fe fff7 	bl	800247a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003490:	4b23      	ldr	r3, [pc, #140]	; (8003520 <xTaskResumeAll+0x12c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	429a      	cmp	r2, r3
 8003498:	d302      	bcc.n	80034a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800349a:	4b22      	ldr	r3, [pc, #136]	; (8003524 <xTaskResumeAll+0x130>)
 800349c:	2201      	movs	r2, #1
 800349e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034a0:	4b1c      	ldr	r3, [pc, #112]	; (8003514 <xTaskResumeAll+0x120>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1cb      	bne.n	8003440 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80034ae:	f000 fb55 	bl	8003b5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80034b2:	4b1d      	ldr	r3, [pc, #116]	; (8003528 <xTaskResumeAll+0x134>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d010      	beq.n	80034e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80034be:	f000 f847 	bl	8003550 <xTaskIncrementTick>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80034c8:	4b16      	ldr	r3, [pc, #88]	; (8003524 <xTaskResumeAll+0x130>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3b01      	subs	r3, #1
 80034d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f1      	bne.n	80034be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80034da:	4b13      	ldr	r3, [pc, #76]	; (8003528 <xTaskResumeAll+0x134>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80034e0:	4b10      	ldr	r3, [pc, #64]	; (8003524 <xTaskResumeAll+0x130>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d009      	beq.n	80034fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80034e8:	2301      	movs	r3, #1
 80034ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80034ec:	4b0f      	ldr	r3, [pc, #60]	; (800352c <xTaskResumeAll+0x138>)
 80034ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034fc:	f001 f8da 	bl	80046b4 <vPortExitCritical>

	return xAlreadyYielded;
 8003500:	68bb      	ldr	r3, [r7, #8]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000ce4 	.word	0x20000ce4
 8003510:	20000cbc 	.word	0x20000cbc
 8003514:	20000c7c 	.word	0x20000c7c
 8003518:	20000cc4 	.word	0x20000cc4
 800351c:	200007ec 	.word	0x200007ec
 8003520:	200007e8 	.word	0x200007e8
 8003524:	20000cd0 	.word	0x20000cd0
 8003528:	20000ccc 	.word	0x20000ccc
 800352c:	e000ed04 	.word	0xe000ed04

08003530 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003536:	4b05      	ldr	r3, [pc, #20]	; (800354c <xTaskGetTickCount+0x1c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800353c:	687b      	ldr	r3, [r7, #4]
}
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	20000cc0 	.word	0x20000cc0

08003550 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800355a:	4b4f      	ldr	r3, [pc, #316]	; (8003698 <xTaskIncrementTick+0x148>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	f040 808f 	bne.w	8003682 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003564:	4b4d      	ldr	r3, [pc, #308]	; (800369c <xTaskIncrementTick+0x14c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3301      	adds	r3, #1
 800356a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800356c:	4a4b      	ldr	r2, [pc, #300]	; (800369c <xTaskIncrementTick+0x14c>)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d120      	bne.n	80035ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003578:	4b49      	ldr	r3, [pc, #292]	; (80036a0 <xTaskIncrementTick+0x150>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <xTaskIncrementTick+0x48>
	__asm volatile
 8003582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003586:	f383 8811 	msr	BASEPRI, r3
 800358a:	f3bf 8f6f 	isb	sy
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	603b      	str	r3, [r7, #0]
}
 8003594:	bf00      	nop
 8003596:	e7fe      	b.n	8003596 <xTaskIncrementTick+0x46>
 8003598:	4b41      	ldr	r3, [pc, #260]	; (80036a0 <xTaskIncrementTick+0x150>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	4b41      	ldr	r3, [pc, #260]	; (80036a4 <xTaskIncrementTick+0x154>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a3f      	ldr	r2, [pc, #252]	; (80036a0 <xTaskIncrementTick+0x150>)
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	4a3f      	ldr	r2, [pc, #252]	; (80036a4 <xTaskIncrementTick+0x154>)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	4b3e      	ldr	r3, [pc, #248]	; (80036a8 <xTaskIncrementTick+0x158>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3301      	adds	r3, #1
 80035b2:	4a3d      	ldr	r2, [pc, #244]	; (80036a8 <xTaskIncrementTick+0x158>)
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	f000 fad1 	bl	8003b5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80035ba:	4b3c      	ldr	r3, [pc, #240]	; (80036ac <xTaskIncrementTick+0x15c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d349      	bcc.n	8003658 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035c4:	4b36      	ldr	r3, [pc, #216]	; (80036a0 <xTaskIncrementTick+0x150>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d104      	bne.n	80035d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035ce:	4b37      	ldr	r3, [pc, #220]	; (80036ac <xTaskIncrementTick+0x15c>)
 80035d0:	f04f 32ff 	mov.w	r2, #4294967295
 80035d4:	601a      	str	r2, [r3, #0]
					break;
 80035d6:	e03f      	b.n	8003658 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035d8:	4b31      	ldr	r3, [pc, #196]	; (80036a0 <xTaskIncrementTick+0x150>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d203      	bcs.n	80035f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80035f0:	4a2e      	ldr	r2, [pc, #184]	; (80036ac <xTaskIncrementTick+0x15c>)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80035f6:	e02f      	b.n	8003658 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	3304      	adds	r3, #4
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe ff99 	bl	8002534 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	2b00      	cmp	r3, #0
 8003608:	d004      	beq.n	8003614 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	3318      	adds	r3, #24
 800360e:	4618      	mov	r0, r3
 8003610:	f7fe ff90 	bl	8002534 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003618:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <xTaskIncrementTick+0x160>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d903      	bls.n	8003628 <xTaskIncrementTick+0xd8>
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	4a22      	ldr	r2, [pc, #136]	; (80036b0 <xTaskIncrementTick+0x160>)
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4a1f      	ldr	r2, [pc, #124]	; (80036b4 <xTaskIncrementTick+0x164>)
 8003636:	441a      	add	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	3304      	adds	r3, #4
 800363c:	4619      	mov	r1, r3
 800363e:	4610      	mov	r0, r2
 8003640:	f7fe ff1b 	bl	800247a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003648:	4b1b      	ldr	r3, [pc, #108]	; (80036b8 <xTaskIncrementTick+0x168>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	429a      	cmp	r2, r3
 8003650:	d3b8      	bcc.n	80035c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003652:	2301      	movs	r3, #1
 8003654:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003656:	e7b5      	b.n	80035c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003658:	4b17      	ldr	r3, [pc, #92]	; (80036b8 <xTaskIncrementTick+0x168>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365e:	4915      	ldr	r1, [pc, #84]	; (80036b4 <xTaskIncrementTick+0x164>)
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d901      	bls.n	8003674 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003670:	2301      	movs	r3, #1
 8003672:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003674:	4b11      	ldr	r3, [pc, #68]	; (80036bc <xTaskIncrementTick+0x16c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d007      	beq.n	800368c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800367c:	2301      	movs	r3, #1
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	e004      	b.n	800368c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003682:	4b0f      	ldr	r3, [pc, #60]	; (80036c0 <xTaskIncrementTick+0x170>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3301      	adds	r3, #1
 8003688:	4a0d      	ldr	r2, [pc, #52]	; (80036c0 <xTaskIncrementTick+0x170>)
 800368a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800368c:	697b      	ldr	r3, [r7, #20]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000ce4 	.word	0x20000ce4
 800369c:	20000cc0 	.word	0x20000cc0
 80036a0:	20000c74 	.word	0x20000c74
 80036a4:	20000c78 	.word	0x20000c78
 80036a8:	20000cd4 	.word	0x20000cd4
 80036ac:	20000cdc 	.word	0x20000cdc
 80036b0:	20000cc4 	.word	0x20000cc4
 80036b4:	200007ec 	.word	0x200007ec
 80036b8:	200007e8 	.word	0x200007e8
 80036bc:	20000cd0 	.word	0x20000cd0
 80036c0:	20000ccc 	.word	0x20000ccc

080036c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036ca:	4b28      	ldr	r3, [pc, #160]	; (800376c <vTaskSwitchContext+0xa8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80036d2:	4b27      	ldr	r3, [pc, #156]	; (8003770 <vTaskSwitchContext+0xac>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80036d8:	e041      	b.n	800375e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80036da:	4b25      	ldr	r3, [pc, #148]	; (8003770 <vTaskSwitchContext+0xac>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036e0:	4b24      	ldr	r3, [pc, #144]	; (8003774 <vTaskSwitchContext+0xb0>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	e010      	b.n	800370a <vTaskSwitchContext+0x46>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10a      	bne.n	8003704 <vTaskSwitchContext+0x40>
	__asm volatile
 80036ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f2:	f383 8811 	msr	BASEPRI, r3
 80036f6:	f3bf 8f6f 	isb	sy
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	607b      	str	r3, [r7, #4]
}
 8003700:	bf00      	nop
 8003702:	e7fe      	b.n	8003702 <vTaskSwitchContext+0x3e>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	3b01      	subs	r3, #1
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	491b      	ldr	r1, [pc, #108]	; (8003778 <vTaskSwitchContext+0xb4>)
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0e4      	beq.n	80036e8 <vTaskSwitchContext+0x24>
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4a13      	ldr	r2, [pc, #76]	; (8003778 <vTaskSwitchContext+0xb4>)
 800372a:	4413      	add	r3, r2
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	3308      	adds	r3, #8
 8003740:	429a      	cmp	r2, r3
 8003742:	d104      	bne.n	800374e <vTaskSwitchContext+0x8a>
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4a09      	ldr	r2, [pc, #36]	; (800377c <vTaskSwitchContext+0xb8>)
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	4a06      	ldr	r2, [pc, #24]	; (8003774 <vTaskSwitchContext+0xb0>)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6013      	str	r3, [r2, #0]
}
 800375e:	bf00      	nop
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	20000ce4 	.word	0x20000ce4
 8003770:	20000cd0 	.word	0x20000cd0
 8003774:	20000cc4 	.word	0x20000cc4
 8003778:	200007ec 	.word	0x200007ec
 800377c:	200007e8 	.word	0x200007e8

08003780 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10a      	bne.n	80037a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003794:	f383 8811 	msr	BASEPRI, r3
 8003798:	f3bf 8f6f 	isb	sy
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	60fb      	str	r3, [r7, #12]
}
 80037a2:	bf00      	nop
 80037a4:	e7fe      	b.n	80037a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037a6:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <vTaskPlaceOnEventList+0x44>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3318      	adds	r3, #24
 80037ac:	4619      	mov	r1, r3
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fe fe87 	bl	80024c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037b4:	2101      	movs	r1, #1
 80037b6:	6838      	ldr	r0, [r7, #0]
 80037b8:	f000 fa7c 	bl	8003cb4 <prvAddCurrentTaskToDelayedList>
}
 80037bc:	bf00      	nop
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	200007e8 	.word	0x200007e8

080037c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10a      	bne.n	80037f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80037da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037de:	f383 8811 	msr	BASEPRI, r3
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	617b      	str	r3, [r7, #20]
}
 80037ec:	bf00      	nop
 80037ee:	e7fe      	b.n	80037ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037f0:	4b0a      	ldr	r3, [pc, #40]	; (800381c <vTaskPlaceOnEventListRestricted+0x54>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3318      	adds	r3, #24
 80037f6:	4619      	mov	r1, r3
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f7fe fe3e 	bl	800247a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003804:	f04f 33ff 	mov.w	r3, #4294967295
 8003808:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	68b8      	ldr	r0, [r7, #8]
 800380e:	f000 fa51 	bl	8003cb4 <prvAddCurrentTaskToDelayedList>
	}
 8003812:	bf00      	nop
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	200007e8 	.word	0x200007e8

08003820 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10a      	bne.n	800384c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	60fb      	str	r3, [r7, #12]
}
 8003848:	bf00      	nop
 800384a:	e7fe      	b.n	800384a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	3318      	adds	r3, #24
 8003850:	4618      	mov	r0, r3
 8003852:	f7fe fe6f 	bl	8002534 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003856:	4b1e      	ldr	r3, [pc, #120]	; (80038d0 <xTaskRemoveFromEventList+0xb0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d11d      	bne.n	800389a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	3304      	adds	r3, #4
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe fe66 	bl	8002534 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386c:	4b19      	ldr	r3, [pc, #100]	; (80038d4 <xTaskRemoveFromEventList+0xb4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d903      	bls.n	800387c <xTaskRemoveFromEventList+0x5c>
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	4a16      	ldr	r2, [pc, #88]	; (80038d4 <xTaskRemoveFromEventList+0xb4>)
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4a13      	ldr	r2, [pc, #76]	; (80038d8 <xTaskRemoveFromEventList+0xb8>)
 800388a:	441a      	add	r2, r3
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	3304      	adds	r3, #4
 8003890:	4619      	mov	r1, r3
 8003892:	4610      	mov	r0, r2
 8003894:	f7fe fdf1 	bl	800247a <vListInsertEnd>
 8003898:	e005      	b.n	80038a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	3318      	adds	r3, #24
 800389e:	4619      	mov	r1, r3
 80038a0:	480e      	ldr	r0, [pc, #56]	; (80038dc <xTaskRemoveFromEventList+0xbc>)
 80038a2:	f7fe fdea 	bl	800247a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038aa:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <xTaskRemoveFromEventList+0xc0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d905      	bls.n	80038c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80038b4:	2301      	movs	r3, #1
 80038b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80038b8:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <xTaskRemoveFromEventList+0xc4>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	e001      	b.n	80038c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80038c4:	697b      	ldr	r3, [r7, #20]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20000ce4 	.word	0x20000ce4
 80038d4:	20000cc4 	.word	0x20000cc4
 80038d8:	200007ec 	.word	0x200007ec
 80038dc:	20000c7c 	.word	0x20000c7c
 80038e0:	200007e8 	.word	0x200007e8
 80038e4:	20000cd0 	.word	0x20000cd0

080038e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038f0:	4b06      	ldr	r3, [pc, #24]	; (800390c <vTaskInternalSetTimeOutState+0x24>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <vTaskInternalSetTimeOutState+0x28>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	605a      	str	r2, [r3, #4]
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	20000cd4 	.word	0x20000cd4
 8003910:	20000cc0 	.word	0x20000cc0

08003914 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10a      	bne.n	800393a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	613b      	str	r3, [r7, #16]
}
 8003936:	bf00      	nop
 8003938:	e7fe      	b.n	8003938 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10a      	bne.n	8003956 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	60fb      	str	r3, [r7, #12]
}
 8003952:	bf00      	nop
 8003954:	e7fe      	b.n	8003954 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003956:	f000 fe7d 	bl	8004654 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800395a:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <xTaskCheckForTimeOut+0xbc>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003972:	d102      	bne.n	800397a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003974:	2300      	movs	r3, #0
 8003976:	61fb      	str	r3, [r7, #28]
 8003978:	e023      	b.n	80039c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	4b15      	ldr	r3, [pc, #84]	; (80039d4 <xTaskCheckForTimeOut+0xc0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d007      	beq.n	8003996 <xTaskCheckForTimeOut+0x82>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	429a      	cmp	r2, r3
 800398e:	d302      	bcc.n	8003996 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003990:	2301      	movs	r3, #1
 8003992:	61fb      	str	r3, [r7, #28]
 8003994:	e015      	b.n	80039c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	429a      	cmp	r2, r3
 800399e:	d20b      	bcs.n	80039b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	1ad2      	subs	r2, r2, r3
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff ff9b 	bl	80038e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
 80039b6:	e004      	b.n	80039c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80039be:	2301      	movs	r3, #1
 80039c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80039c2:	f000 fe77 	bl	80046b4 <vPortExitCritical>

	return xReturn;
 80039c6:	69fb      	ldr	r3, [r7, #28]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3720      	adds	r7, #32
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	20000cc0 	.word	0x20000cc0
 80039d4:	20000cd4 	.word	0x20000cd4

080039d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80039dc:	4b03      	ldr	r3, [pc, #12]	; (80039ec <vTaskMissedYield+0x14>)
 80039de:	2201      	movs	r2, #1
 80039e0:	601a      	str	r2, [r3, #0]
}
 80039e2:	bf00      	nop
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	20000cd0 	.word	0x20000cd0

080039f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80039f8:	f000 f852 	bl	8003aa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <prvIdleTask+0x28>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d9f9      	bls.n	80039f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a04:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <prvIdleTask+0x2c>)
 8003a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a14:	e7f0      	b.n	80039f8 <prvIdleTask+0x8>
 8003a16:	bf00      	nop
 8003a18:	200007ec 	.word	0x200007ec
 8003a1c:	e000ed04 	.word	0xe000ed04

08003a20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a26:	2300      	movs	r3, #0
 8003a28:	607b      	str	r3, [r7, #4]
 8003a2a:	e00c      	b.n	8003a46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4a12      	ldr	r2, [pc, #72]	; (8003a80 <prvInitialiseTaskLists+0x60>)
 8003a38:	4413      	add	r3, r2
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe fcf0 	bl	8002420 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3301      	adds	r3, #1
 8003a44:	607b      	str	r3, [r7, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b37      	cmp	r3, #55	; 0x37
 8003a4a:	d9ef      	bls.n	8003a2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a4c:	480d      	ldr	r0, [pc, #52]	; (8003a84 <prvInitialiseTaskLists+0x64>)
 8003a4e:	f7fe fce7 	bl	8002420 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a52:	480d      	ldr	r0, [pc, #52]	; (8003a88 <prvInitialiseTaskLists+0x68>)
 8003a54:	f7fe fce4 	bl	8002420 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a58:	480c      	ldr	r0, [pc, #48]	; (8003a8c <prvInitialiseTaskLists+0x6c>)
 8003a5a:	f7fe fce1 	bl	8002420 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a5e:	480c      	ldr	r0, [pc, #48]	; (8003a90 <prvInitialiseTaskLists+0x70>)
 8003a60:	f7fe fcde 	bl	8002420 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a64:	480b      	ldr	r0, [pc, #44]	; (8003a94 <prvInitialiseTaskLists+0x74>)
 8003a66:	f7fe fcdb 	bl	8002420 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <prvInitialiseTaskLists+0x78>)
 8003a6c:	4a05      	ldr	r2, [pc, #20]	; (8003a84 <prvInitialiseTaskLists+0x64>)
 8003a6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a70:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <prvInitialiseTaskLists+0x7c>)
 8003a72:	4a05      	ldr	r2, [pc, #20]	; (8003a88 <prvInitialiseTaskLists+0x68>)
 8003a74:	601a      	str	r2, [r3, #0]
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	200007ec 	.word	0x200007ec
 8003a84:	20000c4c 	.word	0x20000c4c
 8003a88:	20000c60 	.word	0x20000c60
 8003a8c:	20000c7c 	.word	0x20000c7c
 8003a90:	20000c90 	.word	0x20000c90
 8003a94:	20000ca8 	.word	0x20000ca8
 8003a98:	20000c74 	.word	0x20000c74
 8003a9c:	20000c78 	.word	0x20000c78

08003aa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003aa6:	e019      	b.n	8003adc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003aa8:	f000 fdd4 	bl	8004654 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aac:	4b10      	ldr	r3, [pc, #64]	; (8003af0 <prvCheckTasksWaitingTermination+0x50>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fe fd3b 	bl	8002534 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003abe:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <prvCheckTasksWaitingTermination+0x54>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	4a0b      	ldr	r2, [pc, #44]	; (8003af4 <prvCheckTasksWaitingTermination+0x54>)
 8003ac6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <prvCheckTasksWaitingTermination+0x58>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	3b01      	subs	r3, #1
 8003ace:	4a0a      	ldr	r2, [pc, #40]	; (8003af8 <prvCheckTasksWaitingTermination+0x58>)
 8003ad0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ad2:	f000 fdef 	bl	80046b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f810 	bl	8003afc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003adc:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <prvCheckTasksWaitingTermination+0x58>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1e1      	bne.n	8003aa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000c90 	.word	0x20000c90
 8003af4:	20000cbc 	.word	0x20000cbc
 8003af8:	20000ca4 	.word	0x20000ca4

08003afc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d108      	bne.n	8003b20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 ff8c 	bl	8004a30 <vPortFree>
				vPortFree( pxTCB );
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 ff89 	bl	8004a30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b1e:	e018      	b.n	8003b52 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d103      	bne.n	8003b32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 ff80 	bl	8004a30 <vPortFree>
	}
 8003b30:	e00f      	b.n	8003b52 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d00a      	beq.n	8003b52 <prvDeleteTCB+0x56>
	__asm volatile
 8003b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	60fb      	str	r3, [r7, #12]
}
 8003b4e:	bf00      	nop
 8003b50:	e7fe      	b.n	8003b50 <prvDeleteTCB+0x54>
	}
 8003b52:	bf00      	nop
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b62:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <prvResetNextTaskUnblockTime+0x38>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d104      	bne.n	8003b76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <prvResetNextTaskUnblockTime+0x3c>)
 8003b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b74:	e008      	b.n	8003b88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b76:	4b07      	ldr	r3, [pc, #28]	; (8003b94 <prvResetNextTaskUnblockTime+0x38>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	4a04      	ldr	r2, [pc, #16]	; (8003b98 <prvResetNextTaskUnblockTime+0x3c>)
 8003b86:	6013      	str	r3, [r2, #0]
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	20000c74 	.word	0x20000c74
 8003b98:	20000cdc 	.word	0x20000cdc

08003b9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ba2:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <xTaskGetSchedulerState+0x34>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d102      	bne.n	8003bb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003baa:	2301      	movs	r3, #1
 8003bac:	607b      	str	r3, [r7, #4]
 8003bae:	e008      	b.n	8003bc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bb0:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <xTaskGetSchedulerState+0x38>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d102      	bne.n	8003bbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	607b      	str	r3, [r7, #4]
 8003bbc:	e001      	b.n	8003bc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003bc2:	687b      	ldr	r3, [r7, #4]
	}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	20000cc8 	.word	0x20000cc8
 8003bd4:	20000ce4 	.word	0x20000ce4

08003bd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003be4:	2300      	movs	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d056      	beq.n	8003c9c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003bee:	4b2e      	ldr	r3, [pc, #184]	; (8003ca8 <xTaskPriorityDisinherit+0xd0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d00a      	beq.n	8003c0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	60fb      	str	r3, [r7, #12]
}
 8003c0a:	bf00      	nop
 8003c0c:	e7fe      	b.n	8003c0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10a      	bne.n	8003c2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	60bb      	str	r3, [r7, #8]
}
 8003c28:	bf00      	nop
 8003c2a:	e7fe      	b.n	8003c2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c30:	1e5a      	subs	r2, r3, #1
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d02c      	beq.n	8003c9c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d128      	bne.n	8003c9c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe fc70 	bl	8002534 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <xTaskPriorityDisinherit+0xd4>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d903      	bls.n	8003c7c <xTaskPriorityDisinherit+0xa4>
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	4a0c      	ldr	r2, [pc, #48]	; (8003cac <xTaskPriorityDisinherit+0xd4>)
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4a09      	ldr	r2, [pc, #36]	; (8003cb0 <xTaskPriorityDisinherit+0xd8>)
 8003c8a:	441a      	add	r2, r3
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	4619      	mov	r1, r3
 8003c92:	4610      	mov	r0, r2
 8003c94:	f7fe fbf1 	bl	800247a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c9c:	697b      	ldr	r3, [r7, #20]
	}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	200007e8 	.word	0x200007e8
 8003cac:	20000cc4 	.word	0x20000cc4
 8003cb0:	200007ec 	.word	0x200007ec

08003cb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003cbe:	4b21      	ldr	r3, [pc, #132]	; (8003d44 <prvAddCurrentTaskToDelayedList+0x90>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cc4:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fe fc32 	bl	8002534 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd6:	d10a      	bne.n	8003cee <prvAddCurrentTaskToDelayedList+0x3a>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cde:	4b1a      	ldr	r3, [pc, #104]	; (8003d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4819      	ldr	r0, [pc, #100]	; (8003d4c <prvAddCurrentTaskToDelayedList+0x98>)
 8003ce8:	f7fe fbc7 	bl	800247a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003cec:	e026      	b.n	8003d3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cf6:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d209      	bcs.n	8003d1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d06:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	4619      	mov	r1, r3
 8003d12:	4610      	mov	r0, r2
 8003d14:	f7fe fbd5 	bl	80024c2 <vListInsert>
}
 8003d18:	e010      	b.n	8003d3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d1a:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	3304      	adds	r3, #4
 8003d24:	4619      	mov	r1, r3
 8003d26:	4610      	mov	r0, r2
 8003d28:	f7fe fbcb 	bl	80024c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d202      	bcs.n	8003d3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003d36:	4a08      	ldr	r2, [pc, #32]	; (8003d58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	6013      	str	r3, [r2, #0]
}
 8003d3c:	bf00      	nop
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	20000cc0 	.word	0x20000cc0
 8003d48:	200007e8 	.word	0x200007e8
 8003d4c:	20000ca8 	.word	0x20000ca8
 8003d50:	20000c78 	.word	0x20000c78
 8003d54:	20000c74 	.word	0x20000c74
 8003d58:	20000cdc 	.word	0x20000cdc

08003d5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08a      	sub	sp, #40	; 0x28
 8003d60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003d66:	f000 fb07 	bl	8004378 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003d6a:	4b1c      	ldr	r3, [pc, #112]	; (8003ddc <xTimerCreateTimerTask+0x80>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d021      	beq.n	8003db6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003d7a:	1d3a      	adds	r2, r7, #4
 8003d7c:	f107 0108 	add.w	r1, r7, #8
 8003d80:	f107 030c 	add.w	r3, r7, #12
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fe fb31 	bl	80023ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	9202      	str	r2, [sp, #8]
 8003d92:	9301      	str	r3, [sp, #4]
 8003d94:	2302      	movs	r3, #2
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	2300      	movs	r3, #0
 8003d9a:	460a      	mov	r2, r1
 8003d9c:	4910      	ldr	r1, [pc, #64]	; (8003de0 <xTimerCreateTimerTask+0x84>)
 8003d9e:	4811      	ldr	r0, [pc, #68]	; (8003de4 <xTimerCreateTimerTask+0x88>)
 8003da0:	f7ff f8de 	bl	8002f60 <xTaskCreateStatic>
 8003da4:	4603      	mov	r3, r0
 8003da6:	4a10      	ldr	r2, [pc, #64]	; (8003de8 <xTimerCreateTimerTask+0x8c>)
 8003da8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003daa:	4b0f      	ldr	r3, [pc, #60]	; (8003de8 <xTimerCreateTimerTask+0x8c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003db2:	2301      	movs	r3, #1
 8003db4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10a      	bne.n	8003dd2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc0:	f383 8811 	msr	BASEPRI, r3
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	613b      	str	r3, [r7, #16]
}
 8003dce:	bf00      	nop
 8003dd0:	e7fe      	b.n	8003dd0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003dd2:	697b      	ldr	r3, [r7, #20]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	20000d18 	.word	0x20000d18
 8003de0:	08005644 	.word	0x08005644
 8003de4:	08003f21 	.word	0x08003f21
 8003de8:	20000d1c 	.word	0x20000d1c

08003dec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08a      	sub	sp, #40	; 0x28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10a      	bne.n	8003e1a <xTimerGenericCommand+0x2e>
	__asm volatile
 8003e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	623b      	str	r3, [r7, #32]
}
 8003e16:	bf00      	nop
 8003e18:	e7fe      	b.n	8003e18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003e1a:	4b1a      	ldr	r3, [pc, #104]	; (8003e84 <xTimerGenericCommand+0x98>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d02a      	beq.n	8003e78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2b05      	cmp	r3, #5
 8003e32:	dc18      	bgt.n	8003e66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003e34:	f7ff feb2 	bl	8003b9c <xTaskGetSchedulerState>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d109      	bne.n	8003e52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003e3e:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <xTimerGenericCommand+0x98>)
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	f107 0110 	add.w	r1, r7, #16
 8003e46:	2300      	movs	r3, #0
 8003e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e4a:	f7fe fca1 	bl	8002790 <xQueueGenericSend>
 8003e4e:	6278      	str	r0, [r7, #36]	; 0x24
 8003e50:	e012      	b.n	8003e78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003e52:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <xTimerGenericCommand+0x98>)
 8003e54:	6818      	ldr	r0, [r3, #0]
 8003e56:	f107 0110 	add.w	r1, r7, #16
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f7fe fc97 	bl	8002790 <xQueueGenericSend>
 8003e62:	6278      	str	r0, [r7, #36]	; 0x24
 8003e64:	e008      	b.n	8003e78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003e66:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <xTimerGenericCommand+0x98>)
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	f107 0110 	add.w	r1, r7, #16
 8003e6e:	2300      	movs	r3, #0
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	f7fe fd8b 	bl	800298c <xQueueGenericSendFromISR>
 8003e76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3728      	adds	r7, #40	; 0x28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20000d18 	.word	0x20000d18

08003e88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e92:	4b22      	ldr	r3, [pc, #136]	; (8003f1c <prvProcessExpiredTimer+0x94>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fe fb47 	bl	8002534 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d022      	beq.n	8003efa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	699a      	ldr	r2, [r3, #24]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	18d1      	adds	r1, r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	6978      	ldr	r0, [r7, #20]
 8003ec2:	f000 f8d1 	bl	8004068 <prvInsertTimerInActiveList>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01f      	beq.n	8003f0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ecc:	2300      	movs	r3, #0
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	6978      	ldr	r0, [r7, #20]
 8003ed8:	f7ff ff88 	bl	8003dec <xTimerGenericCommand>
 8003edc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d113      	bne.n	8003f0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	60fb      	str	r3, [r7, #12]
}
 8003ef6:	bf00      	nop
 8003ef8:	e7fe      	b.n	8003ef8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f00:	f023 0301 	bic.w	r3, r3, #1
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	6978      	ldr	r0, [r7, #20]
 8003f12:	4798      	blx	r3
}
 8003f14:	bf00      	nop
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20000d10 	.word	0x20000d10

08003f20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f28:	f107 0308 	add.w	r3, r7, #8
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 f857 	bl	8003fe0 <prvGetNextExpireTime>
 8003f32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	4619      	mov	r1, r3
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 f803 	bl	8003f44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003f3e:	f000 f8d5 	bl	80040ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f42:	e7f1      	b.n	8003f28 <prvTimerTask+0x8>

08003f44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003f4e:	f7ff fa43 	bl	80033d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f52:	f107 0308 	add.w	r3, r7, #8
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 f866 	bl	8004028 <prvSampleTimeNow>
 8003f5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d130      	bne.n	8003fc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10a      	bne.n	8003f80 <prvProcessTimerOrBlockTask+0x3c>
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d806      	bhi.n	8003f80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003f72:	f7ff fa3f 	bl	80033f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f76:	68f9      	ldr	r1, [r7, #12]
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff ff85 	bl	8003e88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003f7e:	e024      	b.n	8003fca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d008      	beq.n	8003f98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f86:	4b13      	ldr	r3, [pc, #76]	; (8003fd4 <prvProcessTimerOrBlockTask+0x90>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <prvProcessTimerOrBlockTask+0x50>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <prvProcessTimerOrBlockTask+0x52>
 8003f94:	2300      	movs	r3, #0
 8003f96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f98:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <prvProcessTimerOrBlockTask+0x94>)
 8003f9a:	6818      	ldr	r0, [r3, #0]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	f7fe ffa7 	bl	8002ef8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003faa:	f7ff fa23 	bl	80033f4 <xTaskResumeAll>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003fb4:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <prvProcessTimerOrBlockTask+0x98>)
 8003fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	f3bf 8f6f 	isb	sy
}
 8003fc4:	e001      	b.n	8003fca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003fc6:	f7ff fa15 	bl	80033f4 <xTaskResumeAll>
}
 8003fca:	bf00      	nop
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20000d14 	.word	0x20000d14
 8003fd8:	20000d18 	.word	0x20000d18
 8003fdc:	e000ed04 	.word	0xe000ed04

08003fe0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003fe8:	4b0e      	ldr	r3, [pc, #56]	; (8004024 <prvGetNextExpireTime+0x44>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <prvGetNextExpireTime+0x16>
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	e000      	b.n	8003ff8 <prvGetNextExpireTime+0x18>
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d105      	bne.n	8004010 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004004:	4b07      	ldr	r3, [pc, #28]	; (8004024 <prvGetNextExpireTime+0x44>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	e001      	b.n	8004014 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004014:	68fb      	ldr	r3, [r7, #12]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	20000d10 	.word	0x20000d10

08004028 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004030:	f7ff fa7e 	bl	8003530 <xTaskGetTickCount>
 8004034:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004036:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <prvSampleTimeNow+0x3c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	429a      	cmp	r2, r3
 800403e:	d205      	bcs.n	800404c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004040:	f000 f936 	bl	80042b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	e002      	b.n	8004052 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004052:	4a04      	ldr	r2, [pc, #16]	; (8004064 <prvSampleTimeNow+0x3c>)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004058:	68fb      	ldr	r3, [r7, #12]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000d20 	.word	0x20000d20

08004068 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004076:	2300      	movs	r3, #0
 8004078:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	429a      	cmp	r2, r3
 800408c:	d812      	bhi.n	80040b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	1ad2      	subs	r2, r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	429a      	cmp	r2, r3
 800409a:	d302      	bcc.n	80040a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800409c:	2301      	movs	r3, #1
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	e01b      	b.n	80040da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80040a2:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <prvInsertTimerInActiveList+0x7c>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3304      	adds	r3, #4
 80040aa:	4619      	mov	r1, r3
 80040ac:	4610      	mov	r0, r2
 80040ae:	f7fe fa08 	bl	80024c2 <vListInsert>
 80040b2:	e012      	b.n	80040da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d206      	bcs.n	80040ca <prvInsertTimerInActiveList+0x62>
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d302      	bcc.n	80040ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80040c4:	2301      	movs	r3, #1
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	e007      	b.n	80040da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040ca:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <prvInsertTimerInActiveList+0x80>)
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	3304      	adds	r3, #4
 80040d2:	4619      	mov	r1, r3
 80040d4:	4610      	mov	r0, r2
 80040d6:	f7fe f9f4 	bl	80024c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80040da:	697b      	ldr	r3, [r7, #20]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	20000d14 	.word	0x20000d14
 80040e8:	20000d10 	.word	0x20000d10

080040ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08e      	sub	sp, #56	; 0x38
 80040f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040f2:	e0ca      	b.n	800428a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	da18      	bge.n	800412c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80040fa:	1d3b      	adds	r3, r7, #4
 80040fc:	3304      	adds	r3, #4
 80040fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	61fb      	str	r3, [r7, #28]
}
 8004118:	bf00      	nop
 800411a:	e7fe      	b.n	800411a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800411c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004122:	6850      	ldr	r0, [r2, #4]
 8004124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004126:	6892      	ldr	r2, [r2, #8]
 8004128:	4611      	mov	r1, r2
 800412a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	f2c0 80ab 	blt.w	800428a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d004      	beq.n	800414a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	3304      	adds	r3, #4
 8004144:	4618      	mov	r0, r3
 8004146:	f7fe f9f5 	bl	8002534 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800414a:	463b      	mov	r3, r7
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff ff6b 	bl	8004028 <prvSampleTimeNow>
 8004152:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b09      	cmp	r3, #9
 8004158:	f200 8096 	bhi.w	8004288 <prvProcessReceivedCommands+0x19c>
 800415c:	a201      	add	r2, pc, #4	; (adr r2, 8004164 <prvProcessReceivedCommands+0x78>)
 800415e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004162:	bf00      	nop
 8004164:	0800418d 	.word	0x0800418d
 8004168:	0800418d 	.word	0x0800418d
 800416c:	0800418d 	.word	0x0800418d
 8004170:	08004201 	.word	0x08004201
 8004174:	08004215 	.word	0x08004215
 8004178:	0800425f 	.word	0x0800425f
 800417c:	0800418d 	.word	0x0800418d
 8004180:	0800418d 	.word	0x0800418d
 8004184:	08004201 	.word	0x08004201
 8004188:	08004215 	.word	0x08004215
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800418c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	b2da      	uxtb	r2, r3
 8004198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	18d1      	adds	r1, r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041ac:	f7ff ff5c 	bl	8004068 <prvInsertTimerInActiveList>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d069      	beq.n	800428a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d05e      	beq.n	800428a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	441a      	add	r2, r3
 80041d4:	2300      	movs	r3, #0
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	2300      	movs	r3, #0
 80041da:	2100      	movs	r1, #0
 80041dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041de:	f7ff fe05 	bl	8003dec <xTimerGenericCommand>
 80041e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d14f      	bne.n	800428a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80041ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ee:	f383 8811 	msr	BASEPRI, r3
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	61bb      	str	r3, [r7, #24]
}
 80041fc:	bf00      	nop
 80041fe:	e7fe      	b.n	80041fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004202:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004206:	f023 0301 	bic.w	r3, r3, #1
 800420a:	b2da      	uxtb	r2, r3
 800420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004212:	e03a      	b.n	800428a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004216:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800421a:	f043 0301 	orr.w	r3, r3, #1
 800421e:	b2da      	uxtb	r2, r3
 8004220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004222:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10a      	bne.n	800424a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	617b      	str	r3, [r7, #20]
}
 8004246:	bf00      	nop
 8004248:	e7fe      	b.n	8004248 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800424a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	18d1      	adds	r1, r2, r3
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004258:	f7ff ff06 	bl	8004068 <prvInsertTimerInActiveList>
					break;
 800425c:	e015      	b.n	800428a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d103      	bne.n	8004274 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800426c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800426e:	f000 fbdf 	bl	8004a30 <vPortFree>
 8004272:	e00a      	b.n	800428a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004276:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800427a:	f023 0301 	bic.w	r3, r3, #1
 800427e:	b2da      	uxtb	r2, r3
 8004280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004282:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004286:	e000      	b.n	800428a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004288:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800428a:	4b08      	ldr	r3, [pc, #32]	; (80042ac <prvProcessReceivedCommands+0x1c0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	1d39      	adds	r1, r7, #4
 8004290:	2200      	movs	r2, #0
 8004292:	4618      	mov	r0, r3
 8004294:	f7fe fc16 	bl	8002ac4 <xQueueReceive>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	f47f af2a 	bne.w	80040f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80042a0:	bf00      	nop
 80042a2:	bf00      	nop
 80042a4:	3730      	adds	r7, #48	; 0x30
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000d18 	.word	0x20000d18

080042b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042b6:	e048      	b.n	800434a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042b8:	4b2d      	ldr	r3, [pc, #180]	; (8004370 <prvSwitchTimerLists+0xc0>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042c2:	4b2b      	ldr	r3, [pc, #172]	; (8004370 <prvSwitchTimerLists+0xc0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	3304      	adds	r3, #4
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fe f92f 	bl	8002534 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d02e      	beq.n	800434a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	4413      	add	r3, r2
 80042f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d90e      	bls.n	800431c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800430a:	4b19      	ldr	r3, [pc, #100]	; (8004370 <prvSwitchTimerLists+0xc0>)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3304      	adds	r3, #4
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	f7fe f8d4 	bl	80024c2 <vListInsert>
 800431a:	e016      	b.n	800434a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800431c:	2300      	movs	r3, #0
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	2300      	movs	r3, #0
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	2100      	movs	r1, #0
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f7ff fd60 	bl	8003dec <xTimerGenericCommand>
 800432c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10a      	bne.n	800434a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	603b      	str	r3, [r7, #0]
}
 8004346:	bf00      	nop
 8004348:	e7fe      	b.n	8004348 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800434a:	4b09      	ldr	r3, [pc, #36]	; (8004370 <prvSwitchTimerLists+0xc0>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1b1      	bne.n	80042b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004354:	4b06      	ldr	r3, [pc, #24]	; (8004370 <prvSwitchTimerLists+0xc0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800435a:	4b06      	ldr	r3, [pc, #24]	; (8004374 <prvSwitchTimerLists+0xc4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a04      	ldr	r2, [pc, #16]	; (8004370 <prvSwitchTimerLists+0xc0>)
 8004360:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004362:	4a04      	ldr	r2, [pc, #16]	; (8004374 <prvSwitchTimerLists+0xc4>)
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	6013      	str	r3, [r2, #0]
}
 8004368:	bf00      	nop
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20000d10 	.word	0x20000d10
 8004374:	20000d14 	.word	0x20000d14

08004378 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800437e:	f000 f969 	bl	8004654 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004382:	4b15      	ldr	r3, [pc, #84]	; (80043d8 <prvCheckForValidListAndQueue+0x60>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d120      	bne.n	80043cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800438a:	4814      	ldr	r0, [pc, #80]	; (80043dc <prvCheckForValidListAndQueue+0x64>)
 800438c:	f7fe f848 	bl	8002420 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004390:	4813      	ldr	r0, [pc, #76]	; (80043e0 <prvCheckForValidListAndQueue+0x68>)
 8004392:	f7fe f845 	bl	8002420 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004396:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <prvCheckForValidListAndQueue+0x6c>)
 8004398:	4a10      	ldr	r2, [pc, #64]	; (80043dc <prvCheckForValidListAndQueue+0x64>)
 800439a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800439c:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <prvCheckForValidListAndQueue+0x70>)
 800439e:	4a10      	ldr	r2, [pc, #64]	; (80043e0 <prvCheckForValidListAndQueue+0x68>)
 80043a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80043a2:	2300      	movs	r3, #0
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	4b11      	ldr	r3, [pc, #68]	; (80043ec <prvCheckForValidListAndQueue+0x74>)
 80043a8:	4a11      	ldr	r2, [pc, #68]	; (80043f0 <prvCheckForValidListAndQueue+0x78>)
 80043aa:	2110      	movs	r1, #16
 80043ac:	200a      	movs	r0, #10
 80043ae:	f7fe f953 	bl	8002658 <xQueueGenericCreateStatic>
 80043b2:	4603      	mov	r3, r0
 80043b4:	4a08      	ldr	r2, [pc, #32]	; (80043d8 <prvCheckForValidListAndQueue+0x60>)
 80043b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80043b8:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <prvCheckForValidListAndQueue+0x60>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80043c0:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <prvCheckForValidListAndQueue+0x60>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	490b      	ldr	r1, [pc, #44]	; (80043f4 <prvCheckForValidListAndQueue+0x7c>)
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fe fd6c 	bl	8002ea4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043cc:	f000 f972 	bl	80046b4 <vPortExitCritical>
}
 80043d0:	bf00      	nop
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20000d18 	.word	0x20000d18
 80043dc:	20000ce8 	.word	0x20000ce8
 80043e0:	20000cfc 	.word	0x20000cfc
 80043e4:	20000d10 	.word	0x20000d10
 80043e8:	20000d14 	.word	0x20000d14
 80043ec:	20000dc4 	.word	0x20000dc4
 80043f0:	20000d24 	.word	0x20000d24
 80043f4:	0800564c 	.word	0x0800564c

080043f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	3b04      	subs	r3, #4
 8004408:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004410:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3b04      	subs	r3, #4
 8004416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f023 0201 	bic.w	r2, r3, #1
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3b04      	subs	r3, #4
 8004426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004428:	4a0c      	ldr	r2, [pc, #48]	; (800445c <pxPortInitialiseStack+0x64>)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3b14      	subs	r3, #20
 8004432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	3b04      	subs	r3, #4
 800443e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f06f 0202 	mvn.w	r2, #2
 8004446:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	3b20      	subs	r3, #32
 800444c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800444e:	68fb      	ldr	r3, [r7, #12]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	08004461 	.word	0x08004461

08004460 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004466:	2300      	movs	r3, #0
 8004468:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800446a:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <prvTaskExitError+0x54>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004472:	d00a      	beq.n	800448a <prvTaskExitError+0x2a>
	__asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	60fb      	str	r3, [r7, #12]
}
 8004486:	bf00      	nop
 8004488:	e7fe      	b.n	8004488 <prvTaskExitError+0x28>
	__asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	60bb      	str	r3, [r7, #8]
}
 800449c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800449e:	bf00      	nop
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0fc      	beq.n	80044a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80044a6:	bf00      	nop
 80044a8:	bf00      	nop
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	2000000c 	.word	0x2000000c
	...

080044c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80044c0:	4b07      	ldr	r3, [pc, #28]	; (80044e0 <pxCurrentTCBConst2>)
 80044c2:	6819      	ldr	r1, [r3, #0]
 80044c4:	6808      	ldr	r0, [r1, #0]
 80044c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ca:	f380 8809 	msr	PSP, r0
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f04f 0000 	mov.w	r0, #0
 80044d6:	f380 8811 	msr	BASEPRI, r0
 80044da:	4770      	bx	lr
 80044dc:	f3af 8000 	nop.w

080044e0 <pxCurrentTCBConst2>:
 80044e0:	200007e8 	.word	0x200007e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop

080044e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80044e8:	4808      	ldr	r0, [pc, #32]	; (800450c <prvPortStartFirstTask+0x24>)
 80044ea:	6800      	ldr	r0, [r0, #0]
 80044ec:	6800      	ldr	r0, [r0, #0]
 80044ee:	f380 8808 	msr	MSP, r0
 80044f2:	f04f 0000 	mov.w	r0, #0
 80044f6:	f380 8814 	msr	CONTROL, r0
 80044fa:	b662      	cpsie	i
 80044fc:	b661      	cpsie	f
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	df00      	svc	0
 8004508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800450a:	bf00      	nop
 800450c:	e000ed08 	.word	0xe000ed08

08004510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004516:	4b46      	ldr	r3, [pc, #280]	; (8004630 <xPortStartScheduler+0x120>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a46      	ldr	r2, [pc, #280]	; (8004634 <xPortStartScheduler+0x124>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d10a      	bne.n	8004536 <xPortStartScheduler+0x26>
	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	613b      	str	r3, [r7, #16]
}
 8004532:	bf00      	nop
 8004534:	e7fe      	b.n	8004534 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004536:	4b3e      	ldr	r3, [pc, #248]	; (8004630 <xPortStartScheduler+0x120>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a3f      	ldr	r2, [pc, #252]	; (8004638 <xPortStartScheduler+0x128>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d10a      	bne.n	8004556 <xPortStartScheduler+0x46>
	__asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	60fb      	str	r3, [r7, #12]
}
 8004552:	bf00      	nop
 8004554:	e7fe      	b.n	8004554 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004556:	4b39      	ldr	r3, [pc, #228]	; (800463c <xPortStartScheduler+0x12c>)
 8004558:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	22ff      	movs	r2, #255	; 0xff
 8004566:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004578:	b2da      	uxtb	r2, r3
 800457a:	4b31      	ldr	r3, [pc, #196]	; (8004640 <xPortStartScheduler+0x130>)
 800457c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800457e:	4b31      	ldr	r3, [pc, #196]	; (8004644 <xPortStartScheduler+0x134>)
 8004580:	2207      	movs	r2, #7
 8004582:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004584:	e009      	b.n	800459a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004586:	4b2f      	ldr	r3, [pc, #188]	; (8004644 <xPortStartScheduler+0x134>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3b01      	subs	r3, #1
 800458c:	4a2d      	ldr	r2, [pc, #180]	; (8004644 <xPortStartScheduler+0x134>)
 800458e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	b2db      	uxtb	r3, r3
 8004598:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800459a:	78fb      	ldrb	r3, [r7, #3]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a2:	2b80      	cmp	r3, #128	; 0x80
 80045a4:	d0ef      	beq.n	8004586 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045a6:	4b27      	ldr	r3, [pc, #156]	; (8004644 <xPortStartScheduler+0x134>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f1c3 0307 	rsb	r3, r3, #7
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d00a      	beq.n	80045c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	60bb      	str	r3, [r7, #8]
}
 80045c4:	bf00      	nop
 80045c6:	e7fe      	b.n	80045c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045c8:	4b1e      	ldr	r3, [pc, #120]	; (8004644 <xPortStartScheduler+0x134>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	021b      	lsls	r3, r3, #8
 80045ce:	4a1d      	ldr	r2, [pc, #116]	; (8004644 <xPortStartScheduler+0x134>)
 80045d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045d2:	4b1c      	ldr	r3, [pc, #112]	; (8004644 <xPortStartScheduler+0x134>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045da:	4a1a      	ldr	r2, [pc, #104]	; (8004644 <xPortStartScheduler+0x134>)
 80045dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80045e6:	4b18      	ldr	r3, [pc, #96]	; (8004648 <xPortStartScheduler+0x138>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a17      	ldr	r2, [pc, #92]	; (8004648 <xPortStartScheduler+0x138>)
 80045ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80045f2:	4b15      	ldr	r3, [pc, #84]	; (8004648 <xPortStartScheduler+0x138>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a14      	ldr	r2, [pc, #80]	; (8004648 <xPortStartScheduler+0x138>)
 80045f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80045fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80045fe:	f000 f8dd 	bl	80047bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004602:	4b12      	ldr	r3, [pc, #72]	; (800464c <xPortStartScheduler+0x13c>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004608:	f000 f8fc 	bl	8004804 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800460c:	4b10      	ldr	r3, [pc, #64]	; (8004650 <xPortStartScheduler+0x140>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a0f      	ldr	r2, [pc, #60]	; (8004650 <xPortStartScheduler+0x140>)
 8004612:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004616:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004618:	f7ff ff66 	bl	80044e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800461c:	f7ff f852 	bl	80036c4 <vTaskSwitchContext>
	prvTaskExitError();
 8004620:	f7ff ff1e 	bl	8004460 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	e000ed00 	.word	0xe000ed00
 8004634:	410fc271 	.word	0x410fc271
 8004638:	410fc270 	.word	0x410fc270
 800463c:	e000e400 	.word	0xe000e400
 8004640:	20000e14 	.word	0x20000e14
 8004644:	20000e18 	.word	0x20000e18
 8004648:	e000ed20 	.word	0xe000ed20
 800464c:	2000000c 	.word	0x2000000c
 8004650:	e000ef34 	.word	0xe000ef34

08004654 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
	__asm volatile
 800465a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	607b      	str	r3, [r7, #4]
}
 800466c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800466e:	4b0f      	ldr	r3, [pc, #60]	; (80046ac <vPortEnterCritical+0x58>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3301      	adds	r3, #1
 8004674:	4a0d      	ldr	r2, [pc, #52]	; (80046ac <vPortEnterCritical+0x58>)
 8004676:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004678:	4b0c      	ldr	r3, [pc, #48]	; (80046ac <vPortEnterCritical+0x58>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d10f      	bne.n	80046a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004680:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <vPortEnterCritical+0x5c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	603b      	str	r3, [r7, #0]
}
 800469c:	bf00      	nop
 800469e:	e7fe      	b.n	800469e <vPortEnterCritical+0x4a>
	}
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	2000000c 	.word	0x2000000c
 80046b0:	e000ed04 	.word	0xe000ed04

080046b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80046ba:	4b12      	ldr	r3, [pc, #72]	; (8004704 <vPortExitCritical+0x50>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10a      	bne.n	80046d8 <vPortExitCritical+0x24>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	607b      	str	r3, [r7, #4]
}
 80046d4:	bf00      	nop
 80046d6:	e7fe      	b.n	80046d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80046d8:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <vPortExitCritical+0x50>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3b01      	subs	r3, #1
 80046de:	4a09      	ldr	r2, [pc, #36]	; (8004704 <vPortExitCritical+0x50>)
 80046e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80046e2:	4b08      	ldr	r3, [pc, #32]	; (8004704 <vPortExitCritical+0x50>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d105      	bne.n	80046f6 <vPortExitCritical+0x42>
 80046ea:	2300      	movs	r3, #0
 80046ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	f383 8811 	msr	BASEPRI, r3
}
 80046f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	2000000c 	.word	0x2000000c
	...

08004710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004710:	f3ef 8009 	mrs	r0, PSP
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	4b15      	ldr	r3, [pc, #84]	; (8004770 <pxCurrentTCBConst>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	f01e 0f10 	tst.w	lr, #16
 8004720:	bf08      	it	eq
 8004722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800472a:	6010      	str	r0, [r2, #0]
 800472c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004730:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004734:	f380 8811 	msr	BASEPRI, r0
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f7fe ffc0 	bl	80036c4 <vTaskSwitchContext>
 8004744:	f04f 0000 	mov.w	r0, #0
 8004748:	f380 8811 	msr	BASEPRI, r0
 800474c:	bc09      	pop	{r0, r3}
 800474e:	6819      	ldr	r1, [r3, #0]
 8004750:	6808      	ldr	r0, [r1, #0]
 8004752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004756:	f01e 0f10 	tst.w	lr, #16
 800475a:	bf08      	it	eq
 800475c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004760:	f380 8809 	msr	PSP, r0
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	f3af 8000 	nop.w

08004770 <pxCurrentTCBConst>:
 8004770:	200007e8 	.word	0x200007e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004774:	bf00      	nop
 8004776:	bf00      	nop

08004778 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	607b      	str	r3, [r7, #4]
}
 8004790:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004792:	f7fe fedd 	bl	8003550 <xTaskIncrementTick>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800479c:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <xPortSysTickHandler+0x40>)
 800479e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	2300      	movs	r3, #0
 80047a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	f383 8811 	msr	BASEPRI, r3
}
 80047ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80047b0:	bf00      	nop
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	e000ed04 	.word	0xe000ed04

080047bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047c0:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <vPortSetupTimerInterrupt+0x34>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047c6:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <vPortSetupTimerInterrupt+0x38>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <vPortSetupTimerInterrupt+0x3c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a0a      	ldr	r2, [pc, #40]	; (80047fc <vPortSetupTimerInterrupt+0x40>)
 80047d2:	fba2 2303 	umull	r2, r3, r2, r3
 80047d6:	099b      	lsrs	r3, r3, #6
 80047d8:	4a09      	ldr	r2, [pc, #36]	; (8004800 <vPortSetupTimerInterrupt+0x44>)
 80047da:	3b01      	subs	r3, #1
 80047dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047de:	4b04      	ldr	r3, [pc, #16]	; (80047f0 <vPortSetupTimerInterrupt+0x34>)
 80047e0:	2207      	movs	r2, #7
 80047e2:	601a      	str	r2, [r3, #0]
}
 80047e4:	bf00      	nop
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	e000e010 	.word	0xe000e010
 80047f4:	e000e018 	.word	0xe000e018
 80047f8:	20000000 	.word	0x20000000
 80047fc:	10624dd3 	.word	0x10624dd3
 8004800:	e000e014 	.word	0xe000e014

08004804 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004804:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004814 <vPortEnableVFP+0x10>
 8004808:	6801      	ldr	r1, [r0, #0]
 800480a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800480e:	6001      	str	r1, [r0, #0]
 8004810:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004812:	bf00      	nop
 8004814:	e000ed88 	.word	0xe000ed88

08004818 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800481e:	f3ef 8305 	mrs	r3, IPSR
 8004822:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2b0f      	cmp	r3, #15
 8004828:	d914      	bls.n	8004854 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800482a:	4a17      	ldr	r2, [pc, #92]	; (8004888 <vPortValidateInterruptPriority+0x70>)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4413      	add	r3, r2
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004834:	4b15      	ldr	r3, [pc, #84]	; (800488c <vPortValidateInterruptPriority+0x74>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	7afa      	ldrb	r2, [r7, #11]
 800483a:	429a      	cmp	r2, r3
 800483c:	d20a      	bcs.n	8004854 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	607b      	str	r3, [r7, #4]
}
 8004850:	bf00      	nop
 8004852:	e7fe      	b.n	8004852 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004854:	4b0e      	ldr	r3, [pc, #56]	; (8004890 <vPortValidateInterruptPriority+0x78>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800485c:	4b0d      	ldr	r3, [pc, #52]	; (8004894 <vPortValidateInterruptPriority+0x7c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d90a      	bls.n	800487a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	603b      	str	r3, [r7, #0]
}
 8004876:	bf00      	nop
 8004878:	e7fe      	b.n	8004878 <vPortValidateInterruptPriority+0x60>
	}
 800487a:	bf00      	nop
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	e000e3f0 	.word	0xe000e3f0
 800488c:	20000e14 	.word	0x20000e14
 8004890:	e000ed0c 	.word	0xe000ed0c
 8004894:	20000e18 	.word	0x20000e18

08004898 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08a      	sub	sp, #40	; 0x28
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80048a4:	f7fe fd98 	bl	80033d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80048a8:	4b5b      	ldr	r3, [pc, #364]	; (8004a18 <pvPortMalloc+0x180>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80048b0:	f000 f920 	bl	8004af4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80048b4:	4b59      	ldr	r3, [pc, #356]	; (8004a1c <pvPortMalloc+0x184>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4013      	ands	r3, r2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f040 8093 	bne.w	80049e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01d      	beq.n	8004904 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80048c8:	2208      	movs	r2, #8
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4413      	add	r3, r2
 80048ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d014      	beq.n	8004904 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f023 0307 	bic.w	r3, r3, #7
 80048e0:	3308      	adds	r3, #8
 80048e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <pvPortMalloc+0x6c>
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	617b      	str	r3, [r7, #20]
}
 8004900:	bf00      	nop
 8004902:	e7fe      	b.n	8004902 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d06e      	beq.n	80049e8 <pvPortMalloc+0x150>
 800490a:	4b45      	ldr	r3, [pc, #276]	; (8004a20 <pvPortMalloc+0x188>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	429a      	cmp	r2, r3
 8004912:	d869      	bhi.n	80049e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004914:	4b43      	ldr	r3, [pc, #268]	; (8004a24 <pvPortMalloc+0x18c>)
 8004916:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004918:	4b42      	ldr	r3, [pc, #264]	; (8004a24 <pvPortMalloc+0x18c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800491e:	e004      	b.n	800492a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	429a      	cmp	r2, r3
 8004932:	d903      	bls.n	800493c <pvPortMalloc+0xa4>
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1f1      	bne.n	8004920 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800493c:	4b36      	ldr	r3, [pc, #216]	; (8004a18 <pvPortMalloc+0x180>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004942:	429a      	cmp	r2, r3
 8004944:	d050      	beq.n	80049e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2208      	movs	r2, #8
 800494c:	4413      	add	r3, r2
 800494e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	1ad2      	subs	r2, r2, r3
 8004960:	2308      	movs	r3, #8
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	429a      	cmp	r2, r3
 8004966:	d91f      	bls.n	80049a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4413      	add	r3, r2
 800496e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <pvPortMalloc+0xf8>
	__asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	613b      	str	r3, [r7, #16]
}
 800498c:	bf00      	nop
 800498e:	e7fe      	b.n	800498e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	1ad2      	subs	r2, r2, r3
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049a2:	69b8      	ldr	r0, [r7, #24]
 80049a4:	f000 f908 	bl	8004bb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049a8:	4b1d      	ldr	r3, [pc, #116]	; (8004a20 <pvPortMalloc+0x188>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	4a1b      	ldr	r2, [pc, #108]	; (8004a20 <pvPortMalloc+0x188>)
 80049b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049b6:	4b1a      	ldr	r3, [pc, #104]	; (8004a20 <pvPortMalloc+0x188>)
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	4b1b      	ldr	r3, [pc, #108]	; (8004a28 <pvPortMalloc+0x190>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d203      	bcs.n	80049ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049c2:	4b17      	ldr	r3, [pc, #92]	; (8004a20 <pvPortMalloc+0x188>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a18      	ldr	r2, [pc, #96]	; (8004a28 <pvPortMalloc+0x190>)
 80049c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	4b13      	ldr	r3, [pc, #76]	; (8004a1c <pvPortMalloc+0x184>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	431a      	orrs	r2, r3
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80049de:	4b13      	ldr	r3, [pc, #76]	; (8004a2c <pvPortMalloc+0x194>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3301      	adds	r3, #1
 80049e4:	4a11      	ldr	r2, [pc, #68]	; (8004a2c <pvPortMalloc+0x194>)
 80049e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80049e8:	f7fe fd04 	bl	80033f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <pvPortMalloc+0x174>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	60fb      	str	r3, [r7, #12]
}
 8004a08:	bf00      	nop
 8004a0a:	e7fe      	b.n	8004a0a <pvPortMalloc+0x172>
	return pvReturn;
 8004a0c:	69fb      	ldr	r3, [r7, #28]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3728      	adds	r7, #40	; 0x28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20004a24 	.word	0x20004a24
 8004a1c:	20004a38 	.word	0x20004a38
 8004a20:	20004a28 	.word	0x20004a28
 8004a24:	20004a1c 	.word	0x20004a1c
 8004a28:	20004a2c 	.word	0x20004a2c
 8004a2c:	20004a30 	.word	0x20004a30

08004a30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d04d      	beq.n	8004ade <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a42:	2308      	movs	r3, #8
 8004a44:	425b      	negs	r3, r3
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4413      	add	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	4b24      	ldr	r3, [pc, #144]	; (8004ae8 <vPortFree+0xb8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10a      	bne.n	8004a74 <vPortFree+0x44>
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	60fb      	str	r3, [r7, #12]
}
 8004a70:	bf00      	nop
 8004a72:	e7fe      	b.n	8004a72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <vPortFree+0x62>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	60bb      	str	r3, [r7, #8]
}
 8004a8e:	bf00      	nop
 8004a90:	e7fe      	b.n	8004a90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	4b14      	ldr	r3, [pc, #80]	; (8004ae8 <vPortFree+0xb8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d01e      	beq.n	8004ade <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d11a      	bne.n	8004ade <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	4b0e      	ldr	r3, [pc, #56]	; (8004ae8 <vPortFree+0xb8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	401a      	ands	r2, r3
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ab8:	f7fe fc8e 	bl	80033d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <vPortFree+0xbc>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	4a09      	ldr	r2, [pc, #36]	; (8004aec <vPortFree+0xbc>)
 8004ac8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004aca:	6938      	ldr	r0, [r7, #16]
 8004acc:	f000 f874 	bl	8004bb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004ad0:	4b07      	ldr	r3, [pc, #28]	; (8004af0 <vPortFree+0xc0>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	4a06      	ldr	r2, [pc, #24]	; (8004af0 <vPortFree+0xc0>)
 8004ad8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004ada:	f7fe fc8b 	bl	80033f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ade:	bf00      	nop
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20004a38 	.word	0x20004a38
 8004aec:	20004a28 	.word	0x20004a28
 8004af0:	20004a34 	.word	0x20004a34

08004af4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004afa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004afe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b00:	4b27      	ldr	r3, [pc, #156]	; (8004ba0 <prvHeapInit+0xac>)
 8004b02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00c      	beq.n	8004b28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3307      	adds	r3, #7
 8004b12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0307 	bic.w	r3, r3, #7
 8004b1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	4a1f      	ldr	r2, [pc, #124]	; (8004ba0 <prvHeapInit+0xac>)
 8004b24:	4413      	add	r3, r2
 8004b26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b2c:	4a1d      	ldr	r2, [pc, #116]	; (8004ba4 <prvHeapInit+0xb0>)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b32:	4b1c      	ldr	r3, [pc, #112]	; (8004ba4 <prvHeapInit+0xb0>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b40:	2208      	movs	r2, #8
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	1a9b      	subs	r3, r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0307 	bic.w	r3, r3, #7
 8004b4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4a15      	ldr	r2, [pc, #84]	; (8004ba8 <prvHeapInit+0xb4>)
 8004b54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b56:	4b14      	ldr	r3, [pc, #80]	; (8004ba8 <prvHeapInit+0xb4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b5e:	4b12      	ldr	r3, [pc, #72]	; (8004ba8 <prvHeapInit+0xb4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	1ad2      	subs	r2, r2, r3
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b74:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <prvHeapInit+0xb4>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	4a0a      	ldr	r2, [pc, #40]	; (8004bac <prvHeapInit+0xb8>)
 8004b82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	4a09      	ldr	r2, [pc, #36]	; (8004bb0 <prvHeapInit+0xbc>)
 8004b8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b8c:	4b09      	ldr	r3, [pc, #36]	; (8004bb4 <prvHeapInit+0xc0>)
 8004b8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b92:	601a      	str	r2, [r3, #0]
}
 8004b94:	bf00      	nop
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	20000e1c 	.word	0x20000e1c
 8004ba4:	20004a1c 	.word	0x20004a1c
 8004ba8:	20004a24 	.word	0x20004a24
 8004bac:	20004a2c 	.word	0x20004a2c
 8004bb0:	20004a28 	.word	0x20004a28
 8004bb4:	20004a38 	.word	0x20004a38

08004bb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004bc0:	4b28      	ldr	r3, [pc, #160]	; (8004c64 <prvInsertBlockIntoFreeList+0xac>)
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	e002      	b.n	8004bcc <prvInsertBlockIntoFreeList+0x14>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d8f7      	bhi.n	8004bc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	4413      	add	r3, r2
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d108      	bne.n	8004bfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	441a      	add	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	441a      	add	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d118      	bne.n	8004c40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	4b15      	ldr	r3, [pc, #84]	; (8004c68 <prvInsertBlockIntoFreeList+0xb0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d00d      	beq.n	8004c36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	441a      	add	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	e008      	b.n	8004c48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c36:	4b0c      	ldr	r3, [pc, #48]	; (8004c68 <prvInsertBlockIntoFreeList+0xb0>)
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	e003      	b.n	8004c48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d002      	beq.n	8004c56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c56:	bf00      	nop
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	20004a1c 	.word	0x20004a1c
 8004c68:	20004a24 	.word	0x20004a24

08004c6c <std>:
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	b510      	push	{r4, lr}
 8004c70:	4604      	mov	r4, r0
 8004c72:	e9c0 3300 	strd	r3, r3, [r0]
 8004c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c7a:	6083      	str	r3, [r0, #8]
 8004c7c:	8181      	strh	r1, [r0, #12]
 8004c7e:	6643      	str	r3, [r0, #100]	; 0x64
 8004c80:	81c2      	strh	r2, [r0, #14]
 8004c82:	6183      	str	r3, [r0, #24]
 8004c84:	4619      	mov	r1, r3
 8004c86:	2208      	movs	r2, #8
 8004c88:	305c      	adds	r0, #92	; 0x5c
 8004c8a:	f000 f9e5 	bl	8005058 <memset>
 8004c8e:	4b0d      	ldr	r3, [pc, #52]	; (8004cc4 <std+0x58>)
 8004c90:	6263      	str	r3, [r4, #36]	; 0x24
 8004c92:	4b0d      	ldr	r3, [pc, #52]	; (8004cc8 <std+0x5c>)
 8004c94:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c96:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <std+0x60>)
 8004c98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c9a:	4b0d      	ldr	r3, [pc, #52]	; (8004cd0 <std+0x64>)
 8004c9c:	6323      	str	r3, [r4, #48]	; 0x30
 8004c9e:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <std+0x68>)
 8004ca0:	6224      	str	r4, [r4, #32]
 8004ca2:	429c      	cmp	r4, r3
 8004ca4:	d006      	beq.n	8004cb4 <std+0x48>
 8004ca6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004caa:	4294      	cmp	r4, r2
 8004cac:	d002      	beq.n	8004cb4 <std+0x48>
 8004cae:	33d0      	adds	r3, #208	; 0xd0
 8004cb0:	429c      	cmp	r4, r3
 8004cb2:	d105      	bne.n	8004cc0 <std+0x54>
 8004cb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cbc:	f000 ba44 	b.w	8005148 <__retarget_lock_init_recursive>
 8004cc0:	bd10      	pop	{r4, pc}
 8004cc2:	bf00      	nop
 8004cc4:	08004ea9 	.word	0x08004ea9
 8004cc8:	08004ecb 	.word	0x08004ecb
 8004ccc:	08004f03 	.word	0x08004f03
 8004cd0:	08004f27 	.word	0x08004f27
 8004cd4:	20004a3c 	.word	0x20004a3c

08004cd8 <stdio_exit_handler>:
 8004cd8:	4a02      	ldr	r2, [pc, #8]	; (8004ce4 <stdio_exit_handler+0xc>)
 8004cda:	4903      	ldr	r1, [pc, #12]	; (8004ce8 <stdio_exit_handler+0x10>)
 8004cdc:	4803      	ldr	r0, [pc, #12]	; (8004cec <stdio_exit_handler+0x14>)
 8004cde:	f000 b869 	b.w	8004db4 <_fwalk_sglue>
 8004ce2:	bf00      	nop
 8004ce4:	20000010 	.word	0x20000010
 8004ce8:	08005469 	.word	0x08005469
 8004cec:	2000001c 	.word	0x2000001c

08004cf0 <cleanup_stdio>:
 8004cf0:	6841      	ldr	r1, [r0, #4]
 8004cf2:	4b0c      	ldr	r3, [pc, #48]	; (8004d24 <cleanup_stdio+0x34>)
 8004cf4:	4299      	cmp	r1, r3
 8004cf6:	b510      	push	{r4, lr}
 8004cf8:	4604      	mov	r4, r0
 8004cfa:	d001      	beq.n	8004d00 <cleanup_stdio+0x10>
 8004cfc:	f000 fbb4 	bl	8005468 <_fflush_r>
 8004d00:	68a1      	ldr	r1, [r4, #8]
 8004d02:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <cleanup_stdio+0x38>)
 8004d04:	4299      	cmp	r1, r3
 8004d06:	d002      	beq.n	8004d0e <cleanup_stdio+0x1e>
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f000 fbad 	bl	8005468 <_fflush_r>
 8004d0e:	68e1      	ldr	r1, [r4, #12]
 8004d10:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <cleanup_stdio+0x3c>)
 8004d12:	4299      	cmp	r1, r3
 8004d14:	d004      	beq.n	8004d20 <cleanup_stdio+0x30>
 8004d16:	4620      	mov	r0, r4
 8004d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d1c:	f000 bba4 	b.w	8005468 <_fflush_r>
 8004d20:	bd10      	pop	{r4, pc}
 8004d22:	bf00      	nop
 8004d24:	20004a3c 	.word	0x20004a3c
 8004d28:	20004aa4 	.word	0x20004aa4
 8004d2c:	20004b0c 	.word	0x20004b0c

08004d30 <global_stdio_init.part.0>:
 8004d30:	b510      	push	{r4, lr}
 8004d32:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <global_stdio_init.part.0+0x30>)
 8004d34:	4c0b      	ldr	r4, [pc, #44]	; (8004d64 <global_stdio_init.part.0+0x34>)
 8004d36:	4a0c      	ldr	r2, [pc, #48]	; (8004d68 <global_stdio_init.part.0+0x38>)
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2104      	movs	r1, #4
 8004d40:	f7ff ff94 	bl	8004c6c <std>
 8004d44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004d48:	2201      	movs	r2, #1
 8004d4a:	2109      	movs	r1, #9
 8004d4c:	f7ff ff8e 	bl	8004c6c <std>
 8004d50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004d54:	2202      	movs	r2, #2
 8004d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d5a:	2112      	movs	r1, #18
 8004d5c:	f7ff bf86 	b.w	8004c6c <std>
 8004d60:	20004b74 	.word	0x20004b74
 8004d64:	20004a3c 	.word	0x20004a3c
 8004d68:	08004cd9 	.word	0x08004cd9

08004d6c <__sfp_lock_acquire>:
 8004d6c:	4801      	ldr	r0, [pc, #4]	; (8004d74 <__sfp_lock_acquire+0x8>)
 8004d6e:	f000 b9ec 	b.w	800514a <__retarget_lock_acquire_recursive>
 8004d72:	bf00      	nop
 8004d74:	20004b7d 	.word	0x20004b7d

08004d78 <__sfp_lock_release>:
 8004d78:	4801      	ldr	r0, [pc, #4]	; (8004d80 <__sfp_lock_release+0x8>)
 8004d7a:	f000 b9e7 	b.w	800514c <__retarget_lock_release_recursive>
 8004d7e:	bf00      	nop
 8004d80:	20004b7d 	.word	0x20004b7d

08004d84 <__sinit>:
 8004d84:	b510      	push	{r4, lr}
 8004d86:	4604      	mov	r4, r0
 8004d88:	f7ff fff0 	bl	8004d6c <__sfp_lock_acquire>
 8004d8c:	6a23      	ldr	r3, [r4, #32]
 8004d8e:	b11b      	cbz	r3, 8004d98 <__sinit+0x14>
 8004d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d94:	f7ff bff0 	b.w	8004d78 <__sfp_lock_release>
 8004d98:	4b04      	ldr	r3, [pc, #16]	; (8004dac <__sinit+0x28>)
 8004d9a:	6223      	str	r3, [r4, #32]
 8004d9c:	4b04      	ldr	r3, [pc, #16]	; (8004db0 <__sinit+0x2c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1f5      	bne.n	8004d90 <__sinit+0xc>
 8004da4:	f7ff ffc4 	bl	8004d30 <global_stdio_init.part.0>
 8004da8:	e7f2      	b.n	8004d90 <__sinit+0xc>
 8004daa:	bf00      	nop
 8004dac:	08004cf1 	.word	0x08004cf1
 8004db0:	20004b74 	.word	0x20004b74

08004db4 <_fwalk_sglue>:
 8004db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004db8:	4607      	mov	r7, r0
 8004dba:	4688      	mov	r8, r1
 8004dbc:	4614      	mov	r4, r2
 8004dbe:	2600      	movs	r6, #0
 8004dc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004dc4:	f1b9 0901 	subs.w	r9, r9, #1
 8004dc8:	d505      	bpl.n	8004dd6 <_fwalk_sglue+0x22>
 8004dca:	6824      	ldr	r4, [r4, #0]
 8004dcc:	2c00      	cmp	r4, #0
 8004dce:	d1f7      	bne.n	8004dc0 <_fwalk_sglue+0xc>
 8004dd0:	4630      	mov	r0, r6
 8004dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dd6:	89ab      	ldrh	r3, [r5, #12]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d907      	bls.n	8004dec <_fwalk_sglue+0x38>
 8004ddc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004de0:	3301      	adds	r3, #1
 8004de2:	d003      	beq.n	8004dec <_fwalk_sglue+0x38>
 8004de4:	4629      	mov	r1, r5
 8004de6:	4638      	mov	r0, r7
 8004de8:	47c0      	blx	r8
 8004dea:	4306      	orrs	r6, r0
 8004dec:	3568      	adds	r5, #104	; 0x68
 8004dee:	e7e9      	b.n	8004dc4 <_fwalk_sglue+0x10>

08004df0 <_puts_r>:
 8004df0:	6a03      	ldr	r3, [r0, #32]
 8004df2:	b570      	push	{r4, r5, r6, lr}
 8004df4:	6884      	ldr	r4, [r0, #8]
 8004df6:	4605      	mov	r5, r0
 8004df8:	460e      	mov	r6, r1
 8004dfa:	b90b      	cbnz	r3, 8004e00 <_puts_r+0x10>
 8004dfc:	f7ff ffc2 	bl	8004d84 <__sinit>
 8004e00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e02:	07db      	lsls	r3, r3, #31
 8004e04:	d405      	bmi.n	8004e12 <_puts_r+0x22>
 8004e06:	89a3      	ldrh	r3, [r4, #12]
 8004e08:	0598      	lsls	r0, r3, #22
 8004e0a:	d402      	bmi.n	8004e12 <_puts_r+0x22>
 8004e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e0e:	f000 f99c 	bl	800514a <__retarget_lock_acquire_recursive>
 8004e12:	89a3      	ldrh	r3, [r4, #12]
 8004e14:	0719      	lsls	r1, r3, #28
 8004e16:	d513      	bpl.n	8004e40 <_puts_r+0x50>
 8004e18:	6923      	ldr	r3, [r4, #16]
 8004e1a:	b18b      	cbz	r3, 8004e40 <_puts_r+0x50>
 8004e1c:	3e01      	subs	r6, #1
 8004e1e:	68a3      	ldr	r3, [r4, #8]
 8004e20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e24:	3b01      	subs	r3, #1
 8004e26:	60a3      	str	r3, [r4, #8]
 8004e28:	b9e9      	cbnz	r1, 8004e66 <_puts_r+0x76>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	da2e      	bge.n	8004e8c <_puts_r+0x9c>
 8004e2e:	4622      	mov	r2, r4
 8004e30:	210a      	movs	r1, #10
 8004e32:	4628      	mov	r0, r5
 8004e34:	f000 f87b 	bl	8004f2e <__swbuf_r>
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d007      	beq.n	8004e4c <_puts_r+0x5c>
 8004e3c:	250a      	movs	r5, #10
 8004e3e:	e007      	b.n	8004e50 <_puts_r+0x60>
 8004e40:	4621      	mov	r1, r4
 8004e42:	4628      	mov	r0, r5
 8004e44:	f000 f8b0 	bl	8004fa8 <__swsetup_r>
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d0e7      	beq.n	8004e1c <_puts_r+0x2c>
 8004e4c:	f04f 35ff 	mov.w	r5, #4294967295
 8004e50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e52:	07da      	lsls	r2, r3, #31
 8004e54:	d405      	bmi.n	8004e62 <_puts_r+0x72>
 8004e56:	89a3      	ldrh	r3, [r4, #12]
 8004e58:	059b      	lsls	r3, r3, #22
 8004e5a:	d402      	bmi.n	8004e62 <_puts_r+0x72>
 8004e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e5e:	f000 f975 	bl	800514c <__retarget_lock_release_recursive>
 8004e62:	4628      	mov	r0, r5
 8004e64:	bd70      	pop	{r4, r5, r6, pc}
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	da04      	bge.n	8004e74 <_puts_r+0x84>
 8004e6a:	69a2      	ldr	r2, [r4, #24]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	dc06      	bgt.n	8004e7e <_puts_r+0x8e>
 8004e70:	290a      	cmp	r1, #10
 8004e72:	d004      	beq.n	8004e7e <_puts_r+0x8e>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	6022      	str	r2, [r4, #0]
 8004e7a:	7019      	strb	r1, [r3, #0]
 8004e7c:	e7cf      	b.n	8004e1e <_puts_r+0x2e>
 8004e7e:	4622      	mov	r2, r4
 8004e80:	4628      	mov	r0, r5
 8004e82:	f000 f854 	bl	8004f2e <__swbuf_r>
 8004e86:	3001      	adds	r0, #1
 8004e88:	d1c9      	bne.n	8004e1e <_puts_r+0x2e>
 8004e8a:	e7df      	b.n	8004e4c <_puts_r+0x5c>
 8004e8c:	6823      	ldr	r3, [r4, #0]
 8004e8e:	250a      	movs	r5, #10
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	6022      	str	r2, [r4, #0]
 8004e94:	701d      	strb	r5, [r3, #0]
 8004e96:	e7db      	b.n	8004e50 <_puts_r+0x60>

08004e98 <puts>:
 8004e98:	4b02      	ldr	r3, [pc, #8]	; (8004ea4 <puts+0xc>)
 8004e9a:	4601      	mov	r1, r0
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	f7ff bfa7 	b.w	8004df0 <_puts_r>
 8004ea2:	bf00      	nop
 8004ea4:	20000068 	.word	0x20000068

08004ea8 <__sread>:
 8004ea8:	b510      	push	{r4, lr}
 8004eaa:	460c      	mov	r4, r1
 8004eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb0:	f000 f8fc 	bl	80050ac <_read_r>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	bfab      	itete	ge
 8004eb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004eba:	89a3      	ldrhlt	r3, [r4, #12]
 8004ebc:	181b      	addge	r3, r3, r0
 8004ebe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ec2:	bfac      	ite	ge
 8004ec4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ec6:	81a3      	strhlt	r3, [r4, #12]
 8004ec8:	bd10      	pop	{r4, pc}

08004eca <__swrite>:
 8004eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ece:	461f      	mov	r7, r3
 8004ed0:	898b      	ldrh	r3, [r1, #12]
 8004ed2:	05db      	lsls	r3, r3, #23
 8004ed4:	4605      	mov	r5, r0
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	4616      	mov	r6, r2
 8004eda:	d505      	bpl.n	8004ee8 <__swrite+0x1e>
 8004edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f000 f8d0 	bl	8005088 <_lseek_r>
 8004ee8:	89a3      	ldrh	r3, [r4, #12]
 8004eea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004eee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ef2:	81a3      	strh	r3, [r4, #12]
 8004ef4:	4632      	mov	r2, r6
 8004ef6:	463b      	mov	r3, r7
 8004ef8:	4628      	mov	r0, r5
 8004efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004efe:	f000 b8e7 	b.w	80050d0 <_write_r>

08004f02 <__sseek>:
 8004f02:	b510      	push	{r4, lr}
 8004f04:	460c      	mov	r4, r1
 8004f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f0a:	f000 f8bd 	bl	8005088 <_lseek_r>
 8004f0e:	1c43      	adds	r3, r0, #1
 8004f10:	89a3      	ldrh	r3, [r4, #12]
 8004f12:	bf15      	itete	ne
 8004f14:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f1e:	81a3      	strheq	r3, [r4, #12]
 8004f20:	bf18      	it	ne
 8004f22:	81a3      	strhne	r3, [r4, #12]
 8004f24:	bd10      	pop	{r4, pc}

08004f26 <__sclose>:
 8004f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f2a:	f000 b89d 	b.w	8005068 <_close_r>

08004f2e <__swbuf_r>:
 8004f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f30:	460e      	mov	r6, r1
 8004f32:	4614      	mov	r4, r2
 8004f34:	4605      	mov	r5, r0
 8004f36:	b118      	cbz	r0, 8004f40 <__swbuf_r+0x12>
 8004f38:	6a03      	ldr	r3, [r0, #32]
 8004f3a:	b90b      	cbnz	r3, 8004f40 <__swbuf_r+0x12>
 8004f3c:	f7ff ff22 	bl	8004d84 <__sinit>
 8004f40:	69a3      	ldr	r3, [r4, #24]
 8004f42:	60a3      	str	r3, [r4, #8]
 8004f44:	89a3      	ldrh	r3, [r4, #12]
 8004f46:	071a      	lsls	r2, r3, #28
 8004f48:	d525      	bpl.n	8004f96 <__swbuf_r+0x68>
 8004f4a:	6923      	ldr	r3, [r4, #16]
 8004f4c:	b31b      	cbz	r3, 8004f96 <__swbuf_r+0x68>
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	6922      	ldr	r2, [r4, #16]
 8004f52:	1a98      	subs	r0, r3, r2
 8004f54:	6963      	ldr	r3, [r4, #20]
 8004f56:	b2f6      	uxtb	r6, r6
 8004f58:	4283      	cmp	r3, r0
 8004f5a:	4637      	mov	r7, r6
 8004f5c:	dc04      	bgt.n	8004f68 <__swbuf_r+0x3a>
 8004f5e:	4621      	mov	r1, r4
 8004f60:	4628      	mov	r0, r5
 8004f62:	f000 fa81 	bl	8005468 <_fflush_r>
 8004f66:	b9e0      	cbnz	r0, 8004fa2 <__swbuf_r+0x74>
 8004f68:	68a3      	ldr	r3, [r4, #8]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	60a3      	str	r3, [r4, #8]
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	6022      	str	r2, [r4, #0]
 8004f74:	701e      	strb	r6, [r3, #0]
 8004f76:	6962      	ldr	r2, [r4, #20]
 8004f78:	1c43      	adds	r3, r0, #1
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d004      	beq.n	8004f88 <__swbuf_r+0x5a>
 8004f7e:	89a3      	ldrh	r3, [r4, #12]
 8004f80:	07db      	lsls	r3, r3, #31
 8004f82:	d506      	bpl.n	8004f92 <__swbuf_r+0x64>
 8004f84:	2e0a      	cmp	r6, #10
 8004f86:	d104      	bne.n	8004f92 <__swbuf_r+0x64>
 8004f88:	4621      	mov	r1, r4
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f000 fa6c 	bl	8005468 <_fflush_r>
 8004f90:	b938      	cbnz	r0, 8004fa2 <__swbuf_r+0x74>
 8004f92:	4638      	mov	r0, r7
 8004f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f96:	4621      	mov	r1, r4
 8004f98:	4628      	mov	r0, r5
 8004f9a:	f000 f805 	bl	8004fa8 <__swsetup_r>
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	d0d5      	beq.n	8004f4e <__swbuf_r+0x20>
 8004fa2:	f04f 37ff 	mov.w	r7, #4294967295
 8004fa6:	e7f4      	b.n	8004f92 <__swbuf_r+0x64>

08004fa8 <__swsetup_r>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	4b2a      	ldr	r3, [pc, #168]	; (8005054 <__swsetup_r+0xac>)
 8004fac:	4605      	mov	r5, r0
 8004fae:	6818      	ldr	r0, [r3, #0]
 8004fb0:	460c      	mov	r4, r1
 8004fb2:	b118      	cbz	r0, 8004fbc <__swsetup_r+0x14>
 8004fb4:	6a03      	ldr	r3, [r0, #32]
 8004fb6:	b90b      	cbnz	r3, 8004fbc <__swsetup_r+0x14>
 8004fb8:	f7ff fee4 	bl	8004d84 <__sinit>
 8004fbc:	89a3      	ldrh	r3, [r4, #12]
 8004fbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fc2:	0718      	lsls	r0, r3, #28
 8004fc4:	d422      	bmi.n	800500c <__swsetup_r+0x64>
 8004fc6:	06d9      	lsls	r1, r3, #27
 8004fc8:	d407      	bmi.n	8004fda <__swsetup_r+0x32>
 8004fca:	2309      	movs	r3, #9
 8004fcc:	602b      	str	r3, [r5, #0]
 8004fce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004fd2:	81a3      	strh	r3, [r4, #12]
 8004fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd8:	e034      	b.n	8005044 <__swsetup_r+0x9c>
 8004fda:	0758      	lsls	r0, r3, #29
 8004fdc:	d512      	bpl.n	8005004 <__swsetup_r+0x5c>
 8004fde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fe0:	b141      	cbz	r1, 8004ff4 <__swsetup_r+0x4c>
 8004fe2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fe6:	4299      	cmp	r1, r3
 8004fe8:	d002      	beq.n	8004ff0 <__swsetup_r+0x48>
 8004fea:	4628      	mov	r0, r5
 8004fec:	f000 f8be 	bl	800516c <_free_r>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	6363      	str	r3, [r4, #52]	; 0x34
 8004ff4:	89a3      	ldrh	r3, [r4, #12]
 8004ff6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ffa:	81a3      	strh	r3, [r4, #12]
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	6063      	str	r3, [r4, #4]
 8005000:	6923      	ldr	r3, [r4, #16]
 8005002:	6023      	str	r3, [r4, #0]
 8005004:	89a3      	ldrh	r3, [r4, #12]
 8005006:	f043 0308 	orr.w	r3, r3, #8
 800500a:	81a3      	strh	r3, [r4, #12]
 800500c:	6923      	ldr	r3, [r4, #16]
 800500e:	b94b      	cbnz	r3, 8005024 <__swsetup_r+0x7c>
 8005010:	89a3      	ldrh	r3, [r4, #12]
 8005012:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800501a:	d003      	beq.n	8005024 <__swsetup_r+0x7c>
 800501c:	4621      	mov	r1, r4
 800501e:	4628      	mov	r0, r5
 8005020:	f000 fa70 	bl	8005504 <__smakebuf_r>
 8005024:	89a0      	ldrh	r0, [r4, #12]
 8005026:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800502a:	f010 0301 	ands.w	r3, r0, #1
 800502e:	d00a      	beq.n	8005046 <__swsetup_r+0x9e>
 8005030:	2300      	movs	r3, #0
 8005032:	60a3      	str	r3, [r4, #8]
 8005034:	6963      	ldr	r3, [r4, #20]
 8005036:	425b      	negs	r3, r3
 8005038:	61a3      	str	r3, [r4, #24]
 800503a:	6923      	ldr	r3, [r4, #16]
 800503c:	b943      	cbnz	r3, 8005050 <__swsetup_r+0xa8>
 800503e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005042:	d1c4      	bne.n	8004fce <__swsetup_r+0x26>
 8005044:	bd38      	pop	{r3, r4, r5, pc}
 8005046:	0781      	lsls	r1, r0, #30
 8005048:	bf58      	it	pl
 800504a:	6963      	ldrpl	r3, [r4, #20]
 800504c:	60a3      	str	r3, [r4, #8]
 800504e:	e7f4      	b.n	800503a <__swsetup_r+0x92>
 8005050:	2000      	movs	r0, #0
 8005052:	e7f7      	b.n	8005044 <__swsetup_r+0x9c>
 8005054:	20000068 	.word	0x20000068

08005058 <memset>:
 8005058:	4402      	add	r2, r0
 800505a:	4603      	mov	r3, r0
 800505c:	4293      	cmp	r3, r2
 800505e:	d100      	bne.n	8005062 <memset+0xa>
 8005060:	4770      	bx	lr
 8005062:	f803 1b01 	strb.w	r1, [r3], #1
 8005066:	e7f9      	b.n	800505c <memset+0x4>

08005068 <_close_r>:
 8005068:	b538      	push	{r3, r4, r5, lr}
 800506a:	4d06      	ldr	r5, [pc, #24]	; (8005084 <_close_r+0x1c>)
 800506c:	2300      	movs	r3, #0
 800506e:	4604      	mov	r4, r0
 8005070:	4608      	mov	r0, r1
 8005072:	602b      	str	r3, [r5, #0]
 8005074:	f7fb fc04 	bl	8000880 <_close>
 8005078:	1c43      	adds	r3, r0, #1
 800507a:	d102      	bne.n	8005082 <_close_r+0x1a>
 800507c:	682b      	ldr	r3, [r5, #0]
 800507e:	b103      	cbz	r3, 8005082 <_close_r+0x1a>
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	bd38      	pop	{r3, r4, r5, pc}
 8005084:	20004b78 	.word	0x20004b78

08005088 <_lseek_r>:
 8005088:	b538      	push	{r3, r4, r5, lr}
 800508a:	4d07      	ldr	r5, [pc, #28]	; (80050a8 <_lseek_r+0x20>)
 800508c:	4604      	mov	r4, r0
 800508e:	4608      	mov	r0, r1
 8005090:	4611      	mov	r1, r2
 8005092:	2200      	movs	r2, #0
 8005094:	602a      	str	r2, [r5, #0]
 8005096:	461a      	mov	r2, r3
 8005098:	f7fb fc19 	bl	80008ce <_lseek>
 800509c:	1c43      	adds	r3, r0, #1
 800509e:	d102      	bne.n	80050a6 <_lseek_r+0x1e>
 80050a0:	682b      	ldr	r3, [r5, #0]
 80050a2:	b103      	cbz	r3, 80050a6 <_lseek_r+0x1e>
 80050a4:	6023      	str	r3, [r4, #0]
 80050a6:	bd38      	pop	{r3, r4, r5, pc}
 80050a8:	20004b78 	.word	0x20004b78

080050ac <_read_r>:
 80050ac:	b538      	push	{r3, r4, r5, lr}
 80050ae:	4d07      	ldr	r5, [pc, #28]	; (80050cc <_read_r+0x20>)
 80050b0:	4604      	mov	r4, r0
 80050b2:	4608      	mov	r0, r1
 80050b4:	4611      	mov	r1, r2
 80050b6:	2200      	movs	r2, #0
 80050b8:	602a      	str	r2, [r5, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	f7fb fbc3 	bl	8000846 <_read>
 80050c0:	1c43      	adds	r3, r0, #1
 80050c2:	d102      	bne.n	80050ca <_read_r+0x1e>
 80050c4:	682b      	ldr	r3, [r5, #0]
 80050c6:	b103      	cbz	r3, 80050ca <_read_r+0x1e>
 80050c8:	6023      	str	r3, [r4, #0]
 80050ca:	bd38      	pop	{r3, r4, r5, pc}
 80050cc:	20004b78 	.word	0x20004b78

080050d0 <_write_r>:
 80050d0:	b538      	push	{r3, r4, r5, lr}
 80050d2:	4d07      	ldr	r5, [pc, #28]	; (80050f0 <_write_r+0x20>)
 80050d4:	4604      	mov	r4, r0
 80050d6:	4608      	mov	r0, r1
 80050d8:	4611      	mov	r1, r2
 80050da:	2200      	movs	r2, #0
 80050dc:	602a      	str	r2, [r5, #0]
 80050de:	461a      	mov	r2, r3
 80050e0:	f7fb fc60 	bl	80009a4 <_write>
 80050e4:	1c43      	adds	r3, r0, #1
 80050e6:	d102      	bne.n	80050ee <_write_r+0x1e>
 80050e8:	682b      	ldr	r3, [r5, #0]
 80050ea:	b103      	cbz	r3, 80050ee <_write_r+0x1e>
 80050ec:	6023      	str	r3, [r4, #0]
 80050ee:	bd38      	pop	{r3, r4, r5, pc}
 80050f0:	20004b78 	.word	0x20004b78

080050f4 <__errno>:
 80050f4:	4b01      	ldr	r3, [pc, #4]	; (80050fc <__errno+0x8>)
 80050f6:	6818      	ldr	r0, [r3, #0]
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	20000068 	.word	0x20000068

08005100 <__libc_init_array>:
 8005100:	b570      	push	{r4, r5, r6, lr}
 8005102:	4d0d      	ldr	r5, [pc, #52]	; (8005138 <__libc_init_array+0x38>)
 8005104:	4c0d      	ldr	r4, [pc, #52]	; (800513c <__libc_init_array+0x3c>)
 8005106:	1b64      	subs	r4, r4, r5
 8005108:	10a4      	asrs	r4, r4, #2
 800510a:	2600      	movs	r6, #0
 800510c:	42a6      	cmp	r6, r4
 800510e:	d109      	bne.n	8005124 <__libc_init_array+0x24>
 8005110:	4d0b      	ldr	r5, [pc, #44]	; (8005140 <__libc_init_array+0x40>)
 8005112:	4c0c      	ldr	r4, [pc, #48]	; (8005144 <__libc_init_array+0x44>)
 8005114:	f000 fa64 	bl	80055e0 <_init>
 8005118:	1b64      	subs	r4, r4, r5
 800511a:	10a4      	asrs	r4, r4, #2
 800511c:	2600      	movs	r6, #0
 800511e:	42a6      	cmp	r6, r4
 8005120:	d105      	bne.n	800512e <__libc_init_array+0x2e>
 8005122:	bd70      	pop	{r4, r5, r6, pc}
 8005124:	f855 3b04 	ldr.w	r3, [r5], #4
 8005128:	4798      	blx	r3
 800512a:	3601      	adds	r6, #1
 800512c:	e7ee      	b.n	800510c <__libc_init_array+0xc>
 800512e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005132:	4798      	blx	r3
 8005134:	3601      	adds	r6, #1
 8005136:	e7f2      	b.n	800511e <__libc_init_array+0x1e>
 8005138:	080056e0 	.word	0x080056e0
 800513c:	080056e0 	.word	0x080056e0
 8005140:	080056e0 	.word	0x080056e0
 8005144:	080056e4 	.word	0x080056e4

08005148 <__retarget_lock_init_recursive>:
 8005148:	4770      	bx	lr

0800514a <__retarget_lock_acquire_recursive>:
 800514a:	4770      	bx	lr

0800514c <__retarget_lock_release_recursive>:
 800514c:	4770      	bx	lr

0800514e <memcpy>:
 800514e:	440a      	add	r2, r1
 8005150:	4291      	cmp	r1, r2
 8005152:	f100 33ff 	add.w	r3, r0, #4294967295
 8005156:	d100      	bne.n	800515a <memcpy+0xc>
 8005158:	4770      	bx	lr
 800515a:	b510      	push	{r4, lr}
 800515c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005160:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005164:	4291      	cmp	r1, r2
 8005166:	d1f9      	bne.n	800515c <memcpy+0xe>
 8005168:	bd10      	pop	{r4, pc}
	...

0800516c <_free_r>:
 800516c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800516e:	2900      	cmp	r1, #0
 8005170:	d044      	beq.n	80051fc <_free_r+0x90>
 8005172:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005176:	9001      	str	r0, [sp, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	f1a1 0404 	sub.w	r4, r1, #4
 800517e:	bfb8      	it	lt
 8005180:	18e4      	addlt	r4, r4, r3
 8005182:	f000 f8df 	bl	8005344 <__malloc_lock>
 8005186:	4a1e      	ldr	r2, [pc, #120]	; (8005200 <_free_r+0x94>)
 8005188:	9801      	ldr	r0, [sp, #4]
 800518a:	6813      	ldr	r3, [r2, #0]
 800518c:	b933      	cbnz	r3, 800519c <_free_r+0x30>
 800518e:	6063      	str	r3, [r4, #4]
 8005190:	6014      	str	r4, [r2, #0]
 8005192:	b003      	add	sp, #12
 8005194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005198:	f000 b8da 	b.w	8005350 <__malloc_unlock>
 800519c:	42a3      	cmp	r3, r4
 800519e:	d908      	bls.n	80051b2 <_free_r+0x46>
 80051a0:	6825      	ldr	r5, [r4, #0]
 80051a2:	1961      	adds	r1, r4, r5
 80051a4:	428b      	cmp	r3, r1
 80051a6:	bf01      	itttt	eq
 80051a8:	6819      	ldreq	r1, [r3, #0]
 80051aa:	685b      	ldreq	r3, [r3, #4]
 80051ac:	1949      	addeq	r1, r1, r5
 80051ae:	6021      	streq	r1, [r4, #0]
 80051b0:	e7ed      	b.n	800518e <_free_r+0x22>
 80051b2:	461a      	mov	r2, r3
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	b10b      	cbz	r3, 80051bc <_free_r+0x50>
 80051b8:	42a3      	cmp	r3, r4
 80051ba:	d9fa      	bls.n	80051b2 <_free_r+0x46>
 80051bc:	6811      	ldr	r1, [r2, #0]
 80051be:	1855      	adds	r5, r2, r1
 80051c0:	42a5      	cmp	r5, r4
 80051c2:	d10b      	bne.n	80051dc <_free_r+0x70>
 80051c4:	6824      	ldr	r4, [r4, #0]
 80051c6:	4421      	add	r1, r4
 80051c8:	1854      	adds	r4, r2, r1
 80051ca:	42a3      	cmp	r3, r4
 80051cc:	6011      	str	r1, [r2, #0]
 80051ce:	d1e0      	bne.n	8005192 <_free_r+0x26>
 80051d0:	681c      	ldr	r4, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	6053      	str	r3, [r2, #4]
 80051d6:	440c      	add	r4, r1
 80051d8:	6014      	str	r4, [r2, #0]
 80051da:	e7da      	b.n	8005192 <_free_r+0x26>
 80051dc:	d902      	bls.n	80051e4 <_free_r+0x78>
 80051de:	230c      	movs	r3, #12
 80051e0:	6003      	str	r3, [r0, #0]
 80051e2:	e7d6      	b.n	8005192 <_free_r+0x26>
 80051e4:	6825      	ldr	r5, [r4, #0]
 80051e6:	1961      	adds	r1, r4, r5
 80051e8:	428b      	cmp	r3, r1
 80051ea:	bf04      	itt	eq
 80051ec:	6819      	ldreq	r1, [r3, #0]
 80051ee:	685b      	ldreq	r3, [r3, #4]
 80051f0:	6063      	str	r3, [r4, #4]
 80051f2:	bf04      	itt	eq
 80051f4:	1949      	addeq	r1, r1, r5
 80051f6:	6021      	streq	r1, [r4, #0]
 80051f8:	6054      	str	r4, [r2, #4]
 80051fa:	e7ca      	b.n	8005192 <_free_r+0x26>
 80051fc:	b003      	add	sp, #12
 80051fe:	bd30      	pop	{r4, r5, pc}
 8005200:	20004b80 	.word	0x20004b80

08005204 <sbrk_aligned>:
 8005204:	b570      	push	{r4, r5, r6, lr}
 8005206:	4e0e      	ldr	r6, [pc, #56]	; (8005240 <sbrk_aligned+0x3c>)
 8005208:	460c      	mov	r4, r1
 800520a:	6831      	ldr	r1, [r6, #0]
 800520c:	4605      	mov	r5, r0
 800520e:	b911      	cbnz	r1, 8005216 <sbrk_aligned+0x12>
 8005210:	f000 f9d6 	bl	80055c0 <_sbrk_r>
 8005214:	6030      	str	r0, [r6, #0]
 8005216:	4621      	mov	r1, r4
 8005218:	4628      	mov	r0, r5
 800521a:	f000 f9d1 	bl	80055c0 <_sbrk_r>
 800521e:	1c43      	adds	r3, r0, #1
 8005220:	d00a      	beq.n	8005238 <sbrk_aligned+0x34>
 8005222:	1cc4      	adds	r4, r0, #3
 8005224:	f024 0403 	bic.w	r4, r4, #3
 8005228:	42a0      	cmp	r0, r4
 800522a:	d007      	beq.n	800523c <sbrk_aligned+0x38>
 800522c:	1a21      	subs	r1, r4, r0
 800522e:	4628      	mov	r0, r5
 8005230:	f000 f9c6 	bl	80055c0 <_sbrk_r>
 8005234:	3001      	adds	r0, #1
 8005236:	d101      	bne.n	800523c <sbrk_aligned+0x38>
 8005238:	f04f 34ff 	mov.w	r4, #4294967295
 800523c:	4620      	mov	r0, r4
 800523e:	bd70      	pop	{r4, r5, r6, pc}
 8005240:	20004b84 	.word	0x20004b84

08005244 <_malloc_r>:
 8005244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005248:	1ccd      	adds	r5, r1, #3
 800524a:	f025 0503 	bic.w	r5, r5, #3
 800524e:	3508      	adds	r5, #8
 8005250:	2d0c      	cmp	r5, #12
 8005252:	bf38      	it	cc
 8005254:	250c      	movcc	r5, #12
 8005256:	2d00      	cmp	r5, #0
 8005258:	4607      	mov	r7, r0
 800525a:	db01      	blt.n	8005260 <_malloc_r+0x1c>
 800525c:	42a9      	cmp	r1, r5
 800525e:	d905      	bls.n	800526c <_malloc_r+0x28>
 8005260:	230c      	movs	r3, #12
 8005262:	603b      	str	r3, [r7, #0]
 8005264:	2600      	movs	r6, #0
 8005266:	4630      	mov	r0, r6
 8005268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800526c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005340 <_malloc_r+0xfc>
 8005270:	f000 f868 	bl	8005344 <__malloc_lock>
 8005274:	f8d8 3000 	ldr.w	r3, [r8]
 8005278:	461c      	mov	r4, r3
 800527a:	bb5c      	cbnz	r4, 80052d4 <_malloc_r+0x90>
 800527c:	4629      	mov	r1, r5
 800527e:	4638      	mov	r0, r7
 8005280:	f7ff ffc0 	bl	8005204 <sbrk_aligned>
 8005284:	1c43      	adds	r3, r0, #1
 8005286:	4604      	mov	r4, r0
 8005288:	d155      	bne.n	8005336 <_malloc_r+0xf2>
 800528a:	f8d8 4000 	ldr.w	r4, [r8]
 800528e:	4626      	mov	r6, r4
 8005290:	2e00      	cmp	r6, #0
 8005292:	d145      	bne.n	8005320 <_malloc_r+0xdc>
 8005294:	2c00      	cmp	r4, #0
 8005296:	d048      	beq.n	800532a <_malloc_r+0xe6>
 8005298:	6823      	ldr	r3, [r4, #0]
 800529a:	4631      	mov	r1, r6
 800529c:	4638      	mov	r0, r7
 800529e:	eb04 0903 	add.w	r9, r4, r3
 80052a2:	f000 f98d 	bl	80055c0 <_sbrk_r>
 80052a6:	4581      	cmp	r9, r0
 80052a8:	d13f      	bne.n	800532a <_malloc_r+0xe6>
 80052aa:	6821      	ldr	r1, [r4, #0]
 80052ac:	1a6d      	subs	r5, r5, r1
 80052ae:	4629      	mov	r1, r5
 80052b0:	4638      	mov	r0, r7
 80052b2:	f7ff ffa7 	bl	8005204 <sbrk_aligned>
 80052b6:	3001      	adds	r0, #1
 80052b8:	d037      	beq.n	800532a <_malloc_r+0xe6>
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	442b      	add	r3, r5
 80052be:	6023      	str	r3, [r4, #0]
 80052c0:	f8d8 3000 	ldr.w	r3, [r8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d038      	beq.n	800533a <_malloc_r+0xf6>
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	42a2      	cmp	r2, r4
 80052cc:	d12b      	bne.n	8005326 <_malloc_r+0xe2>
 80052ce:	2200      	movs	r2, #0
 80052d0:	605a      	str	r2, [r3, #4]
 80052d2:	e00f      	b.n	80052f4 <_malloc_r+0xb0>
 80052d4:	6822      	ldr	r2, [r4, #0]
 80052d6:	1b52      	subs	r2, r2, r5
 80052d8:	d41f      	bmi.n	800531a <_malloc_r+0xd6>
 80052da:	2a0b      	cmp	r2, #11
 80052dc:	d917      	bls.n	800530e <_malloc_r+0xca>
 80052de:	1961      	adds	r1, r4, r5
 80052e0:	42a3      	cmp	r3, r4
 80052e2:	6025      	str	r5, [r4, #0]
 80052e4:	bf18      	it	ne
 80052e6:	6059      	strne	r1, [r3, #4]
 80052e8:	6863      	ldr	r3, [r4, #4]
 80052ea:	bf08      	it	eq
 80052ec:	f8c8 1000 	streq.w	r1, [r8]
 80052f0:	5162      	str	r2, [r4, r5]
 80052f2:	604b      	str	r3, [r1, #4]
 80052f4:	4638      	mov	r0, r7
 80052f6:	f104 060b 	add.w	r6, r4, #11
 80052fa:	f000 f829 	bl	8005350 <__malloc_unlock>
 80052fe:	f026 0607 	bic.w	r6, r6, #7
 8005302:	1d23      	adds	r3, r4, #4
 8005304:	1af2      	subs	r2, r6, r3
 8005306:	d0ae      	beq.n	8005266 <_malloc_r+0x22>
 8005308:	1b9b      	subs	r3, r3, r6
 800530a:	50a3      	str	r3, [r4, r2]
 800530c:	e7ab      	b.n	8005266 <_malloc_r+0x22>
 800530e:	42a3      	cmp	r3, r4
 8005310:	6862      	ldr	r2, [r4, #4]
 8005312:	d1dd      	bne.n	80052d0 <_malloc_r+0x8c>
 8005314:	f8c8 2000 	str.w	r2, [r8]
 8005318:	e7ec      	b.n	80052f4 <_malloc_r+0xb0>
 800531a:	4623      	mov	r3, r4
 800531c:	6864      	ldr	r4, [r4, #4]
 800531e:	e7ac      	b.n	800527a <_malloc_r+0x36>
 8005320:	4634      	mov	r4, r6
 8005322:	6876      	ldr	r6, [r6, #4]
 8005324:	e7b4      	b.n	8005290 <_malloc_r+0x4c>
 8005326:	4613      	mov	r3, r2
 8005328:	e7cc      	b.n	80052c4 <_malloc_r+0x80>
 800532a:	230c      	movs	r3, #12
 800532c:	603b      	str	r3, [r7, #0]
 800532e:	4638      	mov	r0, r7
 8005330:	f000 f80e 	bl	8005350 <__malloc_unlock>
 8005334:	e797      	b.n	8005266 <_malloc_r+0x22>
 8005336:	6025      	str	r5, [r4, #0]
 8005338:	e7dc      	b.n	80052f4 <_malloc_r+0xb0>
 800533a:	605b      	str	r3, [r3, #4]
 800533c:	deff      	udf	#255	; 0xff
 800533e:	bf00      	nop
 8005340:	20004b80 	.word	0x20004b80

08005344 <__malloc_lock>:
 8005344:	4801      	ldr	r0, [pc, #4]	; (800534c <__malloc_lock+0x8>)
 8005346:	f7ff bf00 	b.w	800514a <__retarget_lock_acquire_recursive>
 800534a:	bf00      	nop
 800534c:	20004b7c 	.word	0x20004b7c

08005350 <__malloc_unlock>:
 8005350:	4801      	ldr	r0, [pc, #4]	; (8005358 <__malloc_unlock+0x8>)
 8005352:	f7ff befb 	b.w	800514c <__retarget_lock_release_recursive>
 8005356:	bf00      	nop
 8005358:	20004b7c 	.word	0x20004b7c

0800535c <__sflush_r>:
 800535c:	898a      	ldrh	r2, [r1, #12]
 800535e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005362:	4605      	mov	r5, r0
 8005364:	0710      	lsls	r0, r2, #28
 8005366:	460c      	mov	r4, r1
 8005368:	d458      	bmi.n	800541c <__sflush_r+0xc0>
 800536a:	684b      	ldr	r3, [r1, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	dc05      	bgt.n	800537c <__sflush_r+0x20>
 8005370:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	dc02      	bgt.n	800537c <__sflush_r+0x20>
 8005376:	2000      	movs	r0, #0
 8005378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800537c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800537e:	2e00      	cmp	r6, #0
 8005380:	d0f9      	beq.n	8005376 <__sflush_r+0x1a>
 8005382:	2300      	movs	r3, #0
 8005384:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005388:	682f      	ldr	r7, [r5, #0]
 800538a:	6a21      	ldr	r1, [r4, #32]
 800538c:	602b      	str	r3, [r5, #0]
 800538e:	d032      	beq.n	80053f6 <__sflush_r+0x9a>
 8005390:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005392:	89a3      	ldrh	r3, [r4, #12]
 8005394:	075a      	lsls	r2, r3, #29
 8005396:	d505      	bpl.n	80053a4 <__sflush_r+0x48>
 8005398:	6863      	ldr	r3, [r4, #4]
 800539a:	1ac0      	subs	r0, r0, r3
 800539c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800539e:	b10b      	cbz	r3, 80053a4 <__sflush_r+0x48>
 80053a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053a2:	1ac0      	subs	r0, r0, r3
 80053a4:	2300      	movs	r3, #0
 80053a6:	4602      	mov	r2, r0
 80053a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053aa:	6a21      	ldr	r1, [r4, #32]
 80053ac:	4628      	mov	r0, r5
 80053ae:	47b0      	blx	r6
 80053b0:	1c43      	adds	r3, r0, #1
 80053b2:	89a3      	ldrh	r3, [r4, #12]
 80053b4:	d106      	bne.n	80053c4 <__sflush_r+0x68>
 80053b6:	6829      	ldr	r1, [r5, #0]
 80053b8:	291d      	cmp	r1, #29
 80053ba:	d82b      	bhi.n	8005414 <__sflush_r+0xb8>
 80053bc:	4a29      	ldr	r2, [pc, #164]	; (8005464 <__sflush_r+0x108>)
 80053be:	410a      	asrs	r2, r1
 80053c0:	07d6      	lsls	r6, r2, #31
 80053c2:	d427      	bmi.n	8005414 <__sflush_r+0xb8>
 80053c4:	2200      	movs	r2, #0
 80053c6:	6062      	str	r2, [r4, #4]
 80053c8:	04d9      	lsls	r1, r3, #19
 80053ca:	6922      	ldr	r2, [r4, #16]
 80053cc:	6022      	str	r2, [r4, #0]
 80053ce:	d504      	bpl.n	80053da <__sflush_r+0x7e>
 80053d0:	1c42      	adds	r2, r0, #1
 80053d2:	d101      	bne.n	80053d8 <__sflush_r+0x7c>
 80053d4:	682b      	ldr	r3, [r5, #0]
 80053d6:	b903      	cbnz	r3, 80053da <__sflush_r+0x7e>
 80053d8:	6560      	str	r0, [r4, #84]	; 0x54
 80053da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053dc:	602f      	str	r7, [r5, #0]
 80053de:	2900      	cmp	r1, #0
 80053e0:	d0c9      	beq.n	8005376 <__sflush_r+0x1a>
 80053e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053e6:	4299      	cmp	r1, r3
 80053e8:	d002      	beq.n	80053f0 <__sflush_r+0x94>
 80053ea:	4628      	mov	r0, r5
 80053ec:	f7ff febe 	bl	800516c <_free_r>
 80053f0:	2000      	movs	r0, #0
 80053f2:	6360      	str	r0, [r4, #52]	; 0x34
 80053f4:	e7c0      	b.n	8005378 <__sflush_r+0x1c>
 80053f6:	2301      	movs	r3, #1
 80053f8:	4628      	mov	r0, r5
 80053fa:	47b0      	blx	r6
 80053fc:	1c41      	adds	r1, r0, #1
 80053fe:	d1c8      	bne.n	8005392 <__sflush_r+0x36>
 8005400:	682b      	ldr	r3, [r5, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0c5      	beq.n	8005392 <__sflush_r+0x36>
 8005406:	2b1d      	cmp	r3, #29
 8005408:	d001      	beq.n	800540e <__sflush_r+0xb2>
 800540a:	2b16      	cmp	r3, #22
 800540c:	d101      	bne.n	8005412 <__sflush_r+0xb6>
 800540e:	602f      	str	r7, [r5, #0]
 8005410:	e7b1      	b.n	8005376 <__sflush_r+0x1a>
 8005412:	89a3      	ldrh	r3, [r4, #12]
 8005414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005418:	81a3      	strh	r3, [r4, #12]
 800541a:	e7ad      	b.n	8005378 <__sflush_r+0x1c>
 800541c:	690f      	ldr	r7, [r1, #16]
 800541e:	2f00      	cmp	r7, #0
 8005420:	d0a9      	beq.n	8005376 <__sflush_r+0x1a>
 8005422:	0793      	lsls	r3, r2, #30
 8005424:	680e      	ldr	r6, [r1, #0]
 8005426:	bf08      	it	eq
 8005428:	694b      	ldreq	r3, [r1, #20]
 800542a:	600f      	str	r7, [r1, #0]
 800542c:	bf18      	it	ne
 800542e:	2300      	movne	r3, #0
 8005430:	eba6 0807 	sub.w	r8, r6, r7
 8005434:	608b      	str	r3, [r1, #8]
 8005436:	f1b8 0f00 	cmp.w	r8, #0
 800543a:	dd9c      	ble.n	8005376 <__sflush_r+0x1a>
 800543c:	6a21      	ldr	r1, [r4, #32]
 800543e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005440:	4643      	mov	r3, r8
 8005442:	463a      	mov	r2, r7
 8005444:	4628      	mov	r0, r5
 8005446:	47b0      	blx	r6
 8005448:	2800      	cmp	r0, #0
 800544a:	dc06      	bgt.n	800545a <__sflush_r+0xfe>
 800544c:	89a3      	ldrh	r3, [r4, #12]
 800544e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005452:	81a3      	strh	r3, [r4, #12]
 8005454:	f04f 30ff 	mov.w	r0, #4294967295
 8005458:	e78e      	b.n	8005378 <__sflush_r+0x1c>
 800545a:	4407      	add	r7, r0
 800545c:	eba8 0800 	sub.w	r8, r8, r0
 8005460:	e7e9      	b.n	8005436 <__sflush_r+0xda>
 8005462:	bf00      	nop
 8005464:	dfbffffe 	.word	0xdfbffffe

08005468 <_fflush_r>:
 8005468:	b538      	push	{r3, r4, r5, lr}
 800546a:	690b      	ldr	r3, [r1, #16]
 800546c:	4605      	mov	r5, r0
 800546e:	460c      	mov	r4, r1
 8005470:	b913      	cbnz	r3, 8005478 <_fflush_r+0x10>
 8005472:	2500      	movs	r5, #0
 8005474:	4628      	mov	r0, r5
 8005476:	bd38      	pop	{r3, r4, r5, pc}
 8005478:	b118      	cbz	r0, 8005482 <_fflush_r+0x1a>
 800547a:	6a03      	ldr	r3, [r0, #32]
 800547c:	b90b      	cbnz	r3, 8005482 <_fflush_r+0x1a>
 800547e:	f7ff fc81 	bl	8004d84 <__sinit>
 8005482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0f3      	beq.n	8005472 <_fflush_r+0xa>
 800548a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800548c:	07d0      	lsls	r0, r2, #31
 800548e:	d404      	bmi.n	800549a <_fflush_r+0x32>
 8005490:	0599      	lsls	r1, r3, #22
 8005492:	d402      	bmi.n	800549a <_fflush_r+0x32>
 8005494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005496:	f7ff fe58 	bl	800514a <__retarget_lock_acquire_recursive>
 800549a:	4628      	mov	r0, r5
 800549c:	4621      	mov	r1, r4
 800549e:	f7ff ff5d 	bl	800535c <__sflush_r>
 80054a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054a4:	07da      	lsls	r2, r3, #31
 80054a6:	4605      	mov	r5, r0
 80054a8:	d4e4      	bmi.n	8005474 <_fflush_r+0xc>
 80054aa:	89a3      	ldrh	r3, [r4, #12]
 80054ac:	059b      	lsls	r3, r3, #22
 80054ae:	d4e1      	bmi.n	8005474 <_fflush_r+0xc>
 80054b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054b2:	f7ff fe4b 	bl	800514c <__retarget_lock_release_recursive>
 80054b6:	e7dd      	b.n	8005474 <_fflush_r+0xc>

080054b8 <__swhatbuf_r>:
 80054b8:	b570      	push	{r4, r5, r6, lr}
 80054ba:	460c      	mov	r4, r1
 80054bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054c0:	2900      	cmp	r1, #0
 80054c2:	b096      	sub	sp, #88	; 0x58
 80054c4:	4615      	mov	r5, r2
 80054c6:	461e      	mov	r6, r3
 80054c8:	da0d      	bge.n	80054e6 <__swhatbuf_r+0x2e>
 80054ca:	89a3      	ldrh	r3, [r4, #12]
 80054cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80054d0:	f04f 0100 	mov.w	r1, #0
 80054d4:	bf0c      	ite	eq
 80054d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80054da:	2340      	movne	r3, #64	; 0x40
 80054dc:	2000      	movs	r0, #0
 80054de:	6031      	str	r1, [r6, #0]
 80054e0:	602b      	str	r3, [r5, #0]
 80054e2:	b016      	add	sp, #88	; 0x58
 80054e4:	bd70      	pop	{r4, r5, r6, pc}
 80054e6:	466a      	mov	r2, sp
 80054e8:	f000 f848 	bl	800557c <_fstat_r>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	dbec      	blt.n	80054ca <__swhatbuf_r+0x12>
 80054f0:	9901      	ldr	r1, [sp, #4]
 80054f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80054f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80054fa:	4259      	negs	r1, r3
 80054fc:	4159      	adcs	r1, r3
 80054fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005502:	e7eb      	b.n	80054dc <__swhatbuf_r+0x24>

08005504 <__smakebuf_r>:
 8005504:	898b      	ldrh	r3, [r1, #12]
 8005506:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005508:	079d      	lsls	r5, r3, #30
 800550a:	4606      	mov	r6, r0
 800550c:	460c      	mov	r4, r1
 800550e:	d507      	bpl.n	8005520 <__smakebuf_r+0x1c>
 8005510:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	6123      	str	r3, [r4, #16]
 8005518:	2301      	movs	r3, #1
 800551a:	6163      	str	r3, [r4, #20]
 800551c:	b002      	add	sp, #8
 800551e:	bd70      	pop	{r4, r5, r6, pc}
 8005520:	ab01      	add	r3, sp, #4
 8005522:	466a      	mov	r2, sp
 8005524:	f7ff ffc8 	bl	80054b8 <__swhatbuf_r>
 8005528:	9900      	ldr	r1, [sp, #0]
 800552a:	4605      	mov	r5, r0
 800552c:	4630      	mov	r0, r6
 800552e:	f7ff fe89 	bl	8005244 <_malloc_r>
 8005532:	b948      	cbnz	r0, 8005548 <__smakebuf_r+0x44>
 8005534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005538:	059a      	lsls	r2, r3, #22
 800553a:	d4ef      	bmi.n	800551c <__smakebuf_r+0x18>
 800553c:	f023 0303 	bic.w	r3, r3, #3
 8005540:	f043 0302 	orr.w	r3, r3, #2
 8005544:	81a3      	strh	r3, [r4, #12]
 8005546:	e7e3      	b.n	8005510 <__smakebuf_r+0xc>
 8005548:	89a3      	ldrh	r3, [r4, #12]
 800554a:	6020      	str	r0, [r4, #0]
 800554c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005550:	81a3      	strh	r3, [r4, #12]
 8005552:	9b00      	ldr	r3, [sp, #0]
 8005554:	6163      	str	r3, [r4, #20]
 8005556:	9b01      	ldr	r3, [sp, #4]
 8005558:	6120      	str	r0, [r4, #16]
 800555a:	b15b      	cbz	r3, 8005574 <__smakebuf_r+0x70>
 800555c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005560:	4630      	mov	r0, r6
 8005562:	f000 f81d 	bl	80055a0 <_isatty_r>
 8005566:	b128      	cbz	r0, 8005574 <__smakebuf_r+0x70>
 8005568:	89a3      	ldrh	r3, [r4, #12]
 800556a:	f023 0303 	bic.w	r3, r3, #3
 800556e:	f043 0301 	orr.w	r3, r3, #1
 8005572:	81a3      	strh	r3, [r4, #12]
 8005574:	89a3      	ldrh	r3, [r4, #12]
 8005576:	431d      	orrs	r5, r3
 8005578:	81a5      	strh	r5, [r4, #12]
 800557a:	e7cf      	b.n	800551c <__smakebuf_r+0x18>

0800557c <_fstat_r>:
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	4d07      	ldr	r5, [pc, #28]	; (800559c <_fstat_r+0x20>)
 8005580:	2300      	movs	r3, #0
 8005582:	4604      	mov	r4, r0
 8005584:	4608      	mov	r0, r1
 8005586:	4611      	mov	r1, r2
 8005588:	602b      	str	r3, [r5, #0]
 800558a:	f7fb f985 	bl	8000898 <_fstat>
 800558e:	1c43      	adds	r3, r0, #1
 8005590:	d102      	bne.n	8005598 <_fstat_r+0x1c>
 8005592:	682b      	ldr	r3, [r5, #0]
 8005594:	b103      	cbz	r3, 8005598 <_fstat_r+0x1c>
 8005596:	6023      	str	r3, [r4, #0]
 8005598:	bd38      	pop	{r3, r4, r5, pc}
 800559a:	bf00      	nop
 800559c:	20004b78 	.word	0x20004b78

080055a0 <_isatty_r>:
 80055a0:	b538      	push	{r3, r4, r5, lr}
 80055a2:	4d06      	ldr	r5, [pc, #24]	; (80055bc <_isatty_r+0x1c>)
 80055a4:	2300      	movs	r3, #0
 80055a6:	4604      	mov	r4, r0
 80055a8:	4608      	mov	r0, r1
 80055aa:	602b      	str	r3, [r5, #0]
 80055ac:	f7fb f984 	bl	80008b8 <_isatty>
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	d102      	bne.n	80055ba <_isatty_r+0x1a>
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	b103      	cbz	r3, 80055ba <_isatty_r+0x1a>
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	bd38      	pop	{r3, r4, r5, pc}
 80055bc:	20004b78 	.word	0x20004b78

080055c0 <_sbrk_r>:
 80055c0:	b538      	push	{r3, r4, r5, lr}
 80055c2:	4d06      	ldr	r5, [pc, #24]	; (80055dc <_sbrk_r+0x1c>)
 80055c4:	2300      	movs	r3, #0
 80055c6:	4604      	mov	r4, r0
 80055c8:	4608      	mov	r0, r1
 80055ca:	602b      	str	r3, [r5, #0]
 80055cc:	f7fb f98c 	bl	80008e8 <_sbrk>
 80055d0:	1c43      	adds	r3, r0, #1
 80055d2:	d102      	bne.n	80055da <_sbrk_r+0x1a>
 80055d4:	682b      	ldr	r3, [r5, #0]
 80055d6:	b103      	cbz	r3, 80055da <_sbrk_r+0x1a>
 80055d8:	6023      	str	r3, [r4, #0]
 80055da:	bd38      	pop	{r3, r4, r5, pc}
 80055dc:	20004b78 	.word	0x20004b78

080055e0 <_init>:
 80055e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e2:	bf00      	nop
 80055e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e6:	bc08      	pop	{r3}
 80055e8:	469e      	mov	lr, r3
 80055ea:	4770      	bx	lr

080055ec <_fini>:
 80055ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ee:	bf00      	nop
 80055f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f2:	bc08      	pop	{r3}
 80055f4:	469e      	mov	lr, r3
 80055f6:	4770      	bx	lr
