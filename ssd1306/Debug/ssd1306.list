
ssd1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005008  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005688  080051a0  080051a0  000151a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a828  0800a828  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800a828  0800a828  0001a828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a830  0800a830  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a830  0800a830  0001a830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a834  0800a834  0001a834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800a838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a4  20000014  0800a84c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b8  0800a84c  000206b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e600  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000251b  00000000  00000000  0002e687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  00030ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009a9  00000000  00000000  00031828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b93  00000000  00000000  000321d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000121ad  00000000  00000000  00049d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094dd2  00000000  00000000  0005bf11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003374  00000000  00000000  000f0ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000f4058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005188 	.word	0x08005188

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08005188 	.word	0x08005188

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <gethanimage>:
char HBUF[32];
char EBUF[16];

// 2byte(16bit)의 한글 처리
// 1bit(한1영0) + 5bit(초성) + 5bit(중성) + 5bit(종성)
char *gethanimage(unsigned char hanx1, unsigned char hanx2) {
 80004d4:	b4b0      	push	{r4, r5, r7}
 80004d6:	b087      	sub	sp, #28
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	460a      	mov	r2, r1
 80004de:	71fb      	strb	r3, [r7, #7]
 80004e0:	4613      	mov	r3, r2
 80004e2:	71bb      	strb	r3, [r7, #6]
	unsigned char first,mid,last,b1,b2,b3,i;
	unsigned short c;

	c = (unsigned short)(((unsigned short)hanx1 <<(unsigned short)8) | (unsigned short)hanx2);  // 8bit 2byte를 16bit 1byte로 변환
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	021b      	lsls	r3, r3, #8
 80004e8:	b21a      	sxth	r2, r3
 80004ea:	79bb      	ldrb	r3, [r7, #6]
 80004ec:	b21b      	sxth	r3, r3
 80004ee:	4313      	orrs	r3, r2
 80004f0:	b21b      	sxth	r3, r3
 80004f2:	827b      	strh	r3, [r7, #18]
	
   	for(i=0; i<32; i++) HBUF[i] = 0x00;
 80004f4:	2300      	movs	r3, #0
 80004f6:	757b      	strb	r3, [r7, #21]
 80004f8:	e006      	b.n	8000508 <gethanimage+0x34>
 80004fa:	7d7b      	ldrb	r3, [r7, #21]
 80004fc:	4a57      	ldr	r2, [pc, #348]	; (800065c <gethanimage+0x188>)
 80004fe:	2100      	movs	r1, #0
 8000500:	54d1      	strb	r1, [r2, r3]
 8000502:	7d7b      	ldrb	r3, [r7, #21]
 8000504:	3301      	adds	r3, #1
 8000506:	757b      	strb	r3, [r7, #21]
 8000508:	7d7b      	ldrb	r3, [r7, #21]
 800050a:	2b1f      	cmp	r3, #31
 800050c:	d9f5      	bls.n	80004fa <gethanimage+0x26>
        
    first = (c>>10)& 0x1f;		    // 초성을 분리해냄.  
 800050e:	8a7b      	ldrh	r3, [r7, #18]
 8000510:	0a9b      	lsrs	r3, r3, #10
 8000512:	b29b      	uxth	r3, r3
 8000514:	b2db      	uxtb	r3, r3
 8000516:	f003 031f 	and.w	r3, r3, #31
 800051a:	747b      	strb	r3, [r7, #17]
    mid   = (c>>5) & 0x1f;          // 중성을 분리해냄.  
 800051c:	8a7b      	ldrh	r3, [r7, #18]
 800051e:	095b      	lsrs	r3, r3, #5
 8000520:	b29b      	uxth	r3, r3
 8000522:	b2db      	uxtb	r3, r3
 8000524:	f003 031f 	and.w	r3, r3, #31
 8000528:	743b      	strb	r3, [r7, #16]
    last  =  c     & 0x1f;		    // 종성 코드값.
 800052a:	8a7b      	ldrh	r3, [r7, #18]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	f003 031f 	and.w	r3, r3, #31
 8000532:	73fb      	strb	r3, [r7, #15]
    					            // 꼴의 위치를 결정.  
    first =  table[0][first];
 8000534:	7c7b      	ldrb	r3, [r7, #17]
 8000536:	4a4a      	ldr	r2, [pc, #296]	; (8000660 <gethanimage+0x18c>)
 8000538:	5cd3      	ldrb	r3, [r2, r3]
 800053a:	747b      	strb	r3, [r7, #17]
    mid   =  table[1][mid]; 		// 중성 글꼴의 위치를 결정.  
 800053c:	7c3b      	ldrb	r3, [r7, #16]
 800053e:	4a48      	ldr	r2, [pc, #288]	; (8000660 <gethanimage+0x18c>)
 8000540:	4413      	add	r3, r2
 8000542:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000546:	743b      	strb	r3, [r7, #16]
    last  =  table[2][last]; 		// 종성 글꼴의 위치를 결정.   
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	4a45      	ldr	r2, [pc, #276]	; (8000660 <gethanimage+0x18c>)
 800054c:	4413      	add	r3, r2
 800054e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000552:	73fb      	strb	r3, [r7, #15]
    
    b3 = midtable[0][mid]; 		    // 중성으로 종성의 벌수 결정.  
 8000554:	7c3b      	ldrb	r3, [r7, #16]
 8000556:	4a43      	ldr	r2, [pc, #268]	; (8000664 <gethanimage+0x190>)
 8000558:	5cd3      	ldrb	r3, [r2, r3]
 800055a:	73bb      	strb	r3, [r7, #14]
    if (!last) { 					// 종성이 없는 경우.  
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d109      	bne.n	8000576 <gethanimage+0xa2>
        b2 = fsttable[0][first];  	// 초성으로 중성 결정.  
 8000562:	7c7b      	ldrb	r3, [r7, #17]
 8000564:	4a40      	ldr	r2, [pc, #256]	; (8000668 <gethanimage+0x194>)
 8000566:	5cd3      	ldrb	r3, [r2, r3]
 8000568:	75bb      	strb	r3, [r7, #22]
        b1 = midtable[1][mid];  	// 중성으로 초성 결정.  
 800056a:	7c3b      	ldrb	r3, [r7, #16]
 800056c:	4a3d      	ldr	r2, [pc, #244]	; (8000664 <gethanimage+0x190>)
 800056e:	4413      	add	r3, r2
 8000570:	7d9b      	ldrb	r3, [r3, #22]
 8000572:	75fb      	strb	r3, [r7, #23]
 8000574:	e00a      	b.n	800058c <gethanimage+0xb8>
    } 
    else {  					    // 종성이 있는 경우.  
        b2 = fsttable[1][first];  	// 초성으로 중성 결정.  
 8000576:	7c7b      	ldrb	r3, [r7, #17]
 8000578:	4a3b      	ldr	r2, [pc, #236]	; (8000668 <gethanimage+0x194>)
 800057a:	4413      	add	r3, r2
 800057c:	7d1b      	ldrb	r3, [r3, #20]
 800057e:	75bb      	strb	r3, [r7, #22]
        b1 = midtable[2][mid];  	// 중성으로 초성 결정.  
 8000580:	7c3b      	ldrb	r3, [r7, #16]
 8000582:	4a38      	ldr	r2, [pc, #224]	; (8000664 <gethanimage+0x190>)
 8000584:	4413      	add	r3, r2
 8000586:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800058a:	75fb      	strb	r3, [r7, #23]
    }

    if (first) {  
 800058c:	7c7b      	ldrb	r3, [r7, #17]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d01d      	beq.n	80005ce <gethanimage+0xfa>
        for(i=0; i<32; i++)
 8000592:	2300      	movs	r3, #0
 8000594:	757b      	strb	r3, [r7, #21]
 8000596:	e017      	b.n	80005c8 <gethanimage+0xf4>
            HBUF[i] |= HAN1[b1][first][i];  
 8000598:	7d7b      	ldrb	r3, [r7, #21]
 800059a:	4a30      	ldr	r2, [pc, #192]	; (800065c <gethanimage+0x188>)
 800059c:	5cd1      	ldrb	r1, [r2, r3]
 800059e:	7dfa      	ldrb	r2, [r7, #23]
 80005a0:	7c7c      	ldrb	r4, [r7, #17]
 80005a2:	7d78      	ldrb	r0, [r7, #21]
 80005a4:	4d31      	ldr	r5, [pc, #196]	; (800066c <gethanimage+0x198>)
 80005a6:	4613      	mov	r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	4413      	add	r3, r2
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	4423      	add	r3, r4
 80005b0:	015b      	lsls	r3, r3, #5
 80005b2:	442b      	add	r3, r5
 80005b4:	4403      	add	r3, r0
 80005b6:	781a      	ldrb	r2, [r3, #0]
 80005b8:	7d7b      	ldrb	r3, [r7, #21]
 80005ba:	430a      	orrs	r2, r1
 80005bc:	b2d1      	uxtb	r1, r2
 80005be:	4a27      	ldr	r2, [pc, #156]	; (800065c <gethanimage+0x188>)
 80005c0:	54d1      	strb	r1, [r2, r3]
        for(i=0; i<32; i++)
 80005c2:	7d7b      	ldrb	r3, [r7, #21]
 80005c4:	3301      	adds	r3, #1
 80005c6:	757b      	strb	r3, [r7, #21]
 80005c8:	7d7b      	ldrb	r3, [r7, #21]
 80005ca:	2b1f      	cmp	r3, #31
 80005cc:	d9e4      	bls.n	8000598 <gethanimage+0xc4>
    }		
      
    if (mid) {  
 80005ce:	7c3b      	ldrb	r3, [r7, #16]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d01c      	beq.n	800060e <gethanimage+0x13a>
        for(i=0; i<32; i++)
 80005d4:	2300      	movs	r3, #0
 80005d6:	757b      	strb	r3, [r7, #21]
 80005d8:	e016      	b.n	8000608 <gethanimage+0x134>
            HBUF[i] |= HAN2[b2][mid][i];  
 80005da:	7d7b      	ldrb	r3, [r7, #21]
 80005dc:	4a1f      	ldr	r2, [pc, #124]	; (800065c <gethanimage+0x188>)
 80005de:	5cd1      	ldrb	r1, [r2, r3]
 80005e0:	7db8      	ldrb	r0, [r7, #22]
 80005e2:	7c3a      	ldrb	r2, [r7, #16]
 80005e4:	7d7b      	ldrb	r3, [r7, #21]
 80005e6:	4c22      	ldr	r4, [pc, #136]	; (8000670 <gethanimage+0x19c>)
 80005e8:	2516      	movs	r5, #22
 80005ea:	fb05 f000 	mul.w	r0, r5, r0
 80005ee:	4402      	add	r2, r0
 80005f0:	0152      	lsls	r2, r2, #5
 80005f2:	4422      	add	r2, r4
 80005f4:	4413      	add	r3, r2
 80005f6:	781a      	ldrb	r2, [r3, #0]
 80005f8:	7d7b      	ldrb	r3, [r7, #21]
 80005fa:	430a      	orrs	r2, r1
 80005fc:	b2d1      	uxtb	r1, r2
 80005fe:	4a17      	ldr	r2, [pc, #92]	; (800065c <gethanimage+0x188>)
 8000600:	54d1      	strb	r1, [r2, r3]
        for(i=0; i<32; i++)
 8000602:	7d7b      	ldrb	r3, [r7, #21]
 8000604:	3301      	adds	r3, #1
 8000606:	757b      	strb	r3, [r7, #21]
 8000608:	7d7b      	ldrb	r3, [r7, #21]
 800060a:	2b1f      	cmp	r3, #31
 800060c:	d9e5      	bls.n	80005da <gethanimage+0x106>
    }		  
    if (last) {  
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d01d      	beq.n	8000650 <gethanimage+0x17c>
        for(i=0; i<32; i++)
 8000614:	2300      	movs	r3, #0
 8000616:	757b      	strb	r3, [r7, #21]
 8000618:	e017      	b.n	800064a <gethanimage+0x176>
            HBUF[i] |= HAN3[b3][last][i];  
 800061a:	7d7b      	ldrb	r3, [r7, #21]
 800061c:	4a0f      	ldr	r2, [pc, #60]	; (800065c <gethanimage+0x188>)
 800061e:	5cd1      	ldrb	r1, [r2, r3]
 8000620:	7bba      	ldrb	r2, [r7, #14]
 8000622:	7bfc      	ldrb	r4, [r7, #15]
 8000624:	7d78      	ldrb	r0, [r7, #21]
 8000626:	4d13      	ldr	r5, [pc, #76]	; (8000674 <gethanimage+0x1a0>)
 8000628:	4613      	mov	r3, r2
 800062a:	00db      	lsls	r3, r3, #3
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	4423      	add	r3, r4
 8000632:	015b      	lsls	r3, r3, #5
 8000634:	442b      	add	r3, r5
 8000636:	4403      	add	r3, r0
 8000638:	781a      	ldrb	r2, [r3, #0]
 800063a:	7d7b      	ldrb	r3, [r7, #21]
 800063c:	430a      	orrs	r2, r1
 800063e:	b2d1      	uxtb	r1, r2
 8000640:	4a06      	ldr	r2, [pc, #24]	; (800065c <gethanimage+0x188>)
 8000642:	54d1      	strb	r1, [r2, r3]
        for(i=0; i<32; i++)
 8000644:	7d7b      	ldrb	r3, [r7, #21]
 8000646:	3301      	adds	r3, #1
 8000648:	757b      	strb	r3, [r7, #21]
 800064a:	7d7b      	ldrb	r3, [r7, #21]
 800064c:	2b1f      	cmp	r3, #31
 800064e:	d9e4      	bls.n	800061a <gethanimage+0x146>

	if ( glcdattr & LCD_REVERSE ) {
		for(i=0; i<32; i++) HBUF[i] ^= 0xff;
	}*/
              			     
	return &HBUF[0];          			        
 8000650:	4b02      	ldr	r3, [pc, #8]	; (800065c <gethanimage+0x188>)
}
 8000652:	4618      	mov	r0, r3
 8000654:	371c      	adds	r7, #28
 8000656:	46bd      	mov	sp, r7
 8000658:	bcb0      	pop	{r4, r5, r7}
 800065a:	4770      	bx	lr
 800065c:	20000030 	.word	0x20000030
 8000660:	08006438 	.word	0x08006438
 8000664:	080064c0 	.word	0x080064c0
 8000668:	08006498 	.word	0x08006498
 800066c:	08006504 	.word	0x08006504
 8000670:	08007904 	.word	0x08007904
 8000674:	08008404 	.word	0x08008404

08000678 <getascimage>:
 

char *getascimage(unsigned char c) {       
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	for(i=0; i<16; i++)
 8000682:	2300      	movs	r3, #0
 8000684:	73fb      	strb	r3, [r7, #15]
 8000686:	e006      	b.n	8000696 <getascimage+0x1e>
 	EBUF[i] &= 0x00;
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	4a11      	ldr	r2, [pc, #68]	; (80006d0 <getascimage+0x58>)
 800068c:	2100      	movs	r1, #0
 800068e:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<16; i++)
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	3301      	adds	r3, #1
 8000694:	73fb      	strb	r3, [r7, #15]
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	2b0f      	cmp	r3, #15
 800069a:	d9f5      	bls.n	8000688 <getascimage+0x10>
	
	for(i=0; i<16; i++) EBUF[i] = eng_font2[c][i];  
 800069c:	2300      	movs	r3, #0
 800069e:	73fb      	strb	r3, [r7, #15]
 80006a0:	e00c      	b.n	80006bc <getascimage+0x44>
 80006a2:	79f9      	ldrb	r1, [r7, #7]
 80006a4:	7bfa      	ldrb	r2, [r7, #15]
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	480a      	ldr	r0, [pc, #40]	; (80006d4 <getascimage+0x5c>)
 80006aa:	0109      	lsls	r1, r1, #4
 80006ac:	4401      	add	r1, r0
 80006ae:	440a      	add	r2, r1
 80006b0:	7811      	ldrb	r1, [r2, #0]
 80006b2:	4a07      	ldr	r2, [pc, #28]	; (80006d0 <getascimage+0x58>)
 80006b4:	54d1      	strb	r1, [r2, r3]
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	3301      	adds	r3, #1
 80006ba:	73fb      	strb	r3, [r7, #15]
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	2b0f      	cmp	r3, #15
 80006c0:	d9ef      	bls.n	80006a2 <getascimage+0x2a>
	}
	if ( glcdattr & LCD_REVERSE ) {
		for(i=0; i<16; i++) EBUF[i] ^= 0xff;
	}*/
	
	return &EBUF[0];
 80006c2:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <getascimage+0x58>)
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	20000050 	.word	0x20000050
 80006d4:	08009204 	.word	0x08009204

080006d8 <hconv>:

 	return &HBUF[0];
}       

// 완성형을 조합영으로 변환
unsigned short hconv(unsigned short hhcode) {   /* ret=1 : 변환안된경우,  ret=0 : 한글변환된경우 */
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	80fb      	strh	r3, [r7, #6]
                                            /* hg한글point의 완성형을 조합형으로 1글자만으로 변환함 */
	unsigned short loc;
	unsigned char hg;
	unsigned char hg1;
	 
	hg = (hhcode & 0xff00) >> 8;
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	0a1b      	lsrs	r3, r3, #8
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	73fb      	strb	r3, [r7, #15]
	hg1 = hhcode & 0x00ff;
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	73bb      	strb	r3, [r7, #14]
	 
	if(hg<0x80) return(1);
 80006ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	db01      	blt.n	80006fa <hconv+0x22>
 80006f6:	2301      	movs	r3, #1
 80006f8:	e0df      	b.n	80008ba <hconv+0x1e2>
	if(hg<0xA1 || hg1<0xA1) return(1);
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	2ba0      	cmp	r3, #160	; 0xa0
 80006fe:	d902      	bls.n	8000706 <hconv+0x2e>
 8000700:	7bbb      	ldrb	r3, [r7, #14]
 8000702:	2ba0      	cmp	r3, #160	; 0xa0
 8000704:	d801      	bhi.n	800070a <hconv+0x32>
 8000706:	2301      	movs	r3, #1
 8000708:	e0d7      	b.n	80008ba <hconv+0x1e2>
	if(hg>0xA0 && hg<0xAD) {
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	2ba0      	cmp	r3, #160	; 0xa0
 800070e:	f240 80a3 	bls.w	8000858 <hconv+0x180>
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	2bac      	cmp	r3, #172	; 0xac
 8000716:	f200 809f 	bhi.w	8000858 <hconv+0x180>
		switch(hg) {
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	3ba1      	subs	r3, #161	; 0xa1
 800071e:	2b08      	cmp	r3, #8
 8000720:	f200 8096 	bhi.w	8000850 <hconv+0x178>
 8000724:	a201      	add	r2, pc, #4	; (adr r2, 800072c <hconv+0x54>)
 8000726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072a:	bf00      	nop
 800072c:	08000751 	.word	0x08000751
 8000730:	08000781 	.word	0x08000781
 8000734:	08000793 	.word	0x08000793
 8000738:	08000851 	.word	0x08000851
 800073c:	080007c3 	.word	0x080007c3
 8000740:	080007f3 	.word	0x080007f3
 8000744:	08000851 	.word	0x08000851
 8000748:	08000805 	.word	0x08000805
 800074c:	08000817 	.word	0x08000817
			case 0xA1 :
				if(hg1>0xA1 && hg1<0xEF) { hg=0xD9; hg1=0x32+((unsigned short)(hg1-0xA2)); break; }
 8000750:	7bbb      	ldrb	r3, [r7, #14]
 8000752:	2ba1      	cmp	r3, #161	; 0xa1
 8000754:	d908      	bls.n	8000768 <hconv+0x90>
 8000756:	7bbb      	ldrb	r3, [r7, #14]
 8000758:	2bee      	cmp	r3, #238	; 0xee
 800075a:	d805      	bhi.n	8000768 <hconv+0x90>
 800075c:	23d9      	movs	r3, #217	; 0xd9
 800075e:	73fb      	strb	r3, [r7, #15]
 8000760:	7bbb      	ldrb	r3, [r7, #14]
 8000762:	3b70      	subs	r3, #112	; 0x70
 8000764:	73bb      	strb	r3, [r7, #14]
 8000766:	e077      	b.n	8000858 <hconv+0x180>
				if(hg1>0xEE && hg1<0xFF) { hg=0xD9; hg1=0x91+((unsigned short)(hg1-0xEF)); break; }
 8000768:	7bbb      	ldrb	r3, [r7, #14]
 800076a:	2bee      	cmp	r3, #238	; 0xee
 800076c:	d908      	bls.n	8000780 <hconv+0xa8>
 800076e:	7bbb      	ldrb	r3, [r7, #14]
 8000770:	2bff      	cmp	r3, #255	; 0xff
 8000772:	d005      	beq.n	8000780 <hconv+0xa8>
 8000774:	23d9      	movs	r3, #217	; 0xd9
 8000776:	73fb      	strb	r3, [r7, #15]
 8000778:	7bbb      	ldrb	r3, [r7, #14]
 800077a:	3b5e      	subs	r3, #94	; 0x5e
 800077c:	73bb      	strb	r3, [r7, #14]
 800077e:	e06b      	b.n	8000858 <hconv+0x180>
			case 0xA2 :
				if(hg1>0xA0 && hg1<0xE6) { hg=0xD9; break; }
 8000780:	7bbb      	ldrb	r3, [r7, #14]
 8000782:	2ba0      	cmp	r3, #160	; 0xa0
 8000784:	d905      	bls.n	8000792 <hconv+0xba>
 8000786:	7bbb      	ldrb	r3, [r7, #14]
 8000788:	2be5      	cmp	r3, #229	; 0xe5
 800078a:	d802      	bhi.n	8000792 <hconv+0xba>
 800078c:	23d9      	movs	r3, #217	; 0xd9
 800078e:	73fb      	strb	r3, [r7, #15]
 8000790:	e062      	b.n	8000858 <hconv+0x180>
			case 0xA3 :
				if(hg1>0xA0 && hg1<0xEF) { hg=0xDA; hg1=0x31+hg1-0xA1; break; }
 8000792:	7bbb      	ldrb	r3, [r7, #14]
 8000794:	2ba0      	cmp	r3, #160	; 0xa0
 8000796:	d908      	bls.n	80007aa <hconv+0xd2>
 8000798:	7bbb      	ldrb	r3, [r7, #14]
 800079a:	2bee      	cmp	r3, #238	; 0xee
 800079c:	d805      	bhi.n	80007aa <hconv+0xd2>
 800079e:	23da      	movs	r3, #218	; 0xda
 80007a0:	73fb      	strb	r3, [r7, #15]
 80007a2:	7bbb      	ldrb	r3, [r7, #14]
 80007a4:	3b70      	subs	r3, #112	; 0x70
 80007a6:	73bb      	strb	r3, [r7, #14]
 80007a8:	e056      	b.n	8000858 <hconv+0x180>
				if(hg1>0xEE && hg1<0xFF) { hg=0xDA; hg1=0x91+hg1-0xEF; break; }
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	2bee      	cmp	r3, #238	; 0xee
 80007ae:	d908      	bls.n	80007c2 <hconv+0xea>
 80007b0:	7bbb      	ldrb	r3, [r7, #14]
 80007b2:	2bff      	cmp	r3, #255	; 0xff
 80007b4:	d005      	beq.n	80007c2 <hconv+0xea>
 80007b6:	23da      	movs	r3, #218	; 0xda
 80007b8:	73fb      	strb	r3, [r7, #15]
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	3b5e      	subs	r3, #94	; 0x5e
 80007be:	73bb      	strb	r3, [r7, #14]
 80007c0:	e04a      	b.n	8000858 <hconv+0x180>
			case 0xA5 :
			 	if(hg1>0xA0 && hg1<0xAB) { hg=0xDB; hg1=0x31+hg1-0xA1; break; }
 80007c2:	7bbb      	ldrb	r3, [r7, #14]
 80007c4:	2ba0      	cmp	r3, #160	; 0xa0
 80007c6:	d908      	bls.n	80007da <hconv+0x102>
 80007c8:	7bbb      	ldrb	r3, [r7, #14]
 80007ca:	2baa      	cmp	r3, #170	; 0xaa
 80007cc:	d805      	bhi.n	80007da <hconv+0x102>
 80007ce:	23db      	movs	r3, #219	; 0xdb
 80007d0:	73fb      	strb	r3, [r7, #15]
 80007d2:	7bbb      	ldrb	r3, [r7, #14]
 80007d4:	3b70      	subs	r3, #112	; 0x70
 80007d6:	73bb      	strb	r3, [r7, #14]
 80007d8:	e03e      	b.n	8000858 <hconv+0x180>
				if(hg1>0xAF && hg1<0xBA) { hg=0xDB; hg1=0x40+hg1-0xB0; break; }
 80007da:	7bbb      	ldrb	r3, [r7, #14]
 80007dc:	2baf      	cmp	r3, #175	; 0xaf
 80007de:	d908      	bls.n	80007f2 <hconv+0x11a>
 80007e0:	7bbb      	ldrb	r3, [r7, #14]
 80007e2:	2bb9      	cmp	r3, #185	; 0xb9
 80007e4:	d805      	bhi.n	80007f2 <hconv+0x11a>
 80007e6:	23db      	movs	r3, #219	; 0xdb
 80007e8:	73fb      	strb	r3, [r7, #15]
 80007ea:	7bbb      	ldrb	r3, [r7, #14]
 80007ec:	3b70      	subs	r3, #112	; 0x70
 80007ee:	73bb      	strb	r3, [r7, #14]
 80007f0:	e032      	b.n	8000858 <hconv+0x180>
			case 0xA6 :
				if(hg1>0xA0 && hg1<0xE5) { hg=0xDB; break; }
 80007f2:	7bbb      	ldrb	r3, [r7, #14]
 80007f4:	2ba0      	cmp	r3, #160	; 0xa0
 80007f6:	d905      	bls.n	8000804 <hconv+0x12c>
 80007f8:	7bbb      	ldrb	r3, [r7, #14]
 80007fa:	2be4      	cmp	r3, #228	; 0xe4
 80007fc:	d802      	bhi.n	8000804 <hconv+0x12c>
 80007fe:	23db      	movs	r3, #219	; 0xdb
 8000800:	73fb      	strb	r3, [r7, #15]
 8000802:	e029      	b.n	8000858 <hconv+0x180>
			case 0xA8 :
			  	if(hg1>0xB0 && hg1<0xFF) { hg=0xDC; break; }
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	2bb0      	cmp	r3, #176	; 0xb0
 8000808:	d905      	bls.n	8000816 <hconv+0x13e>
 800080a:	7bbb      	ldrb	r3, [r7, #14]
 800080c:	2bff      	cmp	r3, #255	; 0xff
 800080e:	d002      	beq.n	8000816 <hconv+0x13e>
 8000810:	23dc      	movs	r3, #220	; 0xdc
 8000812:	73fb      	strb	r3, [r7, #15]
 8000814:	e020      	b.n	8000858 <hconv+0x180>
			case 0xA9 :
				if(hg1>0xB0 && hg1<0xEF) { hg=0xDD; hg1=0x41+hg1-0xB1; break; }
 8000816:	7bbb      	ldrb	r3, [r7, #14]
 8000818:	2bb0      	cmp	r3, #176	; 0xb0
 800081a:	d908      	bls.n	800082e <hconv+0x156>
 800081c:	7bbb      	ldrb	r3, [r7, #14]
 800081e:	2bee      	cmp	r3, #238	; 0xee
 8000820:	d805      	bhi.n	800082e <hconv+0x156>
 8000822:	23dd      	movs	r3, #221	; 0xdd
 8000824:	73fb      	strb	r3, [r7, #15]
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	3b70      	subs	r3, #112	; 0x70
 800082a:	73bb      	strb	r3, [r7, #14]
 800082c:	e014      	b.n	8000858 <hconv+0x180>
				if(hg1>0xF0 && hg1<0xFF) { hg=0xDD; hg1=0x91+hg1-0xEF; break; }
 800082e:	7bbb      	ldrb	r3, [r7, #14]
 8000830:	2bf0      	cmp	r3, #240	; 0xf0
 8000832:	d908      	bls.n	8000846 <hconv+0x16e>
 8000834:	7bbb      	ldrb	r3, [r7, #14]
 8000836:	2bff      	cmp	r3, #255	; 0xff
 8000838:	d005      	beq.n	8000846 <hconv+0x16e>
 800083a:	23dd      	movs	r3, #221	; 0xdd
 800083c:	73fb      	strb	r3, [r7, #15]
 800083e:	7bbb      	ldrb	r3, [r7, #14]
 8000840:	3b5e      	subs	r3, #94	; 0x5e
 8000842:	73bb      	strb	r3, [r7, #14]
 8000844:	e008      	b.n	8000858 <hconv+0x180>
			 	hg=' '; hg1=' '; break;
 8000846:	2320      	movs	r3, #32
 8000848:	73fb      	strb	r3, [r7, #15]
 800084a:	2320      	movs	r3, #32
 800084c:	73bb      	strb	r3, [r7, #14]
 800084e:	e003      	b.n	8000858 <hconv+0x180>
			default : hg=' '; hg1=' ';
 8000850:	2320      	movs	r3, #32
 8000852:	73fb      	strb	r3, [r7, #15]
 8000854:	2320      	movs	r3, #32
 8000856:	73bb      	strb	r3, [r7, #14]
		}
	}
	loc = (unsigned short)(hg-176)*94;
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	b29b      	uxth	r3, r3
 800085c:	461a      	mov	r2, r3
 800085e:	0052      	lsls	r2, r2, #1
 8000860:	441a      	add	r2, r3
 8000862:	0112      	lsls	r2, r2, #4
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	b29b      	uxth	r3, r3
 800086a:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 800086e:	3b20      	subs	r3, #32
 8000870:	81bb      	strh	r3, [r7, #12]
	loc+= (unsigned short)(hg1-161);
 8000872:	7bbb      	ldrb	r3, [r7, #14]
 8000874:	b29a      	uxth	r2, r3
 8000876:	89bb      	ldrh	r3, [r7, #12]
 8000878:	4413      	add	r3, r2
 800087a:	b29b      	uxth	r3, r3
 800087c:	3ba1      	subs	r3, #161	; 0xa1
 800087e:	81bb      	strh	r3, [r7, #12]
	if(loc>=2350) {
 8000880:	89bb      	ldrh	r3, [r7, #12]
 8000882:	f640 122d 	movw	r2, #2349	; 0x92d
 8000886:	4293      	cmp	r3, r2
 8000888:	d904      	bls.n	8000894 <hconv+0x1bc>
        hg=' ';
 800088a:	2320      	movs	r3, #32
 800088c:	73fb      	strb	r3, [r7, #15]
        hg1=' ';
 800088e:	2320      	movs	r3, #32
 8000890:	73bb      	strb	r3, [r7, #14]
 8000892:	e00a      	b.n	80008aa <hconv+0x1d2>
    }
	else if(loc>=0) {
        //hg = I_H_BUFFER[loc*2];
        //hg1=I_H_BUFFER[loc*2+1];
        hg = KS_Table[loc][0];
 8000894:	89bb      	ldrh	r3, [r7, #12]
 8000896:	4a0c      	ldr	r2, [pc, #48]	; (80008c8 <hconv+0x1f0>)
 8000898:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800089c:	73fb      	strb	r3, [r7, #15]
        hg1 = KS_Table[loc][1];
 800089e:	89bb      	ldrh	r3, [r7, #12]
 80008a0:	4a09      	ldr	r2, [pc, #36]	; (80008c8 <hconv+0x1f0>)
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	4413      	add	r3, r2
 80008a6:	785b      	ldrb	r3, [r3, #1]
 80008a8:	73bb      	strb	r3, [r7, #14]
    }
	 
	return (unsigned short)(((unsigned short)hg<<(unsigned short)8) | hg1);
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	7bbb      	ldrb	r3, [r7, #14]
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	4313      	orrs	r3, r2
 80008b6:	b21b      	sxth	r3, r3
 80008b8:	b29b      	uxth	r3, r3
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	080051dc 	.word	0x080051dc

080008cc <shiftBit>:
	
	//outtextxy_hanf(0, 8,hsbuff[0]);	// 잠시 기다리십시오.
	//outtextxy_hans(0,32,hsbuff[1]);	// ver. 0.10a
}

uint8_t shiftBit(uint8_t inData, int8_t pos) {
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	460a      	mov	r2, r1
 80008d6:	71fb      	strb	r3, [r7, #7]
 80008d8:	4613      	mov	r3, r2
 80008da:	71bb      	strb	r3, [r7, #6]
    uint8_t result;
    if(pos < 0) {
 80008dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	da09      	bge.n	80008f8 <shiftBit+0x2c>
        result = inData >> abs(pos);
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	bfb8      	it	lt
 80008ee:	4252      	neglt	r2, r2
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	4113      	asrs	r3, r2
 80008f4:	73fb      	strb	r3, [r7, #15]
 80008f6:	e005      	b.n	8000904 <shiftBit+0x38>
    }
    else {
        result = inData << pos;
 80008f8:	79fa      	ldrb	r2, [r7, #7]
 80008fa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	73fb      	strb	r3, [r7, #15]
    }
    return result;
 8000904:	7bfb      	ldrb	r3, [r7, #15]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <outeng>:

void outeng(uint8_t colum, uint8_t row, char eng) {
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b087      	sub	sp, #28
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
 800091e:	460b      	mov	r3, r1
 8000920:	71bb      	strb	r3, [r7, #6]
 8000922:	4613      	mov	r3, r2
 8000924:	717b      	strb	r3, [r7, #5]
	char	*image;
	
	image = getascimage(eng);
 8000926:	797b      	ldrb	r3, [r7, #5]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fea5 	bl	8000678 <getascimage>
 800092e:	60f8      	str	r0, [r7, #12]
	
    //row *= 16;
    for(int i = 0; i < 8; i++) {
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	e0a7      	b.n	8000a86 <outeng+0x172>
    	SSD1306_Buffer[colum + ((row+i)*16)] = (shiftBit(image[0], 7 - i) & 0x80) |
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	781a      	ldrb	r2, [r3, #0]
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	b2db      	uxtb	r3, r3
 800093e:	f1c3 0307 	rsb	r3, r3, #7
 8000942:	b2db      	uxtb	r3, r3
 8000944:	b25b      	sxtb	r3, r3
 8000946:	4619      	mov	r1, r3
 8000948:	4610      	mov	r0, r2
 800094a:	f7ff ffbf 	bl	80008cc <shiftBit>
 800094e:	4603      	mov	r3, r0
 8000950:	b25b      	sxtb	r3, r3
 8000952:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000956:	b25c      	sxtb	r4, r3
                                              (shiftBit(image[1], 6 - i) & 0x40) |
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	3301      	adds	r3, #1
 800095c:	781a      	ldrb	r2, [r3, #0]
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	b2db      	uxtb	r3, r3
 8000962:	f1c3 0306 	rsb	r3, r3, #6
 8000966:	b2db      	uxtb	r3, r3
 8000968:	b25b      	sxtb	r3, r3
 800096a:	4619      	mov	r1, r3
 800096c:	4610      	mov	r0, r2
 800096e:	f7ff ffad 	bl	80008cc <shiftBit>
 8000972:	4603      	mov	r3, r0
 8000974:	b25b      	sxtb	r3, r3
 8000976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800097a:	b25b      	sxtb	r3, r3
    	SSD1306_Buffer[colum + ((row+i)*16)] = (shiftBit(image[0], 7 - i) & 0x80) |
 800097c:	4323      	orrs	r3, r4
 800097e:	b25c      	sxtb	r4, r3
                                              (shiftBit(image[2], 5 - i) & 0x20) |
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3302      	adds	r3, #2
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	f1c3 0305 	rsb	r3, r3, #5
 800098e:	b2db      	uxtb	r3, r3
 8000990:	b25b      	sxtb	r3, r3
 8000992:	4619      	mov	r1, r3
 8000994:	4610      	mov	r0, r2
 8000996:	f7ff ff99 	bl	80008cc <shiftBit>
 800099a:	4603      	mov	r3, r0
 800099c:	b25b      	sxtb	r3, r3
 800099e:	f003 0320 	and.w	r3, r3, #32
 80009a2:	b25b      	sxtb	r3, r3
                                              (shiftBit(image[1], 6 - i) & 0x40) |
 80009a4:	4323      	orrs	r3, r4
 80009a6:	b25c      	sxtb	r4, r3
                                              (shiftBit(image[3], 4 - i) & 0x10) |
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	3303      	adds	r3, #3
 80009ac:	781a      	ldrb	r2, [r3, #0]
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	f1c3 0304 	rsb	r3, r3, #4
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	b25b      	sxtb	r3, r3
 80009ba:	4619      	mov	r1, r3
 80009bc:	4610      	mov	r0, r2
 80009be:	f7ff ff85 	bl	80008cc <shiftBit>
 80009c2:	4603      	mov	r3, r0
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	b25b      	sxtb	r3, r3
                                              (shiftBit(image[2], 5 - i) & 0x20) |
 80009cc:	4323      	orrs	r3, r4
 80009ce:	b25c      	sxtb	r4, r3
                                              (shiftBit(image[4], 3 - i) & 0x08) |
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3304      	adds	r3, #4
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f1c3 0303 	rsb	r3, r3, #3
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	b25b      	sxtb	r3, r3
 80009e2:	4619      	mov	r1, r3
 80009e4:	4610      	mov	r0, r2
 80009e6:	f7ff ff71 	bl	80008cc <shiftBit>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b25b      	sxtb	r3, r3
 80009ee:	f003 0308 	and.w	r3, r3, #8
 80009f2:	b25b      	sxtb	r3, r3
                                              (shiftBit(image[3], 4 - i) & 0x10) |
 80009f4:	4323      	orrs	r3, r4
 80009f6:	b25c      	sxtb	r4, r3
                                              (shiftBit(image[5], 2 - i) & 0x04) |
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	3305      	adds	r3, #5
 80009fc:	781a      	ldrb	r2, [r3, #0]
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	f1c3 0302 	rsb	r3, r3, #2
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	b25b      	sxtb	r3, r3
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4610      	mov	r0, r2
 8000a0e:	f7ff ff5d 	bl	80008cc <shiftBit>
 8000a12:	4603      	mov	r3, r0
 8000a14:	b25b      	sxtb	r3, r3
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	b25b      	sxtb	r3, r3
                                              (shiftBit(image[4], 3 - i) & 0x08) |
 8000a1c:	4323      	orrs	r3, r4
 8000a1e:	b25c      	sxtb	r4, r3
                                              (shiftBit(image[6], 1 - i) & 0x02) |
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	3306      	adds	r3, #6
 8000a24:	781a      	ldrb	r2, [r3, #0]
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	f1c3 0301 	rsb	r3, r3, #1
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	b25b      	sxtb	r3, r3
 8000a32:	4619      	mov	r1, r3
 8000a34:	4610      	mov	r0, r2
 8000a36:	f7ff ff49 	bl	80008cc <shiftBit>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	b25b      	sxtb	r3, r3
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	b25b      	sxtb	r3, r3
                                              (shiftBit(image[5], 2 - i) & 0x04) |
 8000a44:	4323      	orrs	r3, r4
 8000a46:	b25c      	sxtb	r4, r3
                                              (shiftBit(image[7], 0 - i) & 0x01);
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	3307      	adds	r3, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	697a      	ldr	r2, [r7, #20]
 8000a50:	b2d2      	uxtb	r2, r2
 8000a52:	4252      	negs	r2, r2
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	b252      	sxtb	r2, r2
 8000a58:	4611      	mov	r1, r2
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ff36 	bl	80008cc <shiftBit>
 8000a60:	4603      	mov	r3, r0
 8000a62:	b25b      	sxtb	r3, r3
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	b25b      	sxtb	r3, r3
                                              (shiftBit(image[6], 1 - i) & 0x02) |
 8000a6a:	4323      	orrs	r3, r4
 8000a6c:	b258      	sxtb	r0, r3
    	SSD1306_Buffer[colum + ((row+i)*16)] = (shiftBit(image[0], 7 - i) & 0x80) |
 8000a6e:	79fa      	ldrb	r2, [r7, #7]
 8000a70:	79b9      	ldrb	r1, [r7, #6]
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	440b      	add	r3, r1
 8000a76:	011b      	lsls	r3, r3, #4
 8000a78:	4413      	add	r3, r2
                                              (shiftBit(image[6], 1 - i) & 0x02) |
 8000a7a:	b2c1      	uxtb	r1, r0
    	SSD1306_Buffer[colum + ((row+i)*16)] = (shiftBit(image[0], 7 - i) & 0x80) |
 8000a7c:	4a5f      	ldr	r2, [pc, #380]	; (8000bfc <outeng+0x2e8>)
 8000a7e:	54d1      	strb	r1, [r2, r3]
    for(int i = 0; i < 8; i++) {
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	3301      	adds	r3, #1
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	2b07      	cmp	r3, #7
 8000a8a:	f77f af54 	ble.w	8000936 <outeng+0x22>
    }
    for(int i = 0; i < 8; i++) {
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	e0a9      	b.n	8000be8 <outeng+0x2d4>
    	SSD1306_Buffer[colum + ((row+i+8)*16)] = (shiftBit(image[8], 7 - i) & 0x80) |
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3308      	adds	r3, #8
 8000a98:	781a      	ldrb	r2, [r3, #0]
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	f1c3 0307 	rsb	r3, r3, #7
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	b25b      	sxtb	r3, r3
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4610      	mov	r0, r2
 8000aaa:	f7ff ff0f 	bl	80008cc <shiftBit>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	b25b      	sxtb	r3, r3
 8000ab2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000ab6:	b25c      	sxtb	r4, r3
                                                (shiftBit(image[9], 6 - i) & 0x40) |
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	3309      	adds	r3, #9
 8000abc:	781a      	ldrb	r2, [r3, #0]
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	f1c3 0306 	rsb	r3, r3, #6
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	b25b      	sxtb	r3, r3
 8000aca:	4619      	mov	r1, r3
 8000acc:	4610      	mov	r0, r2
 8000ace:	f7ff fefd 	bl	80008cc <shiftBit>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	b25b      	sxtb	r3, r3
 8000ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ada:	b25b      	sxtb	r3, r3
    	SSD1306_Buffer[colum + ((row+i+8)*16)] = (shiftBit(image[8], 7 - i) & 0x80) |
 8000adc:	4323      	orrs	r3, r4
 8000ade:	b25c      	sxtb	r4, r3
                                                (shiftBit(image[10], 5 - i) & 0x20) |
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	330a      	adds	r3, #10
 8000ae4:	781a      	ldrb	r2, [r3, #0]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	f1c3 0305 	rsb	r3, r3, #5
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	4619      	mov	r1, r3
 8000af4:	4610      	mov	r0, r2
 8000af6:	f7ff fee9 	bl	80008cc <shiftBit>
 8000afa:	4603      	mov	r3, r0
 8000afc:	b25b      	sxtb	r3, r3
 8000afe:	f003 0320 	and.w	r3, r3, #32
 8000b02:	b25b      	sxtb	r3, r3
                                                (shiftBit(image[9], 6 - i) & 0x40) |
 8000b04:	4323      	orrs	r3, r4
 8000b06:	b25c      	sxtb	r4, r3
                                                (shiftBit(image[11], 4 - i) & 0x10) |
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	330b      	adds	r3, #11
 8000b0c:	781a      	ldrb	r2, [r3, #0]
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	f1c3 0304 	rsb	r3, r3, #4
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	b25b      	sxtb	r3, r3
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4610      	mov	r0, r2
 8000b1e:	f7ff fed5 	bl	80008cc <shiftBit>
 8000b22:	4603      	mov	r3, r0
 8000b24:	b25b      	sxtb	r3, r3
 8000b26:	f003 0310 	and.w	r3, r3, #16
 8000b2a:	b25b      	sxtb	r3, r3
                                                (shiftBit(image[10], 5 - i) & 0x20) |
 8000b2c:	4323      	orrs	r3, r4
 8000b2e:	b25c      	sxtb	r4, r3
                                                (shiftBit(image[12], 3 - i) & 0x08) |
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	330c      	adds	r3, #12
 8000b34:	781a      	ldrb	r2, [r3, #0]
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	f1c3 0303 	rsb	r3, r3, #3
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	b25b      	sxtb	r3, r3
 8000b42:	4619      	mov	r1, r3
 8000b44:	4610      	mov	r0, r2
 8000b46:	f7ff fec1 	bl	80008cc <shiftBit>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	b25b      	sxtb	r3, r3
 8000b4e:	f003 0308 	and.w	r3, r3, #8
 8000b52:	b25b      	sxtb	r3, r3
                                                (shiftBit(image[11], 4 - i) & 0x10) |
 8000b54:	4323      	orrs	r3, r4
 8000b56:	b25c      	sxtb	r4, r3
                                                (shiftBit(image[13], 2 - i) & 0x04) |
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	330d      	adds	r3, #13
 8000b5c:	781a      	ldrb	r2, [r3, #0]
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	f1c3 0302 	rsb	r3, r3, #2
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4610      	mov	r0, r2
 8000b6e:	f7ff fead 	bl	80008cc <shiftBit>
 8000b72:	4603      	mov	r3, r0
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	f003 0304 	and.w	r3, r3, #4
 8000b7a:	b25b      	sxtb	r3, r3
                                                (shiftBit(image[12], 3 - i) & 0x08) |
 8000b7c:	4323      	orrs	r3, r4
 8000b7e:	b25c      	sxtb	r4, r3
                                                (shiftBit(image[14], 1 - i) & 0x02) |
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	330e      	adds	r3, #14
 8000b84:	781a      	ldrb	r2, [r3, #0]
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	f1c3 0301 	rsb	r3, r3, #1
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	b25b      	sxtb	r3, r3
 8000b92:	4619      	mov	r1, r3
 8000b94:	4610      	mov	r0, r2
 8000b96:	f7ff fe99 	bl	80008cc <shiftBit>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	b25b      	sxtb	r3, r3
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	b25b      	sxtb	r3, r3
                                                (shiftBit(image[13], 2 - i) & 0x04) |
 8000ba4:	4323      	orrs	r3, r4
 8000ba6:	b25c      	sxtb	r4, r3
                                                (shiftBit(image[15], 0 - i) & 0x01);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	330f      	adds	r3, #15
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	b2d2      	uxtb	r2, r2
 8000bb2:	4252      	negs	r2, r2
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	b252      	sxtb	r2, r2
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fe86 	bl	80008cc <shiftBit>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	b25b      	sxtb	r3, r3
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	b25b      	sxtb	r3, r3
                                                (shiftBit(image[14], 1 - i) & 0x02) |
 8000bca:	4323      	orrs	r3, r4
 8000bcc:	b258      	sxtb	r0, r3
    	SSD1306_Buffer[colum + ((row+i+8)*16)] = (shiftBit(image[8], 7 - i) & 0x80) |
 8000bce:	79fa      	ldrb	r2, [r7, #7]
 8000bd0:	79b9      	ldrb	r1, [r7, #6]
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	440b      	add	r3, r1
 8000bd6:	3308      	adds	r3, #8
 8000bd8:	011b      	lsls	r3, r3, #4
 8000bda:	4413      	add	r3, r2
                                                (shiftBit(image[14], 1 - i) & 0x02) |
 8000bdc:	b2c1      	uxtb	r1, r0
    	SSD1306_Buffer[colum + ((row+i+8)*16)] = (shiftBit(image[8], 7 - i) & 0x80) |
 8000bde:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <outeng+0x2e8>)
 8000be0:	54d1      	strb	r1, [r2, r3]
    for(int i = 0; i < 8; i++) {
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	3301      	adds	r3, #1
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	2b07      	cmp	r3, #7
 8000bec:	f77f af52 	ble.w	8000a94 <outeng+0x180>
    }
}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	371c      	adds	r7, #28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd90      	pop	{r4, r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200001a4 	.word	0x200001a4

08000c00 <outhan>:

void outhan(uint8_t colum, uint8_t row, unsigned char hanx1, unsigned char hanx2) {
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4604      	mov	r4, r0
 8000c08:	4608      	mov	r0, r1
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4623      	mov	r3, r4
 8000c10:	71fb      	strb	r3, [r7, #7]
 8000c12:	4603      	mov	r3, r0
 8000c14:	71bb      	strb	r3, [r7, #6]
 8000c16:	460b      	mov	r3, r1
 8000c18:	717b      	strb	r3, [r7, #5]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	713b      	strb	r3, [r7, #4]
	char	*image;
	unsigned short hh;
	
	hh = (unsigned short)((unsigned short)(hanx1)<<(unsigned short)8) | (unsigned short)hanx2;
 8000c1e:	797b      	ldrb	r3, [r7, #5]
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	021b      	lsls	r3, r3, #8
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	793b      	ldrb	r3, [r7, #4]
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	81fb      	strh	r3, [r7, #14]
	
	hh = hconv(hh); // 완성형을 조합형으로 변환
 8000c2e:	89fb      	ldrh	r3, [r7, #14]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fd51 	bl	80006d8 <hconv>
 8000c36:	4603      	mov	r3, r0
 8000c38:	81fb      	strh	r3, [r7, #14]
	
	hanx1 = (hh >> 8) & 0x00ff;
 8000c3a:	89fb      	ldrh	r3, [r7, #14]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	717b      	strb	r3, [r7, #5]
	hanx2 = hh & 0x00ff;
 8000c42:	89fb      	ldrh	r3, [r7, #14]
 8000c44:	713b      	strb	r3, [r7, #4]

	image = gethanimage(hanx1, hanx2);
 8000c46:	793a      	ldrb	r2, [r7, #4]
 8000c48:	797b      	ldrb	r3, [r7, #5]
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fc41 	bl	80004d4 <gethanimage>
 8000c52:	60b8      	str	r0, [r7, #8]
	
	memcpy(&SSD1306_Buffer[(colum*16)+(row*256)], image, 16);
 8000c54:	79fa      	ldrb	r2, [r7, #7]
 8000c56:	79bb      	ldrb	r3, [r7, #6]
 8000c58:	011b      	lsls	r3, r3, #4
 8000c5a:	4413      	add	r3, r2
 8000c5c:	011b      	lsls	r3, r3, #4
 8000c5e:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <outhan+0x94>)
 8000c60:	4413      	add	r3, r2
 8000c62:	2210      	movs	r2, #16
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f004 fa80 	bl	800516c <memcpy>
	memcpy(&SSD1306_Buffer[(colum*16)+128+(row*256)], &image[16], 16);
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	f103 0208 	add.w	r2, r3, #8
 8000c72:	79bb      	ldrb	r3, [r7, #6]
 8000c74:	011b      	lsls	r3, r3, #4
 8000c76:	4413      	add	r3, r2
 8000c78:	011b      	lsls	r3, r3, #4
 8000c7a:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <outhan+0x94>)
 8000c7c:	1898      	adds	r0, r3, r2
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	3310      	adds	r3, #16
 8000c82:	2210      	movs	r2, #16
 8000c84:	4619      	mov	r1, r3
 8000c86:	f004 fa71 	bl	800516c <memcpy>
}
 8000c8a:	bf00      	nop
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd90      	pop	{r4, r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200001a4 	.word	0x200001a4

08000c98 <outtextxy_hans>:
	while(*engbuf) {
		outeng(colum++, row, *engbuf++);
	}
}

void outtextxy_hans(uint8_t colum, uint8_t row, char *hanbuf) {
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	603a      	str	r2, [r7, #0]
 8000ca2:	71fb      	strb	r3, [r7, #7]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	71bb      	strb	r3, [r7, #6]
	unsigned char i = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	73fb      	strb	r3, [r7, #15]
    
	while(hanbuf[i]) {
 8000cac:	e029      	b.n	8000d02 <outtextxy_hans+0x6a>
		if(hanbuf[i] & 0x80) {
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	683a      	ldr	r2, [r7, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	b25b      	sxtb	r3, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	da14      	bge.n	8000ce6 <outtextxy_hans+0x4e>
			outhan(colum, row, hanbuf[i], hanbuf[i+1]);
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	781c      	ldrb	r4, [r3, #0]
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	79b9      	ldrb	r1, [r7, #6]
 8000cd0:	79f8      	ldrb	r0, [r7, #7]
 8000cd2:	4622      	mov	r2, r4
 8000cd4:	f7ff ff94 	bl	8000c00 <outhan>
      colum++;
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	71fb      	strb	r3, [r7, #7]
			i+=2;
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	3302      	adds	r3, #2
 8000ce2:	73fb      	strb	r3, [r7, #15]
 8000ce4:	e00d      	b.n	8000d02 <outtextxy_hans+0x6a>
		}
		else {  
			outeng(colum++, row, hanbuf[i]);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	1c5a      	adds	r2, r3, #1
 8000cea:	71fa      	strb	r2, [r7, #7]
 8000cec:	7bfa      	ldrb	r2, [r7, #15]
 8000cee:	6839      	ldr	r1, [r7, #0]
 8000cf0:	440a      	add	r2, r1
 8000cf2:	7812      	ldrb	r2, [r2, #0]
 8000cf4:	79b9      	ldrb	r1, [r7, #6]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fe0c 	bl	8000914 <outeng>
            i++;
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	73fb      	strb	r3, [r7, #15]
	while(hanbuf[i]) {
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	683a      	ldr	r2, [r7, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1cf      	bne.n	8000cae <outtextxy_hans+0x16>
		}
	}
}
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd90      	pop	{r4, r7, pc}

08000d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1e:	f000 fe35 	bl	800198c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d22:	f000 f83d 	bl	8000da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d26:	f000 f97b 	bl	8001020 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d2a:	f000 f959 	bl	8000fe0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000d2e:	f000 f8ff 	bl	8000f30 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000d32:	f000 f92b 	bl	8000f8c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d36:	f000 f89b 	bl	8000e70 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  initUart(&huart2);
 8000d3a:	4813      	ldr	r0, [pc, #76]	; (8000d88 <main+0x70>)
 8000d3c:	f000 fdb8 	bl	80018b0 <initUart>
  ssd1306_Init();
 8000d40:	f000 fa00 	bl	8001144 <ssd1306_Init>

  uint16_t adcValue[2];
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcValue, 2);
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2202      	movs	r2, #2
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4810      	ldr	r0, [pc, #64]	; (8000d8c <main+0x74>)
 8000d4c:	f000 fef8 	bl	8001b40 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ssd1306_SetCursor(0, 0);
 8000d50:	2100      	movs	r1, #0
 8000d52:	2000      	movs	r0, #0
 8000d54:	f000 fbda 	bl	800150c <ssd1306_SetCursor>
  ssd1306_WriteString("hello world", Font_6x8, 1);
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <main+0x78>)
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	ca06      	ldmia	r2, {r1, r2}
 8000d5e:	480d      	ldr	r0, [pc, #52]	; (8000d94 <main+0x7c>)
 8000d60:	f000 fbae 	bl	80014c0 <ssd1306_WriteString>
  outtextxy_hans(0, 0, hello);
 8000d64:	4a0c      	ldr	r2, [pc, #48]	; (8000d98 <main+0x80>)
 8000d66:	2100      	movs	r1, #0
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f7ff ff95 	bl	8000c98 <outtextxy_hans>
  outtextxy_hans(0, 1, string2);
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <main+0x84>)
 8000d70:	2101      	movs	r1, #1
 8000d72:	2000      	movs	r0, #0
 8000d74:	f7ff ff90 	bl	8000c98 <outtextxy_hans>
  ssd1306_UpdateScreen();
 8000d78:	f000 fa9e 	bl	80012b8 <ssd1306_UpdateScreen>
  ssd1306_ScrollLeft(0, 7);
 8000d7c:	2107      	movs	r1, #7
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f000 fa4a 	bl	8001218 <ssd1306_ScrollLeft>
  while(1);
 8000d84:	e7fe      	b.n	8000d84 <main+0x6c>
 8000d86:	bf00      	nop
 8000d88:	2000015c 	.word	0x2000015c
 8000d8c:	20000060 	.word	0x20000060
 8000d90:	20000000 	.word	0x20000000
 8000d94:	080051d0 	.word	0x080051d0
 8000d98:	0800a204 	.word	0x0800a204
 8000d9c:	0800a210 	.word	0x0800a210

08000da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b094      	sub	sp, #80	; 0x50
 8000da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da6:	f107 0320 	add.w	r3, r7, #32
 8000daa:	2230      	movs	r2, #48	; 0x30
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f004 f9b0 	bl	8005114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <SystemClock_Config+0xc8>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	4a26      	ldr	r2, [pc, #152]	; (8000e68 <SystemClock_Config+0xc8>)
 8000dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd4:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <SystemClock_Config+0xc8>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000de0:	2300      	movs	r3, #0
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <SystemClock_Config+0xcc>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a20      	ldr	r2, [pc, #128]	; (8000e6c <SystemClock_Config+0xcc>)
 8000dea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <SystemClock_Config+0xcc>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e00:	2301      	movs	r3, #1
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e04:	2310      	movs	r3, #16
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e10:	2308      	movs	r3, #8
 8000e12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000e14:	2364      	movs	r3, #100	; 0x64
 8000e16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e20:	f107 0320 	add.w	r3, r7, #32
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 fda9 	bl	800397c <HAL_RCC_OscConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e30:	f000 f93a 	bl	80010a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e34:	230f      	movs	r3, #15
 8000e36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	2103      	movs	r1, #3
 8000e50:	4618      	mov	r0, r3
 8000e52:	f003 f80b 	bl	8003e6c <HAL_RCC_ClockConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e5c:	f000 f924 	bl	80010a8 <Error_Handler>
  }
}
 8000e60:	bf00      	nop
 8000e62:	3750      	adds	r7, #80	; 0x50
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40007000 	.word	0x40007000

08000e70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e76:	463b      	mov	r3, r7
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e82:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <MX_ADC1_Init+0xb4>)
 8000e84:	4a28      	ldr	r2, [pc, #160]	; (8000f28 <MX_ADC1_Init+0xb8>)
 8000e86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e88:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <MX_ADC1_Init+0xb4>)
 8000e8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e90:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <MX_ADC1_Init+0xb4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e96:	4b23      	ldr	r3, [pc, #140]	; (8000f24 <MX_ADC1_Init+0xb4>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e9c:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <MX_ADC1_Init+0xb4>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ea2:	4b20      	ldr	r3, [pc, #128]	; (8000f24 <MX_ADC1_Init+0xb4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <MX_ADC1_Init+0xb4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <MX_ADC1_Init+0xb4>)
 8000eb2:	4a1e      	ldr	r2, [pc, #120]	; (8000f2c <MX_ADC1_Init+0xbc>)
 8000eb4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <MX_ADC1_Init+0xb4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <MX_ADC1_Init+0xb4>)
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <MX_ADC1_Init+0xb4>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <MX_ADC1_Init+0xb4>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ed0:	4814      	ldr	r0, [pc, #80]	; (8000f24 <MX_ADC1_Init+0xb4>)
 8000ed2:	f000 fdf1 	bl	8001ab8 <HAL_ADC_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000edc:	f000 f8e4 	bl	80010a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eec:	463b      	mov	r3, r7
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <MX_ADC1_Init+0xb4>)
 8000ef2:	f000 ff33 	bl	8001d5c <HAL_ADC_ConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000efc:	f000 f8d4 	bl	80010a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f00:	2301      	movs	r3, #1
 8000f02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_ADC1_Init+0xb4>)
 8000f0e:	f000 ff25 	bl	8001d5c <HAL_ADC_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f18:	f000 f8c6 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000060 	.word	0x20000060
 8000f28:	40012000 	.word	0x40012000
 8000f2c:	0f000001 	.word	0x0f000001

08000f30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <MX_I2C1_Init+0x50>)
 8000f36:	4a13      	ldr	r2, [pc, #76]	; (8000f84 <MX_I2C1_Init+0x54>)
 8000f38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_I2C1_Init+0x50>)
 8000f3c:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <MX_I2C1_Init+0x58>)
 8000f3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <MX_I2C1_Init+0x50>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <MX_I2C1_Init+0x50>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_I2C1_Init+0x50>)
 8000f4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f54:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <MX_I2C1_Init+0x50>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_I2C1_Init+0x50>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <MX_I2C1_Init+0x50>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_I2C1_Init+0x50>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f6c:	4804      	ldr	r0, [pc, #16]	; (8000f80 <MX_I2C1_Init+0x50>)
 8000f6e:	f002 f857 	bl	8003020 <HAL_I2C_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f78:	f000 f896 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000108 	.word	0x20000108
 8000f84:	40005400 	.word	0x40005400
 8000f88:	00061a80 	.word	0x00061a80

08000f8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_USART2_UART_Init+0x4c>)
 8000f92:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <MX_USART2_UART_Init+0x50>)
 8000f94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <MX_USART2_UART_Init+0x4c>)
 8000f98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_USART2_UART_Init+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_USART2_UART_Init+0x4c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <MX_USART2_UART_Init+0x4c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_USART2_UART_Init+0x4c>)
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <MX_USART2_UART_Init+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_USART2_UART_Init+0x4c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_USART2_UART_Init+0x4c>)
 8000fc4:	f003 f932 	bl	800422c <HAL_UART_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fce:	f000 f86b 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	2000015c 	.word	0x2000015c
 8000fdc:	40004400 	.word	0x40004400

08000fe0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <MX_DMA_Init+0x3c>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a0b      	ldr	r2, [pc, #44]	; (800101c <MX_DMA_Init+0x3c>)
 8000ff0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <MX_DMA_Init+0x3c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	2038      	movs	r0, #56	; 0x38
 8001008:	f001 fa33 	bl	8002472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800100c:	2038      	movs	r0, #56	; 0x38
 800100e:	f001 fa4c 	bl	80024aa <HAL_NVIC_EnableIRQ>

}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800

08001020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <MX_GPIO_Init+0x80>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a18      	ldr	r2, [pc, #96]	; (80010a0 <MX_GPIO_Init+0x80>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <MX_GPIO_Init+0x80>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <MX_GPIO_Init+0x80>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a11      	ldr	r2, [pc, #68]	; (80010a0 <MX_GPIO_Init+0x80>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_GPIO_Init+0x80>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001074:	480b      	ldr	r0, [pc, #44]	; (80010a4 <MX_GPIO_Init+0x84>)
 8001076:	f001 ffb9 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OledReset_Pin */
  GPIO_InitStruct.Pin = OledReset_Pin;
 800107a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800107e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OledReset_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	4619      	mov	r1, r3
 8001092:	4804      	ldr	r0, [pc, #16]	; (80010a4 <MX_GPIO_Init+0x84>)
 8001094:	f001 fe26 	bl	8002ce4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001098:	bf00      	nop
 800109a:	3720      	adds	r7, #32
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020000 	.word	0x40020000

080010a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ac:	b672      	cpsid	i
}
 80010ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <Error_Handler+0x8>
	...

080010b4 <ssd1306_Reset>:
#include <string.h>  // For memcpy
#include "main.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010be:	4807      	ldr	r0, [pc, #28]	; (80010dc <ssd1306_Reset+0x28>)
 80010c0:	f001 ff94 	bl	8002fec <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80010c4:	2001      	movs	r0, #1
 80010c6:	f000 fcd3 	bl	8001a70 <HAL_Delay>
    HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, 1);
 80010ca:	2201      	movs	r2, #1
 80010cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <ssd1306_Reset+0x28>)
 80010d2:	f001 ff8b 	bl	8002fec <HAL_GPIO_WritePin>
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40020000 	.word	0x40020000

080010e0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af04      	add	r7, sp, #16
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	9302      	str	r3, [sp, #8]
 80010f0:	2301      	movs	r3, #1
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	1dfb      	adds	r3, r7, #7
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	2200      	movs	r2, #0
 80010fc:	2178      	movs	r1, #120	; 0x78
 80010fe:	4803      	ldr	r0, [pc, #12]	; (800110c <ssd1306_WriteCommand+0x2c>)
 8001100:	f002 f8d2 	bl	80032a8 <HAL_I2C_Mem_Write>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000108 	.word	0x20000108

08001110 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af04      	add	r7, sp, #16
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b29b      	uxth	r3, r3
 800111e:	f04f 32ff 	mov.w	r2, #4294967295
 8001122:	9202      	str	r2, [sp, #8]
 8001124:	9301      	str	r3, [sp, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2301      	movs	r3, #1
 800112c:	2240      	movs	r2, #64	; 0x40
 800112e:	2178      	movs	r1, #120	; 0x78
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <ssd1306_WriteData+0x30>)
 8001132:	f002 f8b9 	bl	80032a8 <HAL_I2C_Mem_Write>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000108 	.word	0x20000108

08001144 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001148:	f7ff ffb4 	bl	80010b4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800114c:	2064      	movs	r0, #100	; 0x64
 800114e:	f000 fc8f 	bl	8001a70 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001152:	2000      	movs	r0, #0
 8001154:	f000 fa06 	bl	8001564 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001158:	2020      	movs	r0, #32
 800115a:	f7ff ffc1 	bl	80010e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800115e:	2000      	movs	r0, #0
 8001160:	f7ff ffbe 	bl	80010e0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001164:	20b0      	movs	r0, #176	; 0xb0
 8001166:	f7ff ffbb 	bl	80010e0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800116a:	20c8      	movs	r0, #200	; 0xc8
 800116c:	f7ff ffb8 	bl	80010e0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff ffb5 	bl	80010e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001176:	2010      	movs	r0, #16
 8001178:	f7ff ffb2 	bl	80010e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800117c:	2040      	movs	r0, #64	; 0x40
 800117e:	f7ff ffaf 	bl	80010e0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001182:	20ff      	movs	r0, #255	; 0xff
 8001184:	f000 f9da 	bl	800153c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001188:	20a1      	movs	r0, #161	; 0xa1
 800118a:	f7ff ffa9 	bl	80010e0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800118e:	20a6      	movs	r0, #166	; 0xa6
 8001190:	f7ff ffa6 	bl	80010e0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001194:	20a8      	movs	r0, #168	; 0xa8
 8001196:	f7ff ffa3 	bl	80010e0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800119a:	203f      	movs	r0, #63	; 0x3f
 800119c:	f7ff ffa0 	bl	80010e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80011a0:	20a4      	movs	r0, #164	; 0xa4
 80011a2:	f7ff ff9d 	bl	80010e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80011a6:	20d3      	movs	r0, #211	; 0xd3
 80011a8:	f7ff ff9a 	bl	80010e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80011ac:	2000      	movs	r0, #0
 80011ae:	f7ff ff97 	bl	80010e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80011b2:	20d5      	movs	r0, #213	; 0xd5
 80011b4:	f7ff ff94 	bl	80010e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80011b8:	20f0      	movs	r0, #240	; 0xf0
 80011ba:	f7ff ff91 	bl	80010e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80011be:	20d9      	movs	r0, #217	; 0xd9
 80011c0:	f7ff ff8e 	bl	80010e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80011c4:	2022      	movs	r0, #34	; 0x22
 80011c6:	f7ff ff8b 	bl	80010e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80011ca:	20da      	movs	r0, #218	; 0xda
 80011cc:	f7ff ff88 	bl	80010e0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80011d0:	2012      	movs	r0, #18
 80011d2:	f7ff ff85 	bl	80010e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80011d6:	20db      	movs	r0, #219	; 0xdb
 80011d8:	f7ff ff82 	bl	80010e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80011dc:	2020      	movs	r0, #32
 80011de:	f7ff ff7f 	bl	80010e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80011e2:	208d      	movs	r0, #141	; 0x8d
 80011e4:	f7ff ff7c 	bl	80010e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80011e8:	2014      	movs	r0, #20
 80011ea:	f7ff ff79 	bl	80010e0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80011ee:	2001      	movs	r0, #1
 80011f0:	f000 f9b8 	bl	8001564 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80011f4:	2000      	movs	r0, #0
 80011f6:	f000 f83b 	bl	8001270 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80011fa:	f000 f85d 	bl	80012b8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <ssd1306_Init+0xd0>)
 8001200:	2200      	movs	r2, #0
 8001202:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <ssd1306_Init+0xd0>)
 8001206:	2200      	movs	r2, #0
 8001208:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800120a:	4b02      	ldr	r3, [pc, #8]	; (8001214 <ssd1306_Init+0xd0>)
 800120c:	2201      	movs	r2, #1
 800120e:	711a      	strb	r2, [r3, #4]
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200005a4 	.word	0x200005a4

08001218 <ssd1306_ScrollLeft>:
	ssd1306_WriteCommand(0x80);
	ssd1306_WriteCommand(SSD1306_ACTIVATE_SCROLL); // start scroll
}

void ssd1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	460a      	mov	r2, r1
 8001222:	71fb      	strb	r3, [r7, #7]
 8001224:	4613      	mov	r3, r2
 8001226:	71bb      	strb	r3, [r7, #6]
//	ssd1306_WriteCommand(0X00);
//	ssd1306_WriteCommand(0XFF);
//	ssd1306_WriteCommand(0x80);
//	ssd1306_WriteCommand(SSD1306_ACTIVATE_SCROLL); // start scroll
  // 비활성화된 스크롤을 활성화하기 위해 DEACTIVATE_SCROLL 명령을 보냅니다.
  ssd1306_WriteCommand(SSD1306_DEACTIVATE_SCROLL);
 8001228:	202e      	movs	r0, #46	; 0x2e
 800122a:	f7ff ff59 	bl	80010e0 <ssd1306_WriteCommand>
  // 스크롤 방향을 설정합니다 (왼쪽으로 스크롤).
  ssd1306_WriteCommand(SSD1306_LEFT_HORIZONTAL_SCROLL);
 800122e:	2027      	movs	r0, #39	; 0x27
 8001230:	f7ff ff56 	bl	80010e0 <ssd1306_WriteCommand>
  // 가짜 데이터를 보냅니다.
  ssd1306_WriteCommand(0x00);
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff ff53 	bl	80010e0 <ssd1306_WriteCommand>
  // 시작 및 끝 페이지 주소를 설정합니다.
  ssd1306_WriteCommand(start_row); // start page address
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff4f 	bl	80010e0 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x00);      // time interval 5 frames
 8001242:	2000      	movs	r0, #0
 8001244:	f7ff ff4c 	bl	80010e0 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(end_row);   // end page address
 8001248:	79bb      	ldrb	r3, [r7, #6]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff48 	bl	80010e0 <ssd1306_WriteCommand>
  // 추가 설정
  ssd1306_WriteCommand(0x00); // dummy
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff ff45 	bl	80010e0 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0xFF); // dummy
 8001256:	20ff      	movs	r0, #255	; 0xff
 8001258:	f7ff ff42 	bl	80010e0 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x80); // dummy
 800125c:	2080      	movs	r0, #128	; 0x80
 800125e:	f7ff ff3f 	bl	80010e0 <ssd1306_WriteCommand>
  // 스크롤을 활성화합니다.
  ssd1306_WriteCommand(SSD1306_ACTIVATE_SCROLL);
 8001262:	202f      	movs	r0, #47	; 0x2f
 8001264:	f7ff ff3c 	bl	80010e0 <ssd1306_WriteCommand>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <ssd1306_Fill>:
{
	ssd1306_WriteCommand(SSD1306_DEACTIVATE_SCROLL);
}

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	e00d      	b.n	800129c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <ssd1306_Fill+0x1a>
 8001286:	2100      	movs	r1, #0
 8001288:	e000      	b.n	800128c <ssd1306_Fill+0x1c>
 800128a:	21ff      	movs	r1, #255	; 0xff
 800128c:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <ssd1306_Fill+0x44>)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4413      	add	r3, r2
 8001292:	460a      	mov	r2, r1
 8001294:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	3301      	adds	r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a2:	d3ed      	bcc.n	8001280 <ssd1306_Fill+0x10>
    }
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	200001a4 	.word	0x200001a4

080012b8 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80012be:	2300      	movs	r3, #0
 80012c0:	71fb      	strb	r3, [r7, #7]
 80012c2:	e016      	b.n	80012f2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	3b50      	subs	r3, #80	; 0x50
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff08 	bl	80010e0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x02);
 80012d0:	2002      	movs	r0, #2
 80012d2:	f7ff ff05 	bl	80010e0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80012d6:	2010      	movs	r0, #16
 80012d8:	f7ff ff02 	bl	80010e0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	01db      	lsls	r3, r3, #7
 80012e0:	4a08      	ldr	r2, [pc, #32]	; (8001304 <ssd1306_UpdateScreen+0x4c>)
 80012e2:	4413      	add	r3, r2
 80012e4:	2180      	movs	r1, #128	; 0x80
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff12 	bl	8001110 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	3301      	adds	r3, #1
 80012f0:	71fb      	strb	r3, [r7, #7]
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2b07      	cmp	r3, #7
 80012f6:	d9e5      	bls.n	80012c4 <ssd1306_UpdateScreen+0xc>
    }
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200001a4 	.word	0x200001a4

08001308 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
 8001312:	460b      	mov	r3, r1
 8001314:	71bb      	strb	r3, [r7, #6]
 8001316:	4613      	mov	r3, r2
 8001318:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	db3d      	blt.n	800139e <ssd1306_DrawPixel+0x96>
 8001322:	79bb      	ldrb	r3, [r7, #6]
 8001324:	2b3f      	cmp	r3, #63	; 0x3f
 8001326:	d83a      	bhi.n	800139e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001328:	797b      	ldrb	r3, [r7, #5]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d11a      	bne.n	8001364 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800132e:	79fa      	ldrb	r2, [r7, #7]
 8001330:	79bb      	ldrb	r3, [r7, #6]
 8001332:	08db      	lsrs	r3, r3, #3
 8001334:	b2d8      	uxtb	r0, r3
 8001336:	4603      	mov	r3, r0
 8001338:	01db      	lsls	r3, r3, #7
 800133a:	4413      	add	r3, r2
 800133c:	4a1b      	ldr	r2, [pc, #108]	; (80013ac <ssd1306_DrawPixel+0xa4>)
 800133e:	5cd3      	ldrb	r3, [r2, r3]
 8001340:	b25a      	sxtb	r2, r3
 8001342:	79bb      	ldrb	r3, [r7, #6]
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	2101      	movs	r1, #1
 800134a:	fa01 f303 	lsl.w	r3, r1, r3
 800134e:	b25b      	sxtb	r3, r3
 8001350:	4313      	orrs	r3, r2
 8001352:	b259      	sxtb	r1, r3
 8001354:	79fa      	ldrb	r2, [r7, #7]
 8001356:	4603      	mov	r3, r0
 8001358:	01db      	lsls	r3, r3, #7
 800135a:	4413      	add	r3, r2
 800135c:	b2c9      	uxtb	r1, r1
 800135e:	4a13      	ldr	r2, [pc, #76]	; (80013ac <ssd1306_DrawPixel+0xa4>)
 8001360:	54d1      	strb	r1, [r2, r3]
 8001362:	e01d      	b.n	80013a0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001364:	79fa      	ldrb	r2, [r7, #7]
 8001366:	79bb      	ldrb	r3, [r7, #6]
 8001368:	08db      	lsrs	r3, r3, #3
 800136a:	b2d8      	uxtb	r0, r3
 800136c:	4603      	mov	r3, r0
 800136e:	01db      	lsls	r3, r3, #7
 8001370:	4413      	add	r3, r2
 8001372:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <ssd1306_DrawPixel+0xa4>)
 8001374:	5cd3      	ldrb	r3, [r2, r3]
 8001376:	b25a      	sxtb	r2, r3
 8001378:	79bb      	ldrb	r3, [r7, #6]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	2101      	movs	r1, #1
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	b25b      	sxtb	r3, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	b25b      	sxtb	r3, r3
 800138a:	4013      	ands	r3, r2
 800138c:	b259      	sxtb	r1, r3
 800138e:	79fa      	ldrb	r2, [r7, #7]
 8001390:	4603      	mov	r3, r0
 8001392:	01db      	lsls	r3, r3, #7
 8001394:	4413      	add	r3, r2
 8001396:	b2c9      	uxtb	r1, r1
 8001398:	4a04      	ldr	r2, [pc, #16]	; (80013ac <ssd1306_DrawPixel+0xa4>)
 800139a:	54d1      	strb	r1, [r2, r3]
 800139c:	e000      	b.n	80013a0 <ssd1306_DrawPixel+0x98>
        return;
 800139e:	bf00      	nop
    }
}
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	200001a4 	.word	0x200001a4

080013b0 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b089      	sub	sp, #36	; 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4604      	mov	r4, r0
 80013b8:	1d38      	adds	r0, r7, #4
 80013ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80013be:	461a      	mov	r2, r3
 80013c0:	4623      	mov	r3, r4
 80013c2:	73fb      	strb	r3, [r7, #15]
 80013c4:	4613      	mov	r3, r2
 80013c6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	2b1f      	cmp	r3, #31
 80013cc:	d902      	bls.n	80013d4 <ssd1306_WriteChar+0x24>
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	2b7e      	cmp	r3, #126	; 0x7e
 80013d2:	d901      	bls.n	80013d8 <ssd1306_WriteChar+0x28>
        return 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	e06d      	b.n	80014b4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80013d8:	4b38      	ldr	r3, [pc, #224]	; (80014bc <ssd1306_WriteChar+0x10c>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	793b      	ldrb	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	2b80      	cmp	r3, #128	; 0x80
 80013e4:	dc06      	bgt.n	80013f4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80013e6:	4b35      	ldr	r3, [pc, #212]	; (80014bc <ssd1306_WriteChar+0x10c>)
 80013e8:	885b      	ldrh	r3, [r3, #2]
 80013ea:	461a      	mov	r2, r3
 80013ec:	797b      	ldrb	r3, [r7, #5]
 80013ee:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80013f0:	2b40      	cmp	r3, #64	; 0x40
 80013f2:	dd01      	ble.n	80013f8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	e05d      	b.n	80014b4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
 80013fc:	e04c      	b.n	8001498 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	3b20      	subs	r3, #32
 8001404:	7979      	ldrb	r1, [r7, #5]
 8001406:	fb01 f303 	mul.w	r3, r1, r3
 800140a:	4619      	mov	r1, r3
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	440b      	add	r3, r1
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001418:	2300      	movs	r3, #0
 800141a:	61bb      	str	r3, [r7, #24]
 800141c:	e034      	b.n	8001488 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d012      	beq.n	8001454 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800142e:	4b23      	ldr	r3, [pc, #140]	; (80014bc <ssd1306_WriteChar+0x10c>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	4413      	add	r3, r2
 800143a:	b2d8      	uxtb	r0, r3
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <ssd1306_WriteChar+0x10c>)
 800143e:	885b      	ldrh	r3, [r3, #2]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	4413      	add	r3, r2
 8001448:	b2db      	uxtb	r3, r3
 800144a:	7bba      	ldrb	r2, [r7, #14]
 800144c:	4619      	mov	r1, r3
 800144e:	f7ff ff5b 	bl	8001308 <ssd1306_DrawPixel>
 8001452:	e016      	b.n	8001482 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <ssd1306_WriteChar+0x10c>)
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	4413      	add	r3, r2
 8001460:	b2d8      	uxtb	r0, r3
 8001462:	4b16      	ldr	r3, [pc, #88]	; (80014bc <ssd1306_WriteChar+0x10c>)
 8001464:	885b      	ldrh	r3, [r3, #2]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	4413      	add	r3, r2
 800146e:	b2d9      	uxtb	r1, r3
 8001470:	7bbb      	ldrb	r3, [r7, #14]
 8001472:	2b00      	cmp	r3, #0
 8001474:	bf0c      	ite	eq
 8001476:	2301      	moveq	r3, #1
 8001478:	2300      	movne	r3, #0
 800147a:	b2db      	uxtb	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	f7ff ff43 	bl	8001308 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	3301      	adds	r3, #1
 8001486:	61bb      	str	r3, [r7, #24]
 8001488:	793b      	ldrb	r3, [r7, #4]
 800148a:	461a      	mov	r2, r3
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	4293      	cmp	r3, r2
 8001490:	d3c5      	bcc.n	800141e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3301      	adds	r3, #1
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	797b      	ldrb	r3, [r7, #5]
 800149a:	461a      	mov	r2, r3
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	4293      	cmp	r3, r2
 80014a0:	d3ad      	bcc.n	80013fe <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <ssd1306_WriteChar+0x10c>)
 80014a4:	881a      	ldrh	r2, [r3, #0]
 80014a6:	793b      	ldrb	r3, [r7, #4]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	4413      	add	r3, r2
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	4b03      	ldr	r3, [pc, #12]	; (80014bc <ssd1306_WriteChar+0x10c>)
 80014b0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3724      	adds	r7, #36	; 0x24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd90      	pop	{r4, r7, pc}
 80014bc:	200005a4 	.word	0x200005a4

080014c0 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	1d38      	adds	r0, r7, #4
 80014ca:	e880 0006 	stmia.w	r0, {r1, r2}
 80014ce:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80014d0:	e012      	b.n	80014f8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	7818      	ldrb	r0, [r3, #0]
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	1d3a      	adds	r2, r7, #4
 80014da:	ca06      	ldmia	r2, {r1, r2}
 80014dc:	f7ff ff68 	bl	80013b0 <ssd1306_WriteChar>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d002      	beq.n	80014f2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	e008      	b.n	8001504 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	3301      	adds	r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1e8      	bne.n	80014d2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	781b      	ldrb	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	460a      	mov	r2, r1
 8001516:	71fb      	strb	r3, [r7, #7]
 8001518:	4613      	mov	r3, r2
 800151a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	b29a      	uxth	r2, r3
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <ssd1306_SetCursor+0x2c>)
 8001522:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	b29a      	uxth	r2, r3
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <ssd1306_SetCursor+0x2c>)
 800152a:	805a      	strh	r2, [r3, #2]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	200005a4 	.word	0x200005a4

0800153c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001546:	2381      	movs	r3, #129	; 0x81
 8001548:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fdc7 	bl	80010e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fdc3 	bl	80010e0 <ssd1306_WriteCommand>
}
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001574:	23af      	movs	r3, #175	; 0xaf
 8001576:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <ssd1306_SetDisplayOn+0x38>)
 800157a:	2201      	movs	r2, #1
 800157c:	715a      	strb	r2, [r3, #5]
 800157e:	e004      	b.n	800158a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001580:	23ae      	movs	r3, #174	; 0xae
 8001582:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <ssd1306_SetDisplayOn+0x38>)
 8001586:	2200      	movs	r2, #0
 8001588:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fda7 	bl	80010e0 <ssd1306_WriteCommand>
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200005a4 	.word	0x200005a4

080015a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_MspInit+0x4c>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <HAL_MspInit+0x4c>)
 80015b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b4:	6453      	str	r3, [r2, #68]	; 0x44
 80015b6:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <HAL_MspInit+0x4c>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	603b      	str	r3, [r7, #0]
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_MspInit+0x4c>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	4a08      	ldr	r2, [pc, #32]	; (80015ec <HAL_MspInit+0x4c>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_MspInit+0x4c>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800

080015f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a2f      	ldr	r2, [pc, #188]	; (80016cc <HAL_ADC_MspInit+0xdc>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d157      	bne.n	80016c2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <HAL_ADC_MspInit+0xe0>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	4a2d      	ldr	r2, [pc, #180]	; (80016d0 <HAL_ADC_MspInit+0xe0>)
 800161c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001620:	6453      	str	r3, [r2, #68]	; 0x44
 8001622:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <HAL_ADC_MspInit+0xe0>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <HAL_ADC_MspInit+0xe0>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a26      	ldr	r2, [pc, #152]	; (80016d0 <HAL_ADC_MspInit+0xe0>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <HAL_ADC_MspInit+0xe0>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800164a:	2303      	movs	r3, #3
 800164c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800164e:	2303      	movs	r3, #3
 8001650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	481d      	ldr	r0, [pc, #116]	; (80016d4 <HAL_ADC_MspInit+0xe4>)
 800165e:	f001 fb41 	bl	8002ce4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001662:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <HAL_ADC_MspInit+0xe8>)
 8001664:	4a1d      	ldr	r2, [pc, #116]	; (80016dc <HAL_ADC_MspInit+0xec>)
 8001666:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001668:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <HAL_ADC_MspInit+0xe8>)
 800166a:	2200      	movs	r2, #0
 800166c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800166e:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <HAL_ADC_MspInit+0xe8>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001674:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <HAL_ADC_MspInit+0xe8>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800167a:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <HAL_ADC_MspInit+0xe8>)
 800167c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001680:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_ADC_MspInit+0xe8>)
 8001684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001688:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <HAL_ADC_MspInit+0xe8>)
 800168c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001690:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_ADC_MspInit+0xe8>)
 8001694:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001698:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_ADC_MspInit+0xe8>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016a0:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <HAL_ADC_MspInit+0xe8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016a6:	480c      	ldr	r0, [pc, #48]	; (80016d8 <HAL_ADC_MspInit+0xe8>)
 80016a8:	f000 ff1a 	bl	80024e0 <HAL_DMA_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80016b2:	f7ff fcf9 	bl	80010a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <HAL_ADC_MspInit+0xe8>)
 80016ba:	639a      	str	r2, [r3, #56]	; 0x38
 80016bc:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <HAL_ADC_MspInit+0xe8>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016c2:	bf00      	nop
 80016c4:	3728      	adds	r7, #40	; 0x28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40012000 	.word	0x40012000
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020000 	.word	0x40020000
 80016d8:	200000a8 	.word	0x200000a8
 80016dc:	40026410 	.word	0x40026410

080016e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a19      	ldr	r2, [pc, #100]	; (8001764 <HAL_I2C_MspInit+0x84>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d12b      	bne.n	800175a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_I2C_MspInit+0x88>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a17      	ldr	r2, [pc, #92]	; (8001768 <HAL_I2C_MspInit+0x88>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_I2C_MspInit+0x88>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800171e:	23c0      	movs	r3, #192	; 0xc0
 8001720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001722:	2312      	movs	r3, #18
 8001724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001726:	2301      	movs	r3, #1
 8001728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172a:	2303      	movs	r3, #3
 800172c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800172e:	2304      	movs	r3, #4
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	480c      	ldr	r0, [pc, #48]	; (800176c <HAL_I2C_MspInit+0x8c>)
 800173a:	f001 fad3 	bl	8002ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_I2C_MspInit+0x88>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a08      	ldr	r2, [pc, #32]	; (8001768 <HAL_I2C_MspInit+0x88>)
 8001748:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_I2C_MspInit+0x88>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800175a:	bf00      	nop
 800175c:	3728      	adds	r7, #40	; 0x28
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40005400 	.word	0x40005400
 8001768:	40023800 	.word	0x40023800
 800176c:	40020400 	.word	0x40020400

08001770 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a1d      	ldr	r2, [pc, #116]	; (8001804 <HAL_UART_MspInit+0x94>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d133      	bne.n	80017fa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <HAL_UART_MspInit+0x98>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	4a1b      	ldr	r2, [pc, #108]	; (8001808 <HAL_UART_MspInit+0x98>)
 800179c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
 80017a2:	4b19      	ldr	r3, [pc, #100]	; (8001808 <HAL_UART_MspInit+0x98>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_UART_MspInit+0x98>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a14      	ldr	r2, [pc, #80]	; (8001808 <HAL_UART_MspInit+0x98>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_UART_MspInit+0x98>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017ca:	230c      	movs	r3, #12
 80017cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017da:	2307      	movs	r3, #7
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	4619      	mov	r1, r3
 80017e4:	4809      	ldr	r0, [pc, #36]	; (800180c <HAL_UART_MspInit+0x9c>)
 80017e6:	f001 fa7d 	bl	8002ce4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	2026      	movs	r0, #38	; 0x26
 80017f0:	f000 fe3f 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017f4:	2026      	movs	r0, #38	; 0x26
 80017f6:	f000 fe58 	bl	80024aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017fa:	bf00      	nop
 80017fc:	3728      	adds	r7, #40	; 0x28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40004400 	.word	0x40004400
 8001808:	40023800 	.word	0x40023800
 800180c:	40020000 	.word	0x40020000

08001810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001814:	e7fe      	b.n	8001814 <NMI_Handler+0x4>

08001816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <HardFault_Handler+0x4>

0800181c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <MemManage_Handler+0x4>

08001822 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <UsageFault_Handler+0x4>

0800182e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800185c:	f000 f8e8 	bl	8001a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <USART2_IRQHandler+0x10>)
 800186a:	f002 fd55 	bl	8004318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2000015c 	.word	0x2000015c

08001878 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <DMA2_Stream0_IRQHandler+0x10>)
 800187e:	f000 ffc7 	bl	8002810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200000a8 	.word	0x200000a8

0800188c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <SystemInit+0x20>)
 8001892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <SystemInit+0x20>)
 8001898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800189c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <initUart>:
int rxBufferPp;					// put pointer (write)
uint8_t rxBuffer[rxBufferMax];
uint8_t rxChar;

// uart 장치 초기화
void initUart(UART_HandleTypeDef *inHuart) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	huart = inHuart;
 80018b8:	4a06      	ldr	r2, [pc, #24]	; (80018d4 <initUart+0x24>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(huart, &rxChar, 1);
 80018be:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <initUart+0x24>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2201      	movs	r2, #1
 80018c4:	4904      	ldr	r1, [pc, #16]	; (80018d8 <initUart+0x28>)
 80018c6:	4618      	mov	r0, r3
 80018c8:	f002 fd00 	bl	80042cc <HAL_UART_Receive_IT>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200005ac 	.word	0x200005ac
 80018d8:	200006b3 	.word	0x200006b3

080018dc <HAL_UART_RxCpltCallback>:

// 문자수신 처리
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	rxBuffer[rxBufferPp++] = rxChar;
 80018e4:	4b10      	ldr	r3, [pc, #64]	; (8001928 <HAL_UART_RxCpltCallback+0x4c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	490f      	ldr	r1, [pc, #60]	; (8001928 <HAL_UART_RxCpltCallback+0x4c>)
 80018ec:	600a      	str	r2, [r1, #0]
 80018ee:	4a0f      	ldr	r2, [pc, #60]	; (800192c <HAL_UART_RxCpltCallback+0x50>)
 80018f0:	7811      	ldrb	r1, [r2, #0]
 80018f2:	4a0f      	ldr	r2, [pc, #60]	; (8001930 <HAL_UART_RxCpltCallback+0x54>)
 80018f4:	54d1      	strb	r1, [r2, r3]
	rxBufferPp %= rxBufferMax;
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <HAL_UART_RxCpltCallback+0x4c>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <HAL_UART_RxCpltCallback+0x58>)
 80018fc:	fb83 1302 	smull	r1, r3, r3, r2
 8001900:	4413      	add	r3, r2
 8001902:	11d9      	asrs	r1, r3, #7
 8001904:	17d3      	asrs	r3, r2, #31
 8001906:	1ac9      	subs	r1, r1, r3
 8001908:	460b      	mov	r3, r1
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	1a5b      	subs	r3, r3, r1
 800190e:	1ad1      	subs	r1, r2, r3
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_UART_RxCpltCallback+0x4c>)
 8001912:	6019      	str	r1, [r3, #0]
	HAL_UART_Receive_IT(huart, &rxChar, 1);
 8001914:	2201      	movs	r2, #1
 8001916:	4905      	ldr	r1, [pc, #20]	; (800192c <HAL_UART_RxCpltCallback+0x50>)
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f002 fcd7 	bl	80042cc <HAL_UART_Receive_IT>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200005b0 	.word	0x200005b0
 800192c:	200006b3 	.word	0x200006b3
 8001930:	200005b4 	.word	0x200005b4
 8001934:	80808081 	.word	0x80808081

08001938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001970 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800193c:	f7ff ffa6 	bl	800188c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001940:	480c      	ldr	r0, [pc, #48]	; (8001974 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001942:	490d      	ldr	r1, [pc, #52]	; (8001978 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001944:	4a0d      	ldr	r2, [pc, #52]	; (800197c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001948:	e002      	b.n	8001950 <LoopCopyDataInit>

0800194a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800194c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194e:	3304      	adds	r3, #4

08001950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001954:	d3f9      	bcc.n	800194a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001958:	4c0a      	ldr	r4, [pc, #40]	; (8001984 <LoopFillZerobss+0x22>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800195c:	e001      	b.n	8001962 <LoopFillZerobss>

0800195e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001960:	3204      	adds	r2, #4

08001962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001964:	d3fb      	bcc.n	800195e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001966:	f003 fbdd 	bl	8005124 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800196a:	f7ff f9d5 	bl	8000d18 <main>
  bx  lr    
 800196e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001970:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001978:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800197c:	0800a838 	.word	0x0800a838
  ldr r2, =_sbss
 8001980:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001984:	200006b8 	.word	0x200006b8

08001988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001988:	e7fe      	b.n	8001988 <ADC_IRQHandler>
	...

0800198c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0d      	ldr	r2, [pc, #52]	; (80019cc <HAL_Init+0x40>)
 8001996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800199a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_Init+0x40>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <HAL_Init+0x40>)
 80019a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <HAL_Init+0x40>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a07      	ldr	r2, [pc, #28]	; (80019cc <HAL_Init+0x40>)
 80019ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b4:	2003      	movs	r0, #3
 80019b6:	f000 fd51 	bl	800245c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ba:	200f      	movs	r0, #15
 80019bc:	f000 f808 	bl	80019d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c0:	f7ff fdee 	bl	80015a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023c00 	.word	0x40023c00

080019d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_InitTick+0x54>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_InitTick+0x58>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 fd69 	bl	80024c6 <HAL_SYSTICK_Config>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00e      	b.n	8001a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b0f      	cmp	r3, #15
 8001a02:	d80a      	bhi.n	8001a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a04:	2200      	movs	r2, #0
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f000 fd31 	bl	8002472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a10:	4a06      	ldr	r2, [pc, #24]	; (8001a2c <HAL_InitTick+0x5c>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e000      	b.n	8001a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000008 	.word	0x20000008
 8001a28:	20000010 	.word	0x20000010
 8001a2c:	2000000c 	.word	0x2000000c

08001a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_IncTick+0x20>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_IncTick+0x24>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4413      	add	r3, r2
 8001a40:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <HAL_IncTick+0x24>)
 8001a42:	6013      	str	r3, [r2, #0]
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000010 	.word	0x20000010
 8001a54:	200006b4 	.word	0x200006b4

08001a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <HAL_GetTick+0x14>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	200006b4 	.word	0x200006b4

08001a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a78:	f7ff ffee 	bl	8001a58 <HAL_GetTick>
 8001a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a88:	d005      	beq.n	8001a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_Delay+0x44>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4413      	add	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a96:	bf00      	nop
 8001a98:	f7ff ffde 	bl	8001a58 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d8f7      	bhi.n	8001a98 <HAL_Delay+0x28>
  {
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000010 	.word	0x20000010

08001ab8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e033      	b.n	8001b36 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d109      	bne.n	8001aea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff fd8a 	bl	80015f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d118      	bne.n	8001b28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001afe:	f023 0302 	bic.w	r3, r3, #2
 8001b02:	f043 0202 	orr.w	r2, r3, #2
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 fa58 	bl	8001fc0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f023 0303 	bic.w	r3, r3, #3
 8001b1e:	f043 0201 	orr.w	r2, r3, #1
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
 8001b26:	e001      	b.n	8001b2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_ADC_Start_DMA+0x1e>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e0ce      	b.n	8001cfc <HAL_ADC_Start_DMA+0x1bc>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d018      	beq.n	8001ba6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b84:	4b5f      	ldr	r3, [pc, #380]	; (8001d04 <HAL_ADC_Start_DMA+0x1c4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a5f      	ldr	r2, [pc, #380]	; (8001d08 <HAL_ADC_Start_DMA+0x1c8>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	0c9a      	lsrs	r2, r3, #18
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001b98:	e002      	b.n	8001ba0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f9      	bne.n	8001b9a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bb4:	d107      	bne.n	8001bc6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bc4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	f040 8086 	bne.w	8001ce2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bde:	f023 0301 	bic.w	r3, r3, #1
 8001be2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d007      	beq.n	8001c08 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c14:	d106      	bne.n	8001c24 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	f023 0206 	bic.w	r2, r3, #6
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	645a      	str	r2, [r3, #68]	; 0x44
 8001c22:	e002      	b.n	8001c2a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c32:	4b36      	ldr	r3, [pc, #216]	; (8001d0c <HAL_ADC_Start_DMA+0x1cc>)
 8001c34:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3a:	4a35      	ldr	r2, [pc, #212]	; (8001d10 <HAL_ADC_Start_DMA+0x1d0>)
 8001c3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c42:	4a34      	ldr	r2, [pc, #208]	; (8001d14 <HAL_ADC_Start_DMA+0x1d4>)
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4a:	4a33      	ldr	r2, [pc, #204]	; (8001d18 <HAL_ADC_Start_DMA+0x1d8>)
 8001c4c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c56:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001c66:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c76:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	334c      	adds	r3, #76	; 0x4c
 8001c82:	4619      	mov	r1, r3
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f000 fcd8 	bl	800263c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 031f 	and.w	r3, r3, #31
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10f      	bne.n	8001cb8 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d129      	bne.n	8001cfa <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	e020      	b.n	8001cfa <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <HAL_ADC_Start_DMA+0x1dc>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d11b      	bne.n	8001cfa <HAL_ADC_Start_DMA+0x1ba>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d114      	bne.n	8001cfa <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	e00b      	b.n	8001cfa <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f043 0210 	orr.w	r2, r3, #16
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	f043 0201 	orr.w	r2, r3, #1
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000008 	.word	0x20000008
 8001d08:	431bde83 	.word	0x431bde83
 8001d0c:	40012300 	.word	0x40012300
 8001d10:	080021b9 	.word	0x080021b9
 8001d14:	08002273 	.word	0x08002273
 8001d18:	0800228f 	.word	0x0800228f
 8001d1c:	40012000 	.word	0x40012000

08001d20 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x1c>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e113      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x244>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b09      	cmp	r3, #9
 8001d86:	d925      	bls.n	8001dd4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68d9      	ldr	r1, [r3, #12]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	461a      	mov	r2, r3
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3b1e      	subs	r3, #30
 8001d9e:	2207      	movs	r2, #7
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43da      	mvns	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	400a      	ands	r2, r1
 8001dac:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68d9      	ldr	r1, [r3, #12]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4403      	add	r3, r0
 8001dc6:	3b1e      	subs	r3, #30
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	e022      	b.n	8001e1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6919      	ldr	r1, [r3, #16]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	2207      	movs	r2, #7
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	400a      	ands	r2, r1
 8001df6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6919      	ldr	r1, [r3, #16]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4403      	add	r3, r0
 8001e10:	409a      	lsls	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d824      	bhi.n	8001e6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	3b05      	subs	r3, #5
 8001e34:	221f      	movs	r2, #31
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	400a      	ands	r2, r1
 8001e42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	4618      	mov	r0, r3
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3b05      	subs	r3, #5
 8001e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	635a      	str	r2, [r3, #52]	; 0x34
 8001e6a:	e04c      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b0c      	cmp	r3, #12
 8001e72:	d824      	bhi.n	8001ebe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	3b23      	subs	r3, #35	; 0x23
 8001e86:	221f      	movs	r2, #31
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43da      	mvns	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	400a      	ands	r2, r1
 8001e94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	3b23      	subs	r3, #35	; 0x23
 8001eb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	631a      	str	r2, [r3, #48]	; 0x30
 8001ebc:	e023      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	3b41      	subs	r3, #65	; 0x41
 8001ed0:	221f      	movs	r2, #31
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43da      	mvns	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	400a      	ands	r2, r1
 8001ede:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	4618      	mov	r0, r3
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3b41      	subs	r3, #65	; 0x41
 8001efa:	fa00 f203 	lsl.w	r2, r0, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f06:	4b29      	ldr	r3, [pc, #164]	; (8001fac <HAL_ADC_ConfigChannel+0x250>)
 8001f08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a28      	ldr	r2, [pc, #160]	; (8001fb0 <HAL_ADC_ConfigChannel+0x254>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d10f      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x1d8>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b12      	cmp	r3, #18
 8001f1a:	d10b      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1d      	ldr	r2, [pc, #116]	; (8001fb0 <HAL_ADC_ConfigChannel+0x254>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d12b      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x23a>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a1c      	ldr	r2, [pc, #112]	; (8001fb4 <HAL_ADC_ConfigChannel+0x258>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d003      	beq.n	8001f50 <HAL_ADC_ConfigChannel+0x1f4>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b11      	cmp	r3, #17
 8001f4e:	d122      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a11      	ldr	r2, [pc, #68]	; (8001fb4 <HAL_ADC_ConfigChannel+0x258>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d111      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <HAL_ADC_ConfigChannel+0x25c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a11      	ldr	r2, [pc, #68]	; (8001fbc <HAL_ADC_ConfigChannel+0x260>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	0c9a      	lsrs	r2, r3, #18
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f88:	e002      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f9      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	40012300 	.word	0x40012300
 8001fb0:	40012000 	.word	0x40012000
 8001fb4:	10000012 	.word	0x10000012
 8001fb8:	20000008 	.word	0x20000008
 8001fbc:	431bde83 	.word	0x431bde83

08001fc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fc8:	4b79      	ldr	r3, [pc, #484]	; (80021b0 <ADC_Init+0x1f0>)
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ff4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6859      	ldr	r1, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	021a      	lsls	r2, r3, #8
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002018:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6859      	ldr	r1, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800203a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6899      	ldr	r1, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002052:	4a58      	ldr	r2, [pc, #352]	; (80021b4 <ADC_Init+0x1f4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d022      	beq.n	800209e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002066:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6899      	ldr	r1, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002088:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6899      	ldr	r1, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	e00f      	b.n	80020be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020bc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0202 	bic.w	r2, r2, #2
 80020cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6899      	ldr	r1, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7e1b      	ldrb	r3, [r3, #24]
 80020d8:	005a      	lsls	r2, r3, #1
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d01b      	beq.n	8002124 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020fa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800210a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6859      	ldr	r1, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	3b01      	subs	r3, #1
 8002118:	035a      	lsls	r2, r3, #13
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	e007      	b.n	8002134 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002132:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002142:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	3b01      	subs	r3, #1
 8002150:	051a      	lsls	r2, r3, #20
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002168:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6899      	ldr	r1, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002176:	025a      	lsls	r2, r3, #9
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800218e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6899      	ldr	r1, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	029a      	lsls	r2, r3, #10
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	609a      	str	r2, [r3, #8]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	40012300 	.word	0x40012300
 80021b4:	0f000001 	.word	0x0f000001

080021b8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d13c      	bne.n	800224c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d12b      	bne.n	8002244 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d127      	bne.n	8002244 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d006      	beq.n	8002210 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800220c:	2b00      	cmp	r3, #0
 800220e:	d119      	bne.n	8002244 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0220 	bic.w	r2, r2, #32
 800221e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d105      	bne.n	8002244 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	f043 0201 	orr.w	r2, r3, #1
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f7ff fd6b 	bl	8001d20 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800224a:	e00e      	b.n	800226a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	f003 0310 	and.w	r3, r3, #16
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f7ff fd75 	bl	8001d48 <HAL_ADC_ErrorCallback>
}
 800225e:	e004      	b.n	800226a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	4798      	blx	r3
}
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f7ff fd57 	bl	8001d34 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b084      	sub	sp, #16
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2240      	movs	r2, #64	; 0x40
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	f043 0204 	orr.w	r2, r3, #4
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f7ff fd4a 	bl	8001d48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022b4:	bf00      	nop
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <__NVIC_SetPriorityGrouping+0x44>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d8:	4013      	ands	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ee:	4a04      	ldr	r2, [pc, #16]	; (8002300 <__NVIC_SetPriorityGrouping+0x44>)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	60d3      	str	r3, [r2, #12]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <__NVIC_GetPriorityGrouping+0x18>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	f003 0307 	and.w	r3, r3, #7
}
 8002312:	4618      	mov	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	2b00      	cmp	r3, #0
 8002330:	db0b      	blt.n	800234a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	f003 021f 	and.w	r2, r3, #31
 8002338:	4907      	ldr	r1, [pc, #28]	; (8002358 <__NVIC_EnableIRQ+0x38>)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	2001      	movs	r0, #1
 8002342:	fa00 f202 	lsl.w	r2, r0, r2
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000e100 	.word	0xe000e100

0800235c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	db0a      	blt.n	8002386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	490c      	ldr	r1, [pc, #48]	; (80023a8 <__NVIC_SetPriority+0x4c>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	440b      	add	r3, r1
 8002380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002384:	e00a      	b.n	800239c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4908      	ldr	r1, [pc, #32]	; (80023ac <__NVIC_SetPriority+0x50>)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	3b04      	subs	r3, #4
 8002394:	0112      	lsls	r2, r2, #4
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	440b      	add	r3, r1
 800239a:	761a      	strb	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	; 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f1c3 0307 	rsb	r3, r3, #7
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	bf28      	it	cs
 80023ce:	2304      	movcs	r3, #4
 80023d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d902      	bls.n	80023e0 <NVIC_EncodePriority+0x30>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3b03      	subs	r3, #3
 80023de:	e000      	b.n	80023e2 <NVIC_EncodePriority+0x32>
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	f04f 32ff 	mov.w	r2, #4294967295
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43d9      	mvns	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	4313      	orrs	r3, r2
         );
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	; 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002428:	d301      	bcc.n	800242e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242a:	2301      	movs	r3, #1
 800242c:	e00f      	b.n	800244e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242e:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <SysTick_Config+0x40>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002436:	210f      	movs	r1, #15
 8002438:	f04f 30ff 	mov.w	r0, #4294967295
 800243c:	f7ff ff8e 	bl	800235c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <SysTick_Config+0x40>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002446:	4b04      	ldr	r3, [pc, #16]	; (8002458 <SysTick_Config+0x40>)
 8002448:	2207      	movs	r2, #7
 800244a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	e000e010 	.word	0xe000e010

0800245c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ff29 	bl	80022bc <__NVIC_SetPriorityGrouping>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002484:	f7ff ff3e 	bl	8002304 <__NVIC_GetPriorityGrouping>
 8002488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	6978      	ldr	r0, [r7, #20]
 8002490:	f7ff ff8e 	bl	80023b0 <NVIC_EncodePriority>
 8002494:	4602      	mov	r2, r0
 8002496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff5d 	bl	800235c <__NVIC_SetPriority>
}
 80024a2:	bf00      	nop
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff31 	bl	8002320 <__NVIC_EnableIRQ>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff ffa2 	bl	8002418 <SysTick_Config>
 80024d4:	4603      	mov	r3, r0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024ec:	f7ff fab4 	bl	8001a58 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e099      	b.n	8002630 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800251c:	e00f      	b.n	800253e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800251e:	f7ff fa9b 	bl	8001a58 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b05      	cmp	r3, #5
 800252a:	d908      	bls.n	800253e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2203      	movs	r2, #3
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e078      	b.n	8002630 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1e8      	bne.n	800251e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	4b38      	ldr	r3, [pc, #224]	; (8002638 <HAL_DMA_Init+0x158>)
 8002558:	4013      	ands	r3, r2
 800255a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800256a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002576:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002582:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4313      	orrs	r3, r2
 800258e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	2b04      	cmp	r3, #4
 8002596:	d107      	bne.n	80025a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	4313      	orrs	r3, r2
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f023 0307 	bic.w	r3, r3, #7
 80025be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d117      	bne.n	8002602 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4313      	orrs	r3, r2
 80025da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00e      	beq.n	8002602 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 fb01 	bl	8002bec <DMA_CheckFifoParam>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2240      	movs	r2, #64	; 0x40
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025fe:	2301      	movs	r3, #1
 8002600:	e016      	b.n	8002630 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 fab8 	bl	8002b80 <DMA_CalcBaseAndBitshift>
 8002610:	4603      	mov	r3, r0
 8002612:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002618:	223f      	movs	r2, #63	; 0x3f
 800261a:	409a      	lsls	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	f010803f 	.word	0xf010803f

0800263c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_DMA_Start_IT+0x26>
 800265e:	2302      	movs	r3, #2
 8002660:	e040      	b.n	80026e4 <HAL_DMA_Start_IT+0xa8>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b01      	cmp	r3, #1
 8002674:	d12f      	bne.n	80026d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2202      	movs	r2, #2
 800267a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 fa4a 	bl	8002b24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002694:	223f      	movs	r2, #63	; 0x3f
 8002696:	409a      	lsls	r2, r3
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0216 	orr.w	r2, r2, #22
 80026aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d007      	beq.n	80026c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0208 	orr.w	r2, r2, #8
 80026c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	e005      	b.n	80026e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026de:	2302      	movs	r3, #2
 80026e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026fa:	f7ff f9ad 	bl	8001a58 <HAL_GetTick>
 80026fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d008      	beq.n	800271e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2280      	movs	r2, #128	; 0x80
 8002710:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e052      	b.n	80027c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0216 	bic.w	r2, r2, #22
 800272c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800273c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d103      	bne.n	800274e <HAL_DMA_Abort+0x62>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0208 	bic.w	r2, r2, #8
 800275c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0201 	bic.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800276e:	e013      	b.n	8002798 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002770:	f7ff f972 	bl	8001a58 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b05      	cmp	r3, #5
 800277c:	d90c      	bls.n	8002798 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2220      	movs	r2, #32
 8002782:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2203      	movs	r2, #3
 8002788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e015      	b.n	80027c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1e4      	bne.n	8002770 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027aa:	223f      	movs	r2, #63	; 0x3f
 80027ac:	409a      	lsls	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d004      	beq.n	80027ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2280      	movs	r2, #128	; 0x80
 80027e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e00c      	b.n	8002804 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2205      	movs	r2, #5
 80027ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0201 	bic.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800281c:	4b8e      	ldr	r3, [pc, #568]	; (8002a58 <HAL_DMA_IRQHandler+0x248>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a8e      	ldr	r2, [pc, #568]	; (8002a5c <HAL_DMA_IRQHandler+0x24c>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	0a9b      	lsrs	r3, r3, #10
 8002828:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	2208      	movs	r2, #8
 800283c:	409a      	lsls	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4013      	ands	r3, r2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d01a      	beq.n	800287c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d013      	beq.n	800287c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0204 	bic.w	r2, r2, #4
 8002862:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002868:	2208      	movs	r2, #8
 800286a:	409a      	lsls	r2, r3
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002874:	f043 0201 	orr.w	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002880:	2201      	movs	r2, #1
 8002882:	409a      	lsls	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d012      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00b      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289e:	2201      	movs	r2, #1
 80028a0:	409a      	lsls	r2, r3
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028aa:	f043 0202 	orr.w	r2, r3, #2
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b6:	2204      	movs	r2, #4
 80028b8:	409a      	lsls	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4013      	ands	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d012      	beq.n	80028e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00b      	beq.n	80028e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d4:	2204      	movs	r2, #4
 80028d6:	409a      	lsls	r2, r3
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e0:	f043 0204 	orr.w	r2, r3, #4
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ec:	2210      	movs	r2, #16
 80028ee:	409a      	lsls	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d043      	beq.n	8002980 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d03c      	beq.n	8002980 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290a:	2210      	movs	r2, #16
 800290c:	409a      	lsls	r2, r3
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d018      	beq.n	8002952 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d108      	bne.n	8002940 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	2b00      	cmp	r3, #0
 8002934:	d024      	beq.n	8002980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	4798      	blx	r3
 800293e:	e01f      	b.n	8002980 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002944:	2b00      	cmp	r3, #0
 8002946:	d01b      	beq.n	8002980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	4798      	blx	r3
 8002950:	e016      	b.n	8002980 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d107      	bne.n	8002970 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0208 	bic.w	r2, r2, #8
 800296e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002984:	2220      	movs	r2, #32
 8002986:	409a      	lsls	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 808f 	beq.w	8002ab0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0310 	and.w	r3, r3, #16
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 8087 	beq.w	8002ab0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a6:	2220      	movs	r2, #32
 80029a8:	409a      	lsls	r2, r3
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b05      	cmp	r3, #5
 80029b8:	d136      	bne.n	8002a28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0216 	bic.w	r2, r2, #22
 80029c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d103      	bne.n	80029ea <HAL_DMA_IRQHandler+0x1da>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d007      	beq.n	80029fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0208 	bic.w	r2, r2, #8
 80029f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fe:	223f      	movs	r2, #63	; 0x3f
 8002a00:	409a      	lsls	r2, r3
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d07e      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	4798      	blx	r3
        }
        return;
 8002a26:	e079      	b.n	8002b1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d01d      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10d      	bne.n	8002a60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d031      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	4798      	blx	r3
 8002a54:	e02c      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x2a0>
 8002a56:	bf00      	nop
 8002a58:	20000008 	.word	0x20000008
 8002a5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d023      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	4798      	blx	r3
 8002a70:	e01e      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10f      	bne.n	8002aa0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0210 	bic.w	r2, r2, #16
 8002a8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d032      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d022      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2205      	movs	r2, #5
 8002ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0201 	bic.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d307      	bcc.n	8002af8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f2      	bne.n	8002adc <HAL_DMA_IRQHandler+0x2cc>
 8002af6:	e000      	b.n	8002afa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002af8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	4798      	blx	r3
 8002b1a:	e000      	b.n	8002b1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b1c:	bf00      	nop
    }
  }
}
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2b40      	cmp	r3, #64	; 0x40
 8002b50:	d108      	bne.n	8002b64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b62:	e007      	b.n	8002b74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	60da      	str	r2, [r3, #12]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	3b10      	subs	r3, #16
 8002b90:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <DMA_CalcBaseAndBitshift+0x64>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	091b      	lsrs	r3, r3, #4
 8002b98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b9a:	4a13      	ldr	r2, [pc, #76]	; (8002be8 <DMA_CalcBaseAndBitshift+0x68>)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d909      	bls.n	8002bc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bb6:	f023 0303 	bic.w	r3, r3, #3
 8002bba:	1d1a      	adds	r2, r3, #4
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	659a      	str	r2, [r3, #88]	; 0x58
 8002bc0:	e007      	b.n	8002bd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bca:	f023 0303 	bic.w	r3, r3, #3
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	aaaaaaab 	.word	0xaaaaaaab
 8002be8:	0800a820 	.word	0x0800a820

08002bec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d11f      	bne.n	8002c46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d856      	bhi.n	8002cba <DMA_CheckFifoParam+0xce>
 8002c0c:	a201      	add	r2, pc, #4	; (adr r2, 8002c14 <DMA_CheckFifoParam+0x28>)
 8002c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c12:	bf00      	nop
 8002c14:	08002c25 	.word	0x08002c25
 8002c18:	08002c37 	.word	0x08002c37
 8002c1c:	08002c25 	.word	0x08002c25
 8002c20:	08002cbb 	.word	0x08002cbb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d046      	beq.n	8002cbe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c34:	e043      	b.n	8002cbe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c3e:	d140      	bne.n	8002cc2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c44:	e03d      	b.n	8002cc2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c4e:	d121      	bne.n	8002c94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d837      	bhi.n	8002cc6 <DMA_CheckFifoParam+0xda>
 8002c56:	a201      	add	r2, pc, #4	; (adr r2, 8002c5c <DMA_CheckFifoParam+0x70>)
 8002c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5c:	08002c6d 	.word	0x08002c6d
 8002c60:	08002c73 	.word	0x08002c73
 8002c64:	08002c6d 	.word	0x08002c6d
 8002c68:	08002c85 	.word	0x08002c85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c70:	e030      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d025      	beq.n	8002cca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c82:	e022      	b.n	8002cca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c8c:	d11f      	bne.n	8002cce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c92:	e01c      	b.n	8002cce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d903      	bls.n	8002ca2 <DMA_CheckFifoParam+0xb6>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d003      	beq.n	8002ca8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ca0:	e018      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca6:	e015      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00e      	beq.n	8002cd2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb8:	e00b      	b.n	8002cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8002cba:	bf00      	nop
 8002cbc:	e00a      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cbe:	bf00      	nop
 8002cc0:	e008      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cc2:	bf00      	nop
 8002cc4:	e006      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cc6:	bf00      	nop
 8002cc8:	e004      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cca:	bf00      	nop
 8002ccc:	e002      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cce:	bf00      	nop
 8002cd0:	e000      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cd2:	bf00      	nop
    }
  } 
  
  return status; 
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop

08002ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b089      	sub	sp, #36	; 0x24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	e159      	b.n	8002fb4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d00:	2201      	movs	r2, #1
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	f040 8148 	bne.w	8002fae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d005      	beq.n	8002d36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d130      	bne.n	8002d98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	2203      	movs	r2, #3
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43db      	mvns	r3, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	f003 0201 	and.w	r2, r3, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	d017      	beq.n	8002dd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	2203      	movs	r2, #3
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 0303 	and.w	r3, r3, #3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d123      	bne.n	8002e28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	08da      	lsrs	r2, r3, #3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3208      	adds	r2, #8
 8002de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	220f      	movs	r2, #15
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	08da      	lsrs	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3208      	adds	r2, #8
 8002e22:	69b9      	ldr	r1, [r7, #24]
 8002e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	2203      	movs	r2, #3
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 0203 	and.w	r2, r3, #3
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 80a2 	beq.w	8002fae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	4b57      	ldr	r3, [pc, #348]	; (8002fcc <HAL_GPIO_Init+0x2e8>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	4a56      	ldr	r2, [pc, #344]	; (8002fcc <HAL_GPIO_Init+0x2e8>)
 8002e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e78:	6453      	str	r3, [r2, #68]	; 0x44
 8002e7a:	4b54      	ldr	r3, [pc, #336]	; (8002fcc <HAL_GPIO_Init+0x2e8>)
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e86:	4a52      	ldr	r2, [pc, #328]	; (8002fd0 <HAL_GPIO_Init+0x2ec>)
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	089b      	lsrs	r3, r3, #2
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	220f      	movs	r2, #15
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a49      	ldr	r2, [pc, #292]	; (8002fd4 <HAL_GPIO_Init+0x2f0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d019      	beq.n	8002ee6 <HAL_GPIO_Init+0x202>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a48      	ldr	r2, [pc, #288]	; (8002fd8 <HAL_GPIO_Init+0x2f4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <HAL_GPIO_Init+0x1fe>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a47      	ldr	r2, [pc, #284]	; (8002fdc <HAL_GPIO_Init+0x2f8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00d      	beq.n	8002ede <HAL_GPIO_Init+0x1fa>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a46      	ldr	r2, [pc, #280]	; (8002fe0 <HAL_GPIO_Init+0x2fc>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d007      	beq.n	8002eda <HAL_GPIO_Init+0x1f6>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a45      	ldr	r2, [pc, #276]	; (8002fe4 <HAL_GPIO_Init+0x300>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <HAL_GPIO_Init+0x1f2>
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	e008      	b.n	8002ee8 <HAL_GPIO_Init+0x204>
 8002ed6:	2307      	movs	r3, #7
 8002ed8:	e006      	b.n	8002ee8 <HAL_GPIO_Init+0x204>
 8002eda:	2303      	movs	r3, #3
 8002edc:	e004      	b.n	8002ee8 <HAL_GPIO_Init+0x204>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e002      	b.n	8002ee8 <HAL_GPIO_Init+0x204>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <HAL_GPIO_Init+0x204>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	69fa      	ldr	r2, [r7, #28]
 8002eea:	f002 0203 	and.w	r2, r2, #3
 8002eee:	0092      	lsls	r2, r2, #2
 8002ef0:	4093      	lsls	r3, r2
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ef8:	4935      	ldr	r1, [pc, #212]	; (8002fd0 <HAL_GPIO_Init+0x2ec>)
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	089b      	lsrs	r3, r3, #2
 8002efe:	3302      	adds	r3, #2
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f06:	4b38      	ldr	r3, [pc, #224]	; (8002fe8 <HAL_GPIO_Init+0x304>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4013      	ands	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f2a:	4a2f      	ldr	r2, [pc, #188]	; (8002fe8 <HAL_GPIO_Init+0x304>)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f30:	4b2d      	ldr	r3, [pc, #180]	; (8002fe8 <HAL_GPIO_Init+0x304>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f54:	4a24      	ldr	r2, [pc, #144]	; (8002fe8 <HAL_GPIO_Init+0x304>)
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f5a:	4b23      	ldr	r3, [pc, #140]	; (8002fe8 <HAL_GPIO_Init+0x304>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f7e:	4a1a      	ldr	r2, [pc, #104]	; (8002fe8 <HAL_GPIO_Init+0x304>)
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f84:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <HAL_GPIO_Init+0x304>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fa8:	4a0f      	ldr	r2, [pc, #60]	; (8002fe8 <HAL_GPIO_Init+0x304>)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	61fb      	str	r3, [r7, #28]
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	2b0f      	cmp	r3, #15
 8002fb8:	f67f aea2 	bls.w	8002d00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	bf00      	nop
 8002fc0:	3724      	adds	r7, #36	; 0x24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40013800 	.word	0x40013800
 8002fd4:	40020000 	.word	0x40020000
 8002fd8:	40020400 	.word	0x40020400
 8002fdc:	40020800 	.word	0x40020800
 8002fe0:	40020c00 	.word	0x40020c00
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40013c00 	.word	0x40013c00

08002fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	807b      	strh	r3, [r7, #2]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ffc:	787b      	ldrb	r3, [r7, #1]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003002:	887a      	ldrh	r2, [r7, #2]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003008:	e003      	b.n	8003012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800300a:	887b      	ldrh	r3, [r7, #2]
 800300c:	041a      	lsls	r2, r3, #16
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	619a      	str	r2, [r3, #24]
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e12b      	b.n	800328a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fe fb4a 	bl	80016e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2224      	movs	r2, #36	; 0x24
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0201 	bic.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003072:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003082:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003084:	f001 f8aa 	bl	80041dc <HAL_RCC_GetPCLK1Freq>
 8003088:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	4a81      	ldr	r2, [pc, #516]	; (8003294 <HAL_I2C_Init+0x274>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d807      	bhi.n	80030a4 <HAL_I2C_Init+0x84>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4a80      	ldr	r2, [pc, #512]	; (8003298 <HAL_I2C_Init+0x278>)
 8003098:	4293      	cmp	r3, r2
 800309a:	bf94      	ite	ls
 800309c:	2301      	movls	r3, #1
 800309e:	2300      	movhi	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	e006      	b.n	80030b2 <HAL_I2C_Init+0x92>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4a7d      	ldr	r2, [pc, #500]	; (800329c <HAL_I2C_Init+0x27c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	bf94      	ite	ls
 80030ac:	2301      	movls	r3, #1
 80030ae:	2300      	movhi	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e0e7      	b.n	800328a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4a78      	ldr	r2, [pc, #480]	; (80032a0 <HAL_I2C_Init+0x280>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	0c9b      	lsrs	r3, r3, #18
 80030c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	4a6a      	ldr	r2, [pc, #424]	; (8003294 <HAL_I2C_Init+0x274>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d802      	bhi.n	80030f4 <HAL_I2C_Init+0xd4>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	3301      	adds	r3, #1
 80030f2:	e009      	b.n	8003108 <HAL_I2C_Init+0xe8>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030fa:	fb02 f303 	mul.w	r3, r2, r3
 80030fe:	4a69      	ldr	r2, [pc, #420]	; (80032a4 <HAL_I2C_Init+0x284>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	099b      	lsrs	r3, r3, #6
 8003106:	3301      	adds	r3, #1
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	430b      	orrs	r3, r1
 800310e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800311a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	495c      	ldr	r1, [pc, #368]	; (8003294 <HAL_I2C_Init+0x274>)
 8003124:	428b      	cmp	r3, r1
 8003126:	d819      	bhi.n	800315c <HAL_I2C_Init+0x13c>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1e59      	subs	r1, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	fbb1 f3f3 	udiv	r3, r1, r3
 8003136:	1c59      	adds	r1, r3, #1
 8003138:	f640 73fc 	movw	r3, #4092	; 0xffc
 800313c:	400b      	ands	r3, r1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <HAL_I2C_Init+0x138>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1e59      	subs	r1, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003150:	3301      	adds	r3, #1
 8003152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003156:	e051      	b.n	80031fc <HAL_I2C_Init+0x1dc>
 8003158:	2304      	movs	r3, #4
 800315a:	e04f      	b.n	80031fc <HAL_I2C_Init+0x1dc>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d111      	bne.n	8003188 <HAL_I2C_Init+0x168>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1e58      	subs	r0, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	440b      	add	r3, r1
 8003172:	fbb0 f3f3 	udiv	r3, r0, r3
 8003176:	3301      	adds	r3, #1
 8003178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800317c:	2b00      	cmp	r3, #0
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	e012      	b.n	80031ae <HAL_I2C_Init+0x18e>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	1e58      	subs	r0, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6859      	ldr	r1, [r3, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	0099      	lsls	r1, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	fbb0 f3f3 	udiv	r3, r0, r3
 800319e:	3301      	adds	r3, #1
 80031a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_I2C_Init+0x196>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e022      	b.n	80031fc <HAL_I2C_Init+0x1dc>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10e      	bne.n	80031dc <HAL_I2C_Init+0x1bc>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1e58      	subs	r0, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6859      	ldr	r1, [r3, #4]
 80031c6:	460b      	mov	r3, r1
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	440b      	add	r3, r1
 80031cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d0:	3301      	adds	r3, #1
 80031d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031da:	e00f      	b.n	80031fc <HAL_I2C_Init+0x1dc>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1e58      	subs	r0, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	0099      	lsls	r1, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f2:	3301      	adds	r3, #1
 80031f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	6809      	ldr	r1, [r1, #0]
 8003200:	4313      	orrs	r3, r2
 8003202:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69da      	ldr	r2, [r3, #28]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800322a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6911      	ldr	r1, [r2, #16]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	68d2      	ldr	r2, [r2, #12]
 8003236:	4311      	orrs	r1, r2
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	430b      	orrs	r3, r1
 800323e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695a      	ldr	r2, [r3, #20]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	000186a0 	.word	0x000186a0
 8003298:	001e847f 	.word	0x001e847f
 800329c:	003d08ff 	.word	0x003d08ff
 80032a0:	431bde83 	.word	0x431bde83
 80032a4:	10624dd3 	.word	0x10624dd3

080032a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	4608      	mov	r0, r1
 80032b2:	4611      	mov	r1, r2
 80032b4:	461a      	mov	r2, r3
 80032b6:	4603      	mov	r3, r0
 80032b8:	817b      	strh	r3, [r7, #10]
 80032ba:	460b      	mov	r3, r1
 80032bc:	813b      	strh	r3, [r7, #8]
 80032be:	4613      	mov	r3, r2
 80032c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032c2:	f7fe fbc9 	bl	8001a58 <HAL_GetTick>
 80032c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	f040 80d9 	bne.w	8003488 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	2319      	movs	r3, #25
 80032dc:	2201      	movs	r2, #1
 80032de:	496d      	ldr	r1, [pc, #436]	; (8003494 <HAL_I2C_Mem_Write+0x1ec>)
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f971 	bl	80035c8 <I2C_WaitOnFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80032ec:	2302      	movs	r3, #2
 80032ee:	e0cc      	b.n	800348a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <HAL_I2C_Mem_Write+0x56>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e0c5      	b.n	800348a <HAL_I2C_Mem_Write+0x1e2>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b01      	cmp	r3, #1
 8003312:	d007      	beq.n	8003324 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003332:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2221      	movs	r2, #33	; 0x21
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2240      	movs	r2, #64	; 0x40
 8003340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a3a      	ldr	r2, [r7, #32]
 800334e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003354:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4a4d      	ldr	r2, [pc, #308]	; (8003498 <HAL_I2C_Mem_Write+0x1f0>)
 8003364:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003366:	88f8      	ldrh	r0, [r7, #6]
 8003368:	893a      	ldrh	r2, [r7, #8]
 800336a:	8979      	ldrh	r1, [r7, #10]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	9301      	str	r3, [sp, #4]
 8003370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	4603      	mov	r3, r0
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f890 	bl	800349c <I2C_RequestMemoryWrite>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d052      	beq.n	8003428 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e081      	b.n	800348a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 fa36 	bl	80037fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00d      	beq.n	80033b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	2b04      	cmp	r3, #4
 800339c:	d107      	bne.n	80033ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e06b      	b.n	800348a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	781a      	ldrb	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d11b      	bne.n	8003428 <HAL_I2C_Mem_Write+0x180>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d017      	beq.n	8003428 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	781a      	ldrb	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1aa      	bne.n	8003386 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 fa29 	bl	800388c <I2C_WaitOnBTFFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00d      	beq.n	800345c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	2b04      	cmp	r3, #4
 8003446:	d107      	bne.n	8003458 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003456:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e016      	b.n	800348a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	e000      	b.n	800348a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003488:	2302      	movs	r3, #2
  }
}
 800348a:	4618      	mov	r0, r3
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	00100002 	.word	0x00100002
 8003498:	ffff0000 	.word	0xffff0000

0800349c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	4608      	mov	r0, r1
 80034a6:	4611      	mov	r1, r2
 80034a8:	461a      	mov	r2, r3
 80034aa:	4603      	mov	r3, r0
 80034ac:	817b      	strh	r3, [r7, #10]
 80034ae:	460b      	mov	r3, r1
 80034b0:	813b      	strh	r3, [r7, #8]
 80034b2:	4613      	mov	r3, r2
 80034b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 f878 	bl	80035c8 <I2C_WaitOnFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00d      	beq.n	80034fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ec:	d103      	bne.n	80034f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e05f      	b.n	80035ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034fa:	897b      	ldrh	r3, [r7, #10]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003508:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	6a3a      	ldr	r2, [r7, #32]
 800350e:	492d      	ldr	r1, [pc, #180]	; (80035c4 <I2C_RequestMemoryWrite+0x128>)
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f8d3 	bl	80036bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e04c      	b.n	80035ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003538:	6a39      	ldr	r1, [r7, #32]
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 f95e 	bl	80037fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00d      	beq.n	8003562 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	2b04      	cmp	r3, #4
 800354c:	d107      	bne.n	800355e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800355c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e02b      	b.n	80035ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003562:	88fb      	ldrh	r3, [r7, #6]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d105      	bne.n	8003574 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003568:	893b      	ldrh	r3, [r7, #8]
 800356a:	b2da      	uxtb	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	611a      	str	r2, [r3, #16]
 8003572:	e021      	b.n	80035b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003574:	893b      	ldrh	r3, [r7, #8]
 8003576:	0a1b      	lsrs	r3, r3, #8
 8003578:	b29b      	uxth	r3, r3
 800357a:	b2da      	uxtb	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003584:	6a39      	ldr	r1, [r7, #32]
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f938 	bl	80037fc <I2C_WaitOnTXEFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00d      	beq.n	80035ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	2b04      	cmp	r3, #4
 8003598:	d107      	bne.n	80035aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e005      	b.n	80035ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035ae:	893b      	ldrh	r3, [r7, #8]
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	00010002 	.word	0x00010002

080035c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	4613      	mov	r3, r2
 80035d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035d8:	e048      	b.n	800366c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d044      	beq.n	800366c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e2:	f7fe fa39 	bl	8001a58 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d302      	bcc.n	80035f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d139      	bne.n	800366c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	0c1b      	lsrs	r3, r3, #16
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d10d      	bne.n	800361e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	43da      	mvns	r2, r3
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	4013      	ands	r3, r2
 800360e:	b29b      	uxth	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	e00c      	b.n	8003638 <I2C_WaitOnFlagUntilTimeout+0x70>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	43da      	mvns	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4013      	ands	r3, r2
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	429a      	cmp	r2, r3
 800363c:	d116      	bne.n	800366c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e023      	b.n	80036b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	0c1b      	lsrs	r3, r3, #16
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	d10d      	bne.n	8003692 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	43da      	mvns	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4013      	ands	r3, r2
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	461a      	mov	r2, r3
 8003690:	e00c      	b.n	80036ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	43da      	mvns	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4013      	ands	r3, r2
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf0c      	ite	eq
 80036a4:	2301      	moveq	r3, #1
 80036a6:	2300      	movne	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d093      	beq.n	80035da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036ca:	e071      	b.n	80037b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036da:	d123      	bne.n	8003724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	f043 0204 	orr.w	r2, r3, #4
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e067      	b.n	80037f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372a:	d041      	beq.n	80037b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372c:	f7fe f994 	bl	8001a58 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	d302      	bcc.n	8003742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d136      	bne.n	80037b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	0c1b      	lsrs	r3, r3, #16
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b01      	cmp	r3, #1
 800374a:	d10c      	bne.n	8003766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	43da      	mvns	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4013      	ands	r3, r2
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	bf14      	ite	ne
 800375e:	2301      	movne	r3, #1
 8003760:	2300      	moveq	r3, #0
 8003762:	b2db      	uxtb	r3, r3
 8003764:	e00b      	b.n	800377e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	43da      	mvns	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4013      	ands	r3, r2
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf14      	ite	ne
 8003778:	2301      	movne	r3, #1
 800377a:	2300      	moveq	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d016      	beq.n	80037b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2220      	movs	r2, #32
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	f043 0220 	orr.w	r2, r3, #32
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e021      	b.n	80037f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	0c1b      	lsrs	r3, r3, #16
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d10c      	bne.n	80037d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	43da      	mvns	r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	4013      	ands	r3, r2
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	bf14      	ite	ne
 80037cc:	2301      	movne	r3, #1
 80037ce:	2300      	moveq	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	e00b      	b.n	80037ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	43da      	mvns	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4013      	ands	r3, r2
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	bf14      	ite	ne
 80037e6:	2301      	movne	r3, #1
 80037e8:	2300      	moveq	r3, #0
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f47f af6d 	bne.w	80036cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003808:	e034      	b.n	8003874 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f886 	bl	800391c <I2C_IsAcknowledgeFailed>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e034      	b.n	8003884 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003820:	d028      	beq.n	8003874 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003822:	f7fe f919 	bl	8001a58 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	429a      	cmp	r2, r3
 8003830:	d302      	bcc.n	8003838 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d11d      	bne.n	8003874 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003842:	2b80      	cmp	r3, #128	; 0x80
 8003844:	d016      	beq.n	8003874 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	f043 0220 	orr.w	r2, r3, #32
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e007      	b.n	8003884 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387e:	2b80      	cmp	r3, #128	; 0x80
 8003880:	d1c3      	bne.n	800380a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003898:	e034      	b.n	8003904 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f83e 	bl	800391c <I2C_IsAcknowledgeFailed>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e034      	b.n	8003914 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b0:	d028      	beq.n	8003904 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b2:	f7fe f8d1 	bl	8001a58 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d302      	bcc.n	80038c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d11d      	bne.n	8003904 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d016      	beq.n	8003904 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	f043 0220 	orr.w	r2, r3, #32
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e007      	b.n	8003914 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b04      	cmp	r3, #4
 8003910:	d1c3      	bne.n	800389a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003932:	d11b      	bne.n	800396c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800393c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	f043 0204 	orr.w	r2, r3, #4
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
	...

0800397c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e267      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d075      	beq.n	8003a86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800399a:	4b88      	ldr	r3, [pc, #544]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 030c 	and.w	r3, r3, #12
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d00c      	beq.n	80039c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039a6:	4b85      	ldr	r3, [pc, #532]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d112      	bne.n	80039d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039b2:	4b82      	ldr	r3, [pc, #520]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039be:	d10b      	bne.n	80039d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c0:	4b7e      	ldr	r3, [pc, #504]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d05b      	beq.n	8003a84 <HAL_RCC_OscConfig+0x108>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d157      	bne.n	8003a84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e242      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e0:	d106      	bne.n	80039f0 <HAL_RCC_OscConfig+0x74>
 80039e2:	4b76      	ldr	r3, [pc, #472]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a75      	ldr	r2, [pc, #468]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 80039e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	e01d      	b.n	8003a2c <HAL_RCC_OscConfig+0xb0>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f8:	d10c      	bne.n	8003a14 <HAL_RCC_OscConfig+0x98>
 80039fa:	4b70      	ldr	r3, [pc, #448]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a6f      	ldr	r2, [pc, #444]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	4b6d      	ldr	r3, [pc, #436]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a6c      	ldr	r2, [pc, #432]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	e00b      	b.n	8003a2c <HAL_RCC_OscConfig+0xb0>
 8003a14:	4b69      	ldr	r3, [pc, #420]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a68      	ldr	r2, [pc, #416]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	4b66      	ldr	r3, [pc, #408]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a65      	ldr	r2, [pc, #404]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d013      	beq.n	8003a5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fe f810 	bl	8001a58 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fe f80c 	bl	8001a58 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	; 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e207      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4e:	4b5b      	ldr	r3, [pc, #364]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0xc0>
 8003a5a:	e014      	b.n	8003a86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5c:	f7fd fffc 	bl	8001a58 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a64:	f7fd fff8 	bl	8001a58 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b64      	cmp	r3, #100	; 0x64
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e1f3      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a76:	4b51      	ldr	r3, [pc, #324]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0xe8>
 8003a82:	e000      	b.n	8003a86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d063      	beq.n	8003b5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a92:	4b4a      	ldr	r3, [pc, #296]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00b      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a9e:	4b47      	ldr	r3, [pc, #284]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d11c      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aaa:	4b44      	ldr	r3, [pc, #272]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d116      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab6:	4b41      	ldr	r3, [pc, #260]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d005      	beq.n	8003ace <HAL_RCC_OscConfig+0x152>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d001      	beq.n	8003ace <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e1c7      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ace:	4b3b      	ldr	r3, [pc, #236]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4937      	ldr	r1, [pc, #220]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ae2:	e03a      	b.n	8003b5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d020      	beq.n	8003b2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aec:	4b34      	ldr	r3, [pc, #208]	; (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af2:	f7fd ffb1 	bl	8001a58 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003afa:	f7fd ffad 	bl	8001a58 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e1a8      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0c:	4b2b      	ldr	r3, [pc, #172]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b18:	4b28      	ldr	r3, [pc, #160]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	4925      	ldr	r1, [pc, #148]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	600b      	str	r3, [r1, #0]
 8003b2c:	e015      	b.n	8003b5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b2e:	4b24      	ldr	r3, [pc, #144]	; (8003bc0 <HAL_RCC_OscConfig+0x244>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b34:	f7fd ff90 	bl	8001a58 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b3c:	f7fd ff8c 	bl	8001a58 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e187      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b4e:	4b1b      	ldr	r3, [pc, #108]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d036      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d016      	beq.n	8003b9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b6e:	4b15      	ldr	r3, [pc, #84]	; (8003bc4 <HAL_RCC_OscConfig+0x248>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b74:	f7fd ff70 	bl	8001a58 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b7c:	f7fd ff6c 	bl	8001a58 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e167      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <HAL_RCC_OscConfig+0x240>)
 8003b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCC_OscConfig+0x200>
 8003b9a:	e01b      	b.n	8003bd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b9c:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <HAL_RCC_OscConfig+0x248>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba2:	f7fd ff59 	bl	8001a58 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba8:	e00e      	b.n	8003bc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003baa:	f7fd ff55 	bl	8001a58 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d907      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e150      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	42470000 	.word	0x42470000
 8003bc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc8:	4b88      	ldr	r3, [pc, #544]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1ea      	bne.n	8003baa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8097 	beq.w	8003d10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003be2:	2300      	movs	r3, #0
 8003be4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003be6:	4b81      	ldr	r3, [pc, #516]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10f      	bne.n	8003c12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	4b7d      	ldr	r3, [pc, #500]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	4a7c      	ldr	r2, [pc, #496]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c00:	6413      	str	r3, [r2, #64]	; 0x40
 8003c02:	4b7a      	ldr	r3, [pc, #488]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0a:	60bb      	str	r3, [r7, #8]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c12:	4b77      	ldr	r3, [pc, #476]	; (8003df0 <HAL_RCC_OscConfig+0x474>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d118      	bne.n	8003c50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c1e:	4b74      	ldr	r3, [pc, #464]	; (8003df0 <HAL_RCC_OscConfig+0x474>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a73      	ldr	r2, [pc, #460]	; (8003df0 <HAL_RCC_OscConfig+0x474>)
 8003c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c2a:	f7fd ff15 	bl	8001a58 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c32:	f7fd ff11 	bl	8001a58 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e10c      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c44:	4b6a      	ldr	r3, [pc, #424]	; (8003df0 <HAL_RCC_OscConfig+0x474>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d106      	bne.n	8003c66 <HAL_RCC_OscConfig+0x2ea>
 8003c58:	4b64      	ldr	r3, [pc, #400]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5c:	4a63      	ldr	r2, [pc, #396]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	6713      	str	r3, [r2, #112]	; 0x70
 8003c64:	e01c      	b.n	8003ca0 <HAL_RCC_OscConfig+0x324>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b05      	cmp	r3, #5
 8003c6c:	d10c      	bne.n	8003c88 <HAL_RCC_OscConfig+0x30c>
 8003c6e:	4b5f      	ldr	r3, [pc, #380]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	4a5e      	ldr	r2, [pc, #376]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7a:	4b5c      	ldr	r3, [pc, #368]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	4a5b      	ldr	r2, [pc, #364]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003c80:	f043 0301 	orr.w	r3, r3, #1
 8003c84:	6713      	str	r3, [r2, #112]	; 0x70
 8003c86:	e00b      	b.n	8003ca0 <HAL_RCC_OscConfig+0x324>
 8003c88:	4b58      	ldr	r3, [pc, #352]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8c:	4a57      	ldr	r2, [pc, #348]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003c8e:	f023 0301 	bic.w	r3, r3, #1
 8003c92:	6713      	str	r3, [r2, #112]	; 0x70
 8003c94:	4b55      	ldr	r3, [pc, #340]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	4a54      	ldr	r2, [pc, #336]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003c9a:	f023 0304 	bic.w	r3, r3, #4
 8003c9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d015      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca8:	f7fd fed6 	bl	8001a58 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cae:	e00a      	b.n	8003cc6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb0:	f7fd fed2 	bl	8001a58 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e0cb      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc6:	4b49      	ldr	r3, [pc, #292]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0ee      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x334>
 8003cd2:	e014      	b.n	8003cfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd4:	f7fd fec0 	bl	8001a58 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cda:	e00a      	b.n	8003cf2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cdc:	f7fd febc 	bl	8001a58 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e0b5      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf2:	4b3e      	ldr	r3, [pc, #248]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1ee      	bne.n	8003cdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cfe:	7dfb      	ldrb	r3, [r7, #23]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d105      	bne.n	8003d10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d04:	4b39      	ldr	r3, [pc, #228]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	4a38      	ldr	r2, [pc, #224]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 80a1 	beq.w	8003e5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d1a:	4b34      	ldr	r3, [pc, #208]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d05c      	beq.n	8003de0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d141      	bne.n	8003db2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d2e:	4b31      	ldr	r3, [pc, #196]	; (8003df4 <HAL_RCC_OscConfig+0x478>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d34:	f7fd fe90 	bl	8001a58 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d3c:	f7fd fe8c 	bl	8001a58 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e087      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4e:	4b27      	ldr	r3, [pc, #156]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69da      	ldr	r2, [r3, #28]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	019b      	lsls	r3, r3, #6
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d70:	085b      	lsrs	r3, r3, #1
 8003d72:	3b01      	subs	r3, #1
 8003d74:	041b      	lsls	r3, r3, #16
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	061b      	lsls	r3, r3, #24
 8003d7e:	491b      	ldr	r1, [pc, #108]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d84:	4b1b      	ldr	r3, [pc, #108]	; (8003df4 <HAL_RCC_OscConfig+0x478>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8a:	f7fd fe65 	bl	8001a58 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d92:	f7fd fe61 	bl	8001a58 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e05c      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da4:	4b11      	ldr	r3, [pc, #68]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0f0      	beq.n	8003d92 <HAL_RCC_OscConfig+0x416>
 8003db0:	e054      	b.n	8003e5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db2:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <HAL_RCC_OscConfig+0x478>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db8:	f7fd fe4e 	bl	8001a58 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc0:	f7fd fe4a 	bl	8001a58 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e045      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd2:	4b06      	ldr	r3, [pc, #24]	; (8003dec <HAL_RCC_OscConfig+0x470>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x444>
 8003dde:	e03d      	b.n	8003e5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d107      	bne.n	8003df8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e038      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
 8003dec:	40023800 	.word	0x40023800
 8003df0:	40007000 	.word	0x40007000
 8003df4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003df8:	4b1b      	ldr	r3, [pc, #108]	; (8003e68 <HAL_RCC_OscConfig+0x4ec>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d028      	beq.n	8003e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d121      	bne.n	8003e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d11a      	bne.n	8003e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e28:	4013      	ands	r3, r2
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d111      	bne.n	8003e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3e:	085b      	lsrs	r3, r3, #1
 8003e40:	3b01      	subs	r3, #1
 8003e42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d107      	bne.n	8003e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40023800 	.word	0x40023800

08003e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e0cc      	b.n	800401a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e80:	4b68      	ldr	r3, [pc, #416]	; (8004024 <HAL_RCC_ClockConfig+0x1b8>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d90c      	bls.n	8003ea8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8e:	4b65      	ldr	r3, [pc, #404]	; (8004024 <HAL_RCC_ClockConfig+0x1b8>)
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e96:	4b63      	ldr	r3, [pc, #396]	; (8004024 <HAL_RCC_ClockConfig+0x1b8>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d001      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e0b8      	b.n	800401a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d020      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d005      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ec0:	4b59      	ldr	r3, [pc, #356]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	4a58      	ldr	r2, [pc, #352]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0308 	and.w	r3, r3, #8
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ed8:	4b53      	ldr	r3, [pc, #332]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	4a52      	ldr	r2, [pc, #328]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ee2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee4:	4b50      	ldr	r3, [pc, #320]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	494d      	ldr	r1, [pc, #308]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d044      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d107      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0a:	4b47      	ldr	r3, [pc, #284]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d119      	bne.n	8003f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e07f      	b.n	800401a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d003      	beq.n	8003f2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d107      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f2a:	4b3f      	ldr	r3, [pc, #252]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d109      	bne.n	8003f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e06f      	b.n	800401a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f3a:	4b3b      	ldr	r3, [pc, #236]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e067      	b.n	800401a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f4a:	4b37      	ldr	r3, [pc, #220]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f023 0203 	bic.w	r2, r3, #3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	4934      	ldr	r1, [pc, #208]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f5c:	f7fd fd7c 	bl	8001a58 <HAL_GetTick>
 8003f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f62:	e00a      	b.n	8003f7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f64:	f7fd fd78 	bl	8001a58 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e04f      	b.n	800401a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7a:	4b2b      	ldr	r3, [pc, #172]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 020c 	and.w	r2, r3, #12
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d1eb      	bne.n	8003f64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f8c:	4b25      	ldr	r3, [pc, #148]	; (8004024 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d20c      	bcs.n	8003fb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9a:	4b22      	ldr	r3, [pc, #136]	; (8004024 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa2:	4b20      	ldr	r3, [pc, #128]	; (8004024 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e032      	b.n	800401a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d008      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc0:	4b19      	ldr	r3, [pc, #100]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4916      	ldr	r1, [pc, #88]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d009      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fde:	4b12      	ldr	r3, [pc, #72]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	490e      	ldr	r1, [pc, #56]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ff2:	f000 f821 	bl	8004038 <HAL_RCC_GetSysClockFreq>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	091b      	lsrs	r3, r3, #4
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	490a      	ldr	r1, [pc, #40]	; (800402c <HAL_RCC_ClockConfig+0x1c0>)
 8004004:	5ccb      	ldrb	r3, [r1, r3]
 8004006:	fa22 f303 	lsr.w	r3, r2, r3
 800400a:	4a09      	ldr	r2, [pc, #36]	; (8004030 <HAL_RCC_ClockConfig+0x1c4>)
 800400c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800400e:	4b09      	ldr	r3, [pc, #36]	; (8004034 <HAL_RCC_ClockConfig+0x1c8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f7fd fcdc 	bl	80019d0 <HAL_InitTick>

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40023c00 	.word	0x40023c00
 8004028:	40023800 	.word	0x40023800
 800402c:	0800a808 	.word	0x0800a808
 8004030:	20000008 	.word	0x20000008
 8004034:	2000000c 	.word	0x2000000c

08004038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800403c:	b090      	sub	sp, #64	; 0x40
 800403e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	637b      	str	r3, [r7, #52]	; 0x34
 8004044:	2300      	movs	r3, #0
 8004046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004048:	2300      	movs	r3, #0
 800404a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004050:	4b59      	ldr	r3, [pc, #356]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 030c 	and.w	r3, r3, #12
 8004058:	2b08      	cmp	r3, #8
 800405a:	d00d      	beq.n	8004078 <HAL_RCC_GetSysClockFreq+0x40>
 800405c:	2b08      	cmp	r3, #8
 800405e:	f200 80a1 	bhi.w	80041a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_RCC_GetSysClockFreq+0x34>
 8004066:	2b04      	cmp	r3, #4
 8004068:	d003      	beq.n	8004072 <HAL_RCC_GetSysClockFreq+0x3a>
 800406a:	e09b      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800406c:	4b53      	ldr	r3, [pc, #332]	; (80041bc <HAL_RCC_GetSysClockFreq+0x184>)
 800406e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004070:	e09b      	b.n	80041aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004072:	4b53      	ldr	r3, [pc, #332]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004074:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004076:	e098      	b.n	80041aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004078:	4b4f      	ldr	r3, [pc, #316]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004080:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004082:	4b4d      	ldr	r3, [pc, #308]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d028      	beq.n	80040e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800408e:	4b4a      	ldr	r3, [pc, #296]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	099b      	lsrs	r3, r3, #6
 8004094:	2200      	movs	r2, #0
 8004096:	623b      	str	r3, [r7, #32]
 8004098:	627a      	str	r2, [r7, #36]	; 0x24
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040a0:	2100      	movs	r1, #0
 80040a2:	4b47      	ldr	r3, [pc, #284]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80040a4:	fb03 f201 	mul.w	r2, r3, r1
 80040a8:	2300      	movs	r3, #0
 80040aa:	fb00 f303 	mul.w	r3, r0, r3
 80040ae:	4413      	add	r3, r2
 80040b0:	4a43      	ldr	r2, [pc, #268]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80040b2:	fba0 1202 	umull	r1, r2, r0, r2
 80040b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040b8:	460a      	mov	r2, r1
 80040ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80040bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040be:	4413      	add	r3, r2
 80040c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c4:	2200      	movs	r2, #0
 80040c6:	61bb      	str	r3, [r7, #24]
 80040c8:	61fa      	str	r2, [r7, #28]
 80040ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80040d2:	f7fc f881 	bl	80001d8 <__aeabi_uldivmod>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	4613      	mov	r3, r2
 80040dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040de:	e053      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e0:	4b35      	ldr	r3, [pc, #212]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	099b      	lsrs	r3, r3, #6
 80040e6:	2200      	movs	r2, #0
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	617a      	str	r2, [r7, #20]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040f2:	f04f 0b00 	mov.w	fp, #0
 80040f6:	4652      	mov	r2, sl
 80040f8:	465b      	mov	r3, fp
 80040fa:	f04f 0000 	mov.w	r0, #0
 80040fe:	f04f 0100 	mov.w	r1, #0
 8004102:	0159      	lsls	r1, r3, #5
 8004104:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004108:	0150      	lsls	r0, r2, #5
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	ebb2 080a 	subs.w	r8, r2, sl
 8004112:	eb63 090b 	sbc.w	r9, r3, fp
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004122:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004126:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800412a:	ebb2 0408 	subs.w	r4, r2, r8
 800412e:	eb63 0509 	sbc.w	r5, r3, r9
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	00eb      	lsls	r3, r5, #3
 800413c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004140:	00e2      	lsls	r2, r4, #3
 8004142:	4614      	mov	r4, r2
 8004144:	461d      	mov	r5, r3
 8004146:	eb14 030a 	adds.w	r3, r4, sl
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	eb45 030b 	adc.w	r3, r5, fp
 8004150:	607b      	str	r3, [r7, #4]
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	f04f 0300 	mov.w	r3, #0
 800415a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800415e:	4629      	mov	r1, r5
 8004160:	028b      	lsls	r3, r1, #10
 8004162:	4621      	mov	r1, r4
 8004164:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004168:	4621      	mov	r1, r4
 800416a:	028a      	lsls	r2, r1, #10
 800416c:	4610      	mov	r0, r2
 800416e:	4619      	mov	r1, r3
 8004170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004172:	2200      	movs	r2, #0
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	60fa      	str	r2, [r7, #12]
 8004178:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800417c:	f7fc f82c 	bl	80001d8 <__aeabi_uldivmod>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4613      	mov	r3, r2
 8004186:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004188:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	0c1b      	lsrs	r3, r3, #16
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	3301      	adds	r3, #1
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004198:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041a2:	e002      	b.n	80041aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_RCC_GetSysClockFreq+0x184>)
 80041a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3740      	adds	r7, #64	; 0x40
 80041b0:	46bd      	mov	sp, r7
 80041b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041b6:	bf00      	nop
 80041b8:	40023800 	.word	0x40023800
 80041bc:	00f42400 	.word	0x00f42400
 80041c0:	017d7840 	.word	0x017d7840

080041c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041c8:	4b03      	ldr	r3, [pc, #12]	; (80041d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041ca:	681b      	ldr	r3, [r3, #0]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	20000008 	.word	0x20000008

080041dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041e0:	f7ff fff0 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 80041e4:	4602      	mov	r2, r0
 80041e6:	4b05      	ldr	r3, [pc, #20]	; (80041fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	0a9b      	lsrs	r3, r3, #10
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	4903      	ldr	r1, [pc, #12]	; (8004200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041f2:	5ccb      	ldrb	r3, [r1, r3]
 80041f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40023800 	.word	0x40023800
 8004200:	0800a818 	.word	0x0800a818

08004204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004208:	f7ff ffdc 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 800420c:	4602      	mov	r2, r0
 800420e:	4b05      	ldr	r3, [pc, #20]	; (8004224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	0b5b      	lsrs	r3, r3, #13
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	4903      	ldr	r1, [pc, #12]	; (8004228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800421a:	5ccb      	ldrb	r3, [r1, r3]
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004220:	4618      	mov	r0, r3
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40023800 	.word	0x40023800
 8004228:	0800a818 	.word	0x0800a818

0800422c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e042      	b.n	80042c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d106      	bne.n	8004258 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fd fa8c 	bl	8001770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2224      	movs	r2, #36	; 0x24
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800426e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fcdb 	bl	8004c2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	691a      	ldr	r2, [r3, #16]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004284:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695a      	ldr	r2, [r3, #20]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004294:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	4613      	mov	r3, r2
 80042d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b20      	cmp	r3, #32
 80042e4:	d112      	bne.n	800430c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <HAL_UART_Receive_IT+0x26>
 80042ec:	88fb      	ldrh	r3, [r7, #6]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e00b      	b.n	800430e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	461a      	mov	r2, r3
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 faba 	bl	800487c <UART_Start_Receive_IT>
 8004308:	4603      	mov	r3, r0
 800430a:	e000      	b.n	800430e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800430c:	2302      	movs	r3, #2
  }
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b0ba      	sub	sp, #232	; 0xe8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800433e:	2300      	movs	r3, #0
 8004340:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004344:	2300      	movs	r3, #0
 8004346:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800434a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004356:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10f      	bne.n	800437e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800435e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004362:	f003 0320 	and.w	r3, r3, #32
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <HAL_UART_IRQHandler+0x66>
 800436a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fb99 	bl	8004aae <UART_Receive_IT>
      return;
 800437c:	e25b      	b.n	8004836 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800437e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 80de 	beq.w	8004544 <HAL_UART_IRQHandler+0x22c>
 8004388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d106      	bne.n	80043a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004398:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 80d1 	beq.w	8004544 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00b      	beq.n	80043c6 <HAL_UART_IRQHandler+0xae>
 80043ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043be:	f043 0201 	orr.w	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00b      	beq.n	80043ea <HAL_UART_IRQHandler+0xd2>
 80043d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d005      	beq.n	80043ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e2:	f043 0202 	orr.w	r2, r3, #2
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00b      	beq.n	800440e <HAL_UART_IRQHandler+0xf6>
 80043f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d005      	beq.n	800440e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	f043 0204 	orr.w	r2, r3, #4
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800440e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d011      	beq.n	800443e <HAL_UART_IRQHandler+0x126>
 800441a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800441e:	f003 0320 	and.w	r3, r3, #32
 8004422:	2b00      	cmp	r3, #0
 8004424:	d105      	bne.n	8004432 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d005      	beq.n	800443e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004436:	f043 0208 	orr.w	r2, r3, #8
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 81f2 	beq.w	800482c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800444c:	f003 0320 	and.w	r3, r3, #32
 8004450:	2b00      	cmp	r3, #0
 8004452:	d008      	beq.n	8004466 <HAL_UART_IRQHandler+0x14e>
 8004454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 fb24 	bl	8004aae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004470:	2b40      	cmp	r3, #64	; 0x40
 8004472:	bf0c      	ite	eq
 8004474:	2301      	moveq	r3, #1
 8004476:	2300      	movne	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d103      	bne.n	8004492 <HAL_UART_IRQHandler+0x17a>
 800448a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800448e:	2b00      	cmp	r3, #0
 8004490:	d04f      	beq.n	8004532 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fa2c 	bl	80048f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a2:	2b40      	cmp	r3, #64	; 0x40
 80044a4:	d141      	bne.n	800452a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3314      	adds	r3, #20
 80044ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80044bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3314      	adds	r3, #20
 80044ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80044d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044e2:	e841 2300 	strex	r3, r2, [r1]
 80044e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1d9      	bne.n	80044a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d013      	beq.n	8004522 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fe:	4a7e      	ldr	r2, [pc, #504]	; (80046f8 <HAL_UART_IRQHandler+0x3e0>)
 8004500:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe f960 	bl	80027cc <HAL_DMA_Abort_IT>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d016      	beq.n	8004540 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800451c:	4610      	mov	r0, r2
 800451e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004520:	e00e      	b.n	8004540 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f994 	bl	8004850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004528:	e00a      	b.n	8004540 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f990 	bl	8004850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004530:	e006      	b.n	8004540 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f98c 	bl	8004850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800453e:	e175      	b.n	800482c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004540:	bf00      	nop
    return;
 8004542:	e173      	b.n	800482c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	2b01      	cmp	r3, #1
 800454a:	f040 814f 	bne.w	80047ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800454e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004552:	f003 0310 	and.w	r3, r3, #16
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 8148 	beq.w	80047ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800455c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 8141 	beq.w	80047ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800456a:	2300      	movs	r3, #0
 800456c:	60bb      	str	r3, [r7, #8]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	60bb      	str	r3, [r7, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	60bb      	str	r3, [r7, #8]
 800457e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458a:	2b40      	cmp	r3, #64	; 0x40
 800458c:	f040 80b6 	bne.w	80046fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800459c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 8145 	beq.w	8004830 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045ae:	429a      	cmp	r2, r3
 80045b0:	f080 813e 	bcs.w	8004830 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c6:	f000 8088 	beq.w	80046da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	330c      	adds	r3, #12
 80045d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045d8:	e853 3f00 	ldrex	r3, [r3]
 80045dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80045e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	330c      	adds	r3, #12
 80045f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80045f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004602:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004606:	e841 2300 	strex	r3, r2, [r1]
 800460a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800460e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1d9      	bne.n	80045ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3314      	adds	r3, #20
 800461c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004620:	e853 3f00 	ldrex	r3, [r3]
 8004624:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004628:	f023 0301 	bic.w	r3, r3, #1
 800462c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3314      	adds	r3, #20
 8004636:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800463a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800463e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004640:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004642:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004646:	e841 2300 	strex	r3, r2, [r1]
 800464a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800464c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1e1      	bne.n	8004616 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3314      	adds	r3, #20
 8004658:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800465c:	e853 3f00 	ldrex	r3, [r3]
 8004660:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004668:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3314      	adds	r3, #20
 8004672:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004676:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004678:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800467c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800467e:	e841 2300 	strex	r3, r2, [r1]
 8004682:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004684:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1e3      	bne.n	8004652 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	330c      	adds	r3, #12
 800469e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a2:	e853 3f00 	ldrex	r3, [r3]
 80046a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046aa:	f023 0310 	bic.w	r3, r3, #16
 80046ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	330c      	adds	r3, #12
 80046b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80046bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80046be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046c4:	e841 2300 	strex	r3, r2, [r1]
 80046c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e3      	bne.n	8004698 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fe f809 	bl	80026ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2202      	movs	r2, #2
 80046de:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	4619      	mov	r1, r3
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f8b7 	bl	8004864 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046f6:	e09b      	b.n	8004830 <HAL_UART_IRQHandler+0x518>
 80046f8:	080049b7 	.word	0x080049b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004704:	b29b      	uxth	r3, r3
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004710:	b29b      	uxth	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 808e 	beq.w	8004834 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004718:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 8089 	beq.w	8004834 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	330c      	adds	r3, #12
 8004728:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004734:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004738:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	330c      	adds	r3, #12
 8004742:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004746:	647a      	str	r2, [r7, #68]	; 0x44
 8004748:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800474c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e3      	bne.n	8004722 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3314      	adds	r3, #20
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	e853 3f00 	ldrex	r3, [r3]
 8004768:	623b      	str	r3, [r7, #32]
   return(result);
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3314      	adds	r3, #20
 800477a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800477e:	633a      	str	r2, [r7, #48]	; 0x30
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004786:	e841 2300 	strex	r3, r2, [r1]
 800478a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1e3      	bne.n	800475a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	330c      	adds	r3, #12
 80047a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	e853 3f00 	ldrex	r3, [r3]
 80047ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0310 	bic.w	r3, r3, #16
 80047b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	330c      	adds	r3, #12
 80047c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80047c4:	61fa      	str	r2, [r7, #28]
 80047c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c8:	69b9      	ldr	r1, [r7, #24]
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	e841 2300 	strex	r3, r2, [r1]
 80047d0:	617b      	str	r3, [r7, #20]
   return(result);
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1e3      	bne.n	80047a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047e2:	4619      	mov	r1, r3
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f83d 	bl	8004864 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047ea:	e023      	b.n	8004834 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d009      	beq.n	800480c <HAL_UART_IRQHandler+0x4f4>
 80047f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f8ea 	bl	80049de <UART_Transmit_IT>
    return;
 800480a:	e014      	b.n	8004836 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800480c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00e      	beq.n	8004836 <HAL_UART_IRQHandler+0x51e>
 8004818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800481c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004820:	2b00      	cmp	r3, #0
 8004822:	d008      	beq.n	8004836 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f92a 	bl	8004a7e <UART_EndTransmit_IT>
    return;
 800482a:	e004      	b.n	8004836 <HAL_UART_IRQHandler+0x51e>
    return;
 800482c:	bf00      	nop
 800482e:	e002      	b.n	8004836 <HAL_UART_IRQHandler+0x51e>
      return;
 8004830:	bf00      	nop
 8004832:	e000      	b.n	8004836 <HAL_UART_IRQHandler+0x51e>
      return;
 8004834:	bf00      	nop
  }
}
 8004836:	37e8      	adds	r7, #232	; 0xe8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	4613      	mov	r3, r2
 8004888:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	88fa      	ldrh	r2, [r7, #6]
 8004894:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	88fa      	ldrh	r2, [r7, #6]
 800489a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2222      	movs	r2, #34	; 0x22
 80048a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d007      	beq.n	80048c2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048c0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695a      	ldr	r2, [r3, #20]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0201 	orr.w	r2, r2, #1
 80048d0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68da      	ldr	r2, [r3, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f042 0220 	orr.w	r2, r2, #32
 80048e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b095      	sub	sp, #84	; 0x54
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	330c      	adds	r3, #12
 80048fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004902:	e853 3f00 	ldrex	r3, [r3]
 8004906:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800490e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	330c      	adds	r3, #12
 8004916:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004918:	643a      	str	r2, [r7, #64]	; 0x40
 800491a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800491e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004920:	e841 2300 	strex	r3, r2, [r1]
 8004924:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e5      	bne.n	80048f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3314      	adds	r3, #20
 8004932:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	61fb      	str	r3, [r7, #28]
   return(result);
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	f023 0301 	bic.w	r3, r3, #1
 8004942:	64bb      	str	r3, [r7, #72]	; 0x48
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3314      	adds	r3, #20
 800494a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800494c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800494e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e5      	bne.n	800492c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004964:	2b01      	cmp	r3, #1
 8004966:	d119      	bne.n	800499c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	60bb      	str	r3, [r7, #8]
   return(result);
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f023 0310 	bic.w	r3, r3, #16
 800497e:	647b      	str	r3, [r7, #68]	; 0x44
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	330c      	adds	r3, #12
 8004986:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004988:	61ba      	str	r2, [r7, #24]
 800498a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498c:	6979      	ldr	r1, [r7, #20]
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	e841 2300 	strex	r3, r2, [r1]
 8004994:	613b      	str	r3, [r7, #16]
   return(result);
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1e5      	bne.n	8004968 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80049aa:	bf00      	nop
 80049ac:	3754      	adds	r7, #84	; 0x54
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f7ff ff3d 	bl	8004850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049d6:	bf00      	nop
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049de:	b480      	push	{r7}
 80049e0:	b085      	sub	sp, #20
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b21      	cmp	r3, #33	; 0x21
 80049f0:	d13e      	bne.n	8004a70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049fa:	d114      	bne.n	8004a26 <UART_Transmit_IT+0x48>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d110      	bne.n	8004a26 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	1c9a      	adds	r2, r3, #2
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	621a      	str	r2, [r3, #32]
 8004a24:	e008      	b.n	8004a38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	1c59      	adds	r1, r3, #1
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6211      	str	r1, [r2, #32]
 8004a30:	781a      	ldrb	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	4619      	mov	r1, r3
 8004a46:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10f      	bne.n	8004a6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	e000      	b.n	8004a72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a70:	2302      	movs	r3, #2
  }
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b082      	sub	sp, #8
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7ff fecc 	bl	800483c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b08c      	sub	sp, #48	; 0x30
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b22      	cmp	r3, #34	; 0x22
 8004ac0:	f040 80ae 	bne.w	8004c20 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004acc:	d117      	bne.n	8004afe <UART_Receive_IT+0x50>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d113      	bne.n	8004afe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ade:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af6:	1c9a      	adds	r2, r3, #2
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	629a      	str	r2, [r3, #40]	; 0x28
 8004afc:	e026      	b.n	8004b4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b04:	2300      	movs	r3, #0
 8004b06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b10:	d007      	beq.n	8004b22 <UART_Receive_IT+0x74>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <UART_Receive_IT+0x82>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	e008      	b.n	8004b42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	4619      	mov	r1, r3
 8004b5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d15d      	bne.n	8004c1c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0220 	bic.w	r2, r2, #32
 8004b6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695a      	ldr	r2, [r3, #20]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0201 	bic.w	r2, r2, #1
 8004b8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d135      	bne.n	8004c12 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	330c      	adds	r3, #12
 8004bb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	e853 3f00 	ldrex	r3, [r3]
 8004bba:	613b      	str	r3, [r7, #16]
   return(result);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	f023 0310 	bic.w	r3, r3, #16
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	330c      	adds	r3, #12
 8004bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bcc:	623a      	str	r2, [r7, #32]
 8004bce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd0:	69f9      	ldr	r1, [r7, #28]
 8004bd2:	6a3a      	ldr	r2, [r7, #32]
 8004bd4:	e841 2300 	strex	r3, r2, [r1]
 8004bd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e5      	bne.n	8004bac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0310 	and.w	r3, r3, #16
 8004bea:	2b10      	cmp	r3, #16
 8004bec:	d10a      	bne.n	8004c04 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c08:	4619      	mov	r1, r3
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7ff fe2a 	bl	8004864 <HAL_UARTEx_RxEventCallback>
 8004c10:	e002      	b.n	8004c18 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fc fe62 	bl	80018dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	e002      	b.n	8004c22 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e000      	b.n	8004c22 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c20:	2302      	movs	r3, #2
  }
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3730      	adds	r7, #48	; 0x30
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c30:	b0c0      	sub	sp, #256	; 0x100
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c48:	68d9      	ldr	r1, [r3, #12]
 8004c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	ea40 0301 	orr.w	r3, r0, r1
 8004c54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c84:	f021 010c 	bic.w	r1, r1, #12
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c92:	430b      	orrs	r3, r1
 8004c94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca6:	6999      	ldr	r1, [r3, #24]
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	ea40 0301 	orr.w	r3, r0, r1
 8004cb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	4b8f      	ldr	r3, [pc, #572]	; (8004ef8 <UART_SetConfig+0x2cc>)
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d005      	beq.n	8004ccc <UART_SetConfig+0xa0>
 8004cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4b8d      	ldr	r3, [pc, #564]	; (8004efc <UART_SetConfig+0x2d0>)
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d104      	bne.n	8004cd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ccc:	f7ff fa9a 	bl	8004204 <HAL_RCC_GetPCLK2Freq>
 8004cd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004cd4:	e003      	b.n	8004cde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cd6:	f7ff fa81 	bl	80041dc <HAL_RCC_GetPCLK1Freq>
 8004cda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce8:	f040 810c 	bne.w	8004f04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cf6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004cfe:	4622      	mov	r2, r4
 8004d00:	462b      	mov	r3, r5
 8004d02:	1891      	adds	r1, r2, r2
 8004d04:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d06:	415b      	adcs	r3, r3
 8004d08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d0e:	4621      	mov	r1, r4
 8004d10:	eb12 0801 	adds.w	r8, r2, r1
 8004d14:	4629      	mov	r1, r5
 8004d16:	eb43 0901 	adc.w	r9, r3, r1
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d2e:	4690      	mov	r8, r2
 8004d30:	4699      	mov	r9, r3
 8004d32:	4623      	mov	r3, r4
 8004d34:	eb18 0303 	adds.w	r3, r8, r3
 8004d38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d3c:	462b      	mov	r3, r5
 8004d3e:	eb49 0303 	adc.w	r3, r9, r3
 8004d42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	18db      	adds	r3, r3, r3
 8004d5e:	653b      	str	r3, [r7, #80]	; 0x50
 8004d60:	4613      	mov	r3, r2
 8004d62:	eb42 0303 	adc.w	r3, r2, r3
 8004d66:	657b      	str	r3, [r7, #84]	; 0x54
 8004d68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d70:	f7fb fa32 	bl	80001d8 <__aeabi_uldivmod>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4b61      	ldr	r3, [pc, #388]	; (8004f00 <UART_SetConfig+0x2d4>)
 8004d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	011c      	lsls	r4, r3, #4
 8004d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d86:	2200      	movs	r2, #0
 8004d88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d94:	4642      	mov	r2, r8
 8004d96:	464b      	mov	r3, r9
 8004d98:	1891      	adds	r1, r2, r2
 8004d9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d9c:	415b      	adcs	r3, r3
 8004d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004da0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004da4:	4641      	mov	r1, r8
 8004da6:	eb12 0a01 	adds.w	sl, r2, r1
 8004daa:	4649      	mov	r1, r9
 8004dac:	eb43 0b01 	adc.w	fp, r3, r1
 8004db0:	f04f 0200 	mov.w	r2, #0
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004dbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004dc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dc4:	4692      	mov	sl, r2
 8004dc6:	469b      	mov	fp, r3
 8004dc8:	4643      	mov	r3, r8
 8004dca:	eb1a 0303 	adds.w	r3, sl, r3
 8004dce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dd2:	464b      	mov	r3, r9
 8004dd4:	eb4b 0303 	adc.w	r3, fp, r3
 8004dd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004de8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004dec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004df0:	460b      	mov	r3, r1
 8004df2:	18db      	adds	r3, r3, r3
 8004df4:	643b      	str	r3, [r7, #64]	; 0x40
 8004df6:	4613      	mov	r3, r2
 8004df8:	eb42 0303 	adc.w	r3, r2, r3
 8004dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8004dfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e06:	f7fb f9e7 	bl	80001d8 <__aeabi_uldivmod>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4611      	mov	r1, r2
 8004e10:	4b3b      	ldr	r3, [pc, #236]	; (8004f00 <UART_SetConfig+0x2d4>)
 8004e12:	fba3 2301 	umull	r2, r3, r3, r1
 8004e16:	095b      	lsrs	r3, r3, #5
 8004e18:	2264      	movs	r2, #100	; 0x64
 8004e1a:	fb02 f303 	mul.w	r3, r2, r3
 8004e1e:	1acb      	subs	r3, r1, r3
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e26:	4b36      	ldr	r3, [pc, #216]	; (8004f00 <UART_SetConfig+0x2d4>)
 8004e28:	fba3 2302 	umull	r2, r3, r3, r2
 8004e2c:	095b      	lsrs	r3, r3, #5
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e34:	441c      	add	r4, r3
 8004e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e48:	4642      	mov	r2, r8
 8004e4a:	464b      	mov	r3, r9
 8004e4c:	1891      	adds	r1, r2, r2
 8004e4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e50:	415b      	adcs	r3, r3
 8004e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e58:	4641      	mov	r1, r8
 8004e5a:	1851      	adds	r1, r2, r1
 8004e5c:	6339      	str	r1, [r7, #48]	; 0x30
 8004e5e:	4649      	mov	r1, r9
 8004e60:	414b      	adcs	r3, r1
 8004e62:	637b      	str	r3, [r7, #52]	; 0x34
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e70:	4659      	mov	r1, fp
 8004e72:	00cb      	lsls	r3, r1, #3
 8004e74:	4651      	mov	r1, sl
 8004e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e7a:	4651      	mov	r1, sl
 8004e7c:	00ca      	lsls	r2, r1, #3
 8004e7e:	4610      	mov	r0, r2
 8004e80:	4619      	mov	r1, r3
 8004e82:	4603      	mov	r3, r0
 8004e84:	4642      	mov	r2, r8
 8004e86:	189b      	adds	r3, r3, r2
 8004e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e8c:	464b      	mov	r3, r9
 8004e8e:	460a      	mov	r2, r1
 8004e90:	eb42 0303 	adc.w	r3, r2, r3
 8004e94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ea4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ea8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004eac:	460b      	mov	r3, r1
 8004eae:	18db      	adds	r3, r3, r3
 8004eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	eb42 0303 	adc.w	r3, r2, r3
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ebe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ec2:	f7fb f989 	bl	80001d8 <__aeabi_uldivmod>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <UART_SetConfig+0x2d4>)
 8004ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ed0:	095b      	lsrs	r3, r3, #5
 8004ed2:	2164      	movs	r1, #100	; 0x64
 8004ed4:	fb01 f303 	mul.w	r3, r1, r3
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	3332      	adds	r3, #50	; 0x32
 8004ede:	4a08      	ldr	r2, [pc, #32]	; (8004f00 <UART_SetConfig+0x2d4>)
 8004ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee4:	095b      	lsrs	r3, r3, #5
 8004ee6:	f003 0207 	and.w	r2, r3, #7
 8004eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4422      	add	r2, r4
 8004ef2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ef4:	e106      	b.n	8005104 <UART_SetConfig+0x4d8>
 8004ef6:	bf00      	nop
 8004ef8:	40011000 	.word	0x40011000
 8004efc:	40011400 	.word	0x40011400
 8004f00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f16:	4642      	mov	r2, r8
 8004f18:	464b      	mov	r3, r9
 8004f1a:	1891      	adds	r1, r2, r2
 8004f1c:	6239      	str	r1, [r7, #32]
 8004f1e:	415b      	adcs	r3, r3
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24
 8004f22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f26:	4641      	mov	r1, r8
 8004f28:	1854      	adds	r4, r2, r1
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	eb43 0501 	adc.w	r5, r3, r1
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	00eb      	lsls	r3, r5, #3
 8004f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f3e:	00e2      	lsls	r2, r4, #3
 8004f40:	4614      	mov	r4, r2
 8004f42:	461d      	mov	r5, r3
 8004f44:	4643      	mov	r3, r8
 8004f46:	18e3      	adds	r3, r4, r3
 8004f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f4c:	464b      	mov	r3, r9
 8004f4e:	eb45 0303 	adc.w	r3, r5, r3
 8004f52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f72:	4629      	mov	r1, r5
 8004f74:	008b      	lsls	r3, r1, #2
 8004f76:	4621      	mov	r1, r4
 8004f78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	008a      	lsls	r2, r1, #2
 8004f80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f84:	f7fb f928 	bl	80001d8 <__aeabi_uldivmod>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4b60      	ldr	r3, [pc, #384]	; (8005110 <UART_SetConfig+0x4e4>)
 8004f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	011c      	lsls	r4, r3, #4
 8004f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004fa0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004fa4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004fa8:	4642      	mov	r2, r8
 8004faa:	464b      	mov	r3, r9
 8004fac:	1891      	adds	r1, r2, r2
 8004fae:	61b9      	str	r1, [r7, #24]
 8004fb0:	415b      	adcs	r3, r3
 8004fb2:	61fb      	str	r3, [r7, #28]
 8004fb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fb8:	4641      	mov	r1, r8
 8004fba:	1851      	adds	r1, r2, r1
 8004fbc:	6139      	str	r1, [r7, #16]
 8004fbe:	4649      	mov	r1, r9
 8004fc0:	414b      	adcs	r3, r1
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	f04f 0200 	mov.w	r2, #0
 8004fc8:	f04f 0300 	mov.w	r3, #0
 8004fcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fd0:	4659      	mov	r1, fp
 8004fd2:	00cb      	lsls	r3, r1, #3
 8004fd4:	4651      	mov	r1, sl
 8004fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fda:	4651      	mov	r1, sl
 8004fdc:	00ca      	lsls	r2, r1, #3
 8004fde:	4610      	mov	r0, r2
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	4642      	mov	r2, r8
 8004fe6:	189b      	adds	r3, r3, r2
 8004fe8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fec:	464b      	mov	r3, r9
 8004fee:	460a      	mov	r2, r1
 8004ff0:	eb42 0303 	adc.w	r3, r2, r3
 8004ff4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	67bb      	str	r3, [r7, #120]	; 0x78
 8005002:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	f04f 0300 	mov.w	r3, #0
 800500c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005010:	4649      	mov	r1, r9
 8005012:	008b      	lsls	r3, r1, #2
 8005014:	4641      	mov	r1, r8
 8005016:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800501a:	4641      	mov	r1, r8
 800501c:	008a      	lsls	r2, r1, #2
 800501e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005022:	f7fb f8d9 	bl	80001d8 <__aeabi_uldivmod>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	4611      	mov	r1, r2
 800502c:	4b38      	ldr	r3, [pc, #224]	; (8005110 <UART_SetConfig+0x4e4>)
 800502e:	fba3 2301 	umull	r2, r3, r3, r1
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	2264      	movs	r2, #100	; 0x64
 8005036:	fb02 f303 	mul.w	r3, r2, r3
 800503a:	1acb      	subs	r3, r1, r3
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	3332      	adds	r3, #50	; 0x32
 8005040:	4a33      	ldr	r2, [pc, #204]	; (8005110 <UART_SetConfig+0x4e4>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800504c:	441c      	add	r4, r3
 800504e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005052:	2200      	movs	r2, #0
 8005054:	673b      	str	r3, [r7, #112]	; 0x70
 8005056:	677a      	str	r2, [r7, #116]	; 0x74
 8005058:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800505c:	4642      	mov	r2, r8
 800505e:	464b      	mov	r3, r9
 8005060:	1891      	adds	r1, r2, r2
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	415b      	adcs	r3, r3
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800506c:	4641      	mov	r1, r8
 800506e:	1851      	adds	r1, r2, r1
 8005070:	6039      	str	r1, [r7, #0]
 8005072:	4649      	mov	r1, r9
 8005074:	414b      	adcs	r3, r1
 8005076:	607b      	str	r3, [r7, #4]
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005084:	4659      	mov	r1, fp
 8005086:	00cb      	lsls	r3, r1, #3
 8005088:	4651      	mov	r1, sl
 800508a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800508e:	4651      	mov	r1, sl
 8005090:	00ca      	lsls	r2, r1, #3
 8005092:	4610      	mov	r0, r2
 8005094:	4619      	mov	r1, r3
 8005096:	4603      	mov	r3, r0
 8005098:	4642      	mov	r2, r8
 800509a:	189b      	adds	r3, r3, r2
 800509c:	66bb      	str	r3, [r7, #104]	; 0x68
 800509e:	464b      	mov	r3, r9
 80050a0:	460a      	mov	r2, r1
 80050a2:	eb42 0303 	adc.w	r3, r2, r3
 80050a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	663b      	str	r3, [r7, #96]	; 0x60
 80050b2:	667a      	str	r2, [r7, #100]	; 0x64
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	f04f 0300 	mov.w	r3, #0
 80050bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80050c0:	4649      	mov	r1, r9
 80050c2:	008b      	lsls	r3, r1, #2
 80050c4:	4641      	mov	r1, r8
 80050c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050ca:	4641      	mov	r1, r8
 80050cc:	008a      	lsls	r2, r1, #2
 80050ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80050d2:	f7fb f881 	bl	80001d8 <__aeabi_uldivmod>
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
 80050da:	4b0d      	ldr	r3, [pc, #52]	; (8005110 <UART_SetConfig+0x4e4>)
 80050dc:	fba3 1302 	umull	r1, r3, r3, r2
 80050e0:	095b      	lsrs	r3, r3, #5
 80050e2:	2164      	movs	r1, #100	; 0x64
 80050e4:	fb01 f303 	mul.w	r3, r1, r3
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	3332      	adds	r3, #50	; 0x32
 80050ee:	4a08      	ldr	r2, [pc, #32]	; (8005110 <UART_SetConfig+0x4e4>)
 80050f0:	fba2 2303 	umull	r2, r3, r2, r3
 80050f4:	095b      	lsrs	r3, r3, #5
 80050f6:	f003 020f 	and.w	r2, r3, #15
 80050fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4422      	add	r2, r4
 8005102:	609a      	str	r2, [r3, #8]
}
 8005104:	bf00      	nop
 8005106:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800510a:	46bd      	mov	sp, r7
 800510c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005110:	51eb851f 	.word	0x51eb851f

08005114 <memset>:
 8005114:	4402      	add	r2, r0
 8005116:	4603      	mov	r3, r0
 8005118:	4293      	cmp	r3, r2
 800511a:	d100      	bne.n	800511e <memset+0xa>
 800511c:	4770      	bx	lr
 800511e:	f803 1b01 	strb.w	r1, [r3], #1
 8005122:	e7f9      	b.n	8005118 <memset+0x4>

08005124 <__libc_init_array>:
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	4d0d      	ldr	r5, [pc, #52]	; (800515c <__libc_init_array+0x38>)
 8005128:	4c0d      	ldr	r4, [pc, #52]	; (8005160 <__libc_init_array+0x3c>)
 800512a:	1b64      	subs	r4, r4, r5
 800512c:	10a4      	asrs	r4, r4, #2
 800512e:	2600      	movs	r6, #0
 8005130:	42a6      	cmp	r6, r4
 8005132:	d109      	bne.n	8005148 <__libc_init_array+0x24>
 8005134:	4d0b      	ldr	r5, [pc, #44]	; (8005164 <__libc_init_array+0x40>)
 8005136:	4c0c      	ldr	r4, [pc, #48]	; (8005168 <__libc_init_array+0x44>)
 8005138:	f000 f826 	bl	8005188 <_init>
 800513c:	1b64      	subs	r4, r4, r5
 800513e:	10a4      	asrs	r4, r4, #2
 8005140:	2600      	movs	r6, #0
 8005142:	42a6      	cmp	r6, r4
 8005144:	d105      	bne.n	8005152 <__libc_init_array+0x2e>
 8005146:	bd70      	pop	{r4, r5, r6, pc}
 8005148:	f855 3b04 	ldr.w	r3, [r5], #4
 800514c:	4798      	blx	r3
 800514e:	3601      	adds	r6, #1
 8005150:	e7ee      	b.n	8005130 <__libc_init_array+0xc>
 8005152:	f855 3b04 	ldr.w	r3, [r5], #4
 8005156:	4798      	blx	r3
 8005158:	3601      	adds	r6, #1
 800515a:	e7f2      	b.n	8005142 <__libc_init_array+0x1e>
 800515c:	0800a830 	.word	0x0800a830
 8005160:	0800a830 	.word	0x0800a830
 8005164:	0800a830 	.word	0x0800a830
 8005168:	0800a834 	.word	0x0800a834

0800516c <memcpy>:
 800516c:	440a      	add	r2, r1
 800516e:	4291      	cmp	r1, r2
 8005170:	f100 33ff 	add.w	r3, r0, #4294967295
 8005174:	d100      	bne.n	8005178 <memcpy+0xc>
 8005176:	4770      	bx	lr
 8005178:	b510      	push	{r4, lr}
 800517a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800517e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005182:	4291      	cmp	r1, r2
 8005184:	d1f9      	bne.n	800517a <memcpy+0xe>
 8005186:	bd10      	pop	{r4, pc}

08005188 <_init>:
 8005188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518a:	bf00      	nop
 800518c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518e:	bc08      	pop	{r3}
 8005190:	469e      	mov	lr, r3
 8005192:	4770      	bx	lr

08005194 <_fini>:
 8005194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005196:	bf00      	nop
 8005198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519a:	bc08      	pop	{r3}
 800519c:	469e      	mov	lr, r3
 800519e:	4770      	bx	lr
