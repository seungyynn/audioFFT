
tempAdc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b24  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004cc4  08004cc4  00014cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d44  08004d44  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08004d44  08004d44  00014d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d4c  08004d4c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d4c  08004d4c  00014d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004d54  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000090  08004de4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08004de4  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a12d  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c79  00000000  00000000  0002a230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a8  00000000  00000000  0002beb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000692  00000000  00000000  0002c758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017937  00000000  00000000  0002cdea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c099  00000000  00000000  00044721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009342e  00000000  00000000  000507ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b18  00000000  00000000  000e3be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e6700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004cac 	.word	0x08004cac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08004cac 	.word	0x08004cac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b970 	b.w	8000d64 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	460d      	mov	r5, r1
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	460f      	mov	r7, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14a      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4694      	mov	ip, r2
 8000ab0:	d965      	bls.n	8000b7e <__udivmoddi4+0xe2>
 8000ab2:	fab2 f382 	clz	r3, r2
 8000ab6:	b143      	cbz	r3, 8000aca <__udivmoddi4+0x2e>
 8000ab8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000abc:	f1c3 0220 	rsb	r2, r3, #32
 8000ac0:	409f      	lsls	r7, r3
 8000ac2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ac6:	4317      	orrs	r7, r2
 8000ac8:	409c      	lsls	r4, r3
 8000aca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ace:	fa1f f58c 	uxth.w	r5, ip
 8000ad2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ad6:	0c22      	lsrs	r2, r4, #16
 8000ad8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000adc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ae0:	fb01 f005 	mul.w	r0, r1, r5
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	d90a      	bls.n	8000afe <__udivmoddi4+0x62>
 8000ae8:	eb1c 0202 	adds.w	r2, ip, r2
 8000aec:	f101 37ff 	add.w	r7, r1, #4294967295
 8000af0:	f080 811c 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000af4:	4290      	cmp	r0, r2
 8000af6:	f240 8119 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000afa:	3902      	subs	r1, #2
 8000afc:	4462      	add	r2, ip
 8000afe:	1a12      	subs	r2, r2, r0
 8000b00:	b2a4      	uxth	r4, r4
 8000b02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b0e:	fb00 f505 	mul.w	r5, r0, r5
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	d90a      	bls.n	8000b2c <__udivmoddi4+0x90>
 8000b16:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b1e:	f080 8107 	bcs.w	8000d30 <__udivmoddi4+0x294>
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	f240 8104 	bls.w	8000d30 <__udivmoddi4+0x294>
 8000b28:	4464      	add	r4, ip
 8000b2a:	3802      	subs	r0, #2
 8000b2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b30:	1b64      	subs	r4, r4, r5
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11e      	cbz	r6, 8000b3e <__udivmoddi4+0xa2>
 8000b36:	40dc      	lsrs	r4, r3
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0xbc>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80ed 	beq.w	8000d26 <__udivmoddi4+0x28a>
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b52:	4608      	mov	r0, r1
 8000b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b58:	fab3 f183 	clz	r1, r3
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	d149      	bne.n	8000bf4 <__udivmoddi4+0x158>
 8000b60:	42ab      	cmp	r3, r5
 8000b62:	d302      	bcc.n	8000b6a <__udivmoddi4+0xce>
 8000b64:	4282      	cmp	r2, r0
 8000b66:	f200 80f8 	bhi.w	8000d5a <__udivmoddi4+0x2be>
 8000b6a:	1a84      	subs	r4, r0, r2
 8000b6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b70:	2001      	movs	r0, #1
 8000b72:	4617      	mov	r7, r2
 8000b74:	2e00      	cmp	r6, #0
 8000b76:	d0e2      	beq.n	8000b3e <__udivmoddi4+0xa2>
 8000b78:	e9c6 4700 	strd	r4, r7, [r6]
 8000b7c:	e7df      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b7e:	b902      	cbnz	r2, 8000b82 <__udivmoddi4+0xe6>
 8000b80:	deff      	udf	#255	; 0xff
 8000b82:	fab2 f382 	clz	r3, r2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f040 8090 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8c:	1a8a      	subs	r2, r1, r2
 8000b8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b92:	fa1f fe8c 	uxth.w	lr, ip
 8000b96:	2101      	movs	r1, #1
 8000b98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000ba0:	0c22      	lsrs	r2, r4, #16
 8000ba2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ba6:	fb0e f005 	mul.w	r0, lr, r5
 8000baa:	4290      	cmp	r0, r2
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bae:	eb1c 0202 	adds.w	r2, ip, r2
 8000bb2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	f200 80cb 	bhi.w	8000d54 <__udivmoddi4+0x2b8>
 8000bbe:	4645      	mov	r5, r8
 8000bc0:	1a12      	subs	r2, r2, r0
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bcc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bd4:	45a6      	cmp	lr, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x14e>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000be0:	d202      	bcs.n	8000be8 <__udivmoddi4+0x14c>
 8000be2:	45a6      	cmp	lr, r4
 8000be4:	f200 80bb 	bhi.w	8000d5e <__udivmoddi4+0x2c2>
 8000be8:	4610      	mov	r0, r2
 8000bea:	eba4 040e 	sub.w	r4, r4, lr
 8000bee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bf2:	e79f      	b.n	8000b34 <__udivmoddi4+0x98>
 8000bf4:	f1c1 0720 	rsb	r7, r1, #32
 8000bf8:	408b      	lsls	r3, r1
 8000bfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c02:	fa05 f401 	lsl.w	r4, r5, r1
 8000c06:	fa20 f307 	lsr.w	r3, r0, r7
 8000c0a:	40fd      	lsrs	r5, r7
 8000c0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c10:	4323      	orrs	r3, r4
 8000c12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c16:	fa1f fe8c 	uxth.w	lr, ip
 8000c1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c1e:	0c1c      	lsrs	r4, r3, #16
 8000c20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c24:	fb08 f50e 	mul.w	r5, r8, lr
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1c 0404 	adds.w	r4, ip, r4
 8000c38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c3c:	f080 8088 	bcs.w	8000d50 <__udivmoddi4+0x2b4>
 8000c40:	42a5      	cmp	r5, r4
 8000c42:	f240 8085 	bls.w	8000d50 <__udivmoddi4+0x2b4>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	4464      	add	r4, ip
 8000c4c:	1b64      	subs	r4, r4, r5
 8000c4e:	b29d      	uxth	r5, r3
 8000c50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c54:	fb09 4413 	mls	r4, r9, r3, r4
 8000c58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c6c:	d26c      	bcs.n	8000d48 <__udivmoddi4+0x2ac>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	d96a      	bls.n	8000d48 <__udivmoddi4+0x2ac>
 8000c72:	3b02      	subs	r3, #2
 8000c74:	4464      	add	r4, ip
 8000c76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c7e:	eba4 040e 	sub.w	r4, r4, lr
 8000c82:	42ac      	cmp	r4, r5
 8000c84:	46c8      	mov	r8, r9
 8000c86:	46ae      	mov	lr, r5
 8000c88:	d356      	bcc.n	8000d38 <__udivmoddi4+0x29c>
 8000c8a:	d053      	beq.n	8000d34 <__udivmoddi4+0x298>
 8000c8c:	b156      	cbz	r6, 8000ca4 <__udivmoddi4+0x208>
 8000c8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c92:	eb64 040e 	sbc.w	r4, r4, lr
 8000c96:	fa04 f707 	lsl.w	r7, r4, r7
 8000c9a:	40ca      	lsrs	r2, r1
 8000c9c:	40cc      	lsrs	r4, r1
 8000c9e:	4317      	orrs	r7, r2
 8000ca0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cac:	f1c3 0120 	rsb	r1, r3, #32
 8000cb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cb8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cbc:	409d      	lsls	r5, r3
 8000cbe:	432a      	orrs	r2, r5
 8000cc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ccc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cd0:	0c11      	lsrs	r1, r2, #16
 8000cd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cda:	428d      	cmp	r5, r1
 8000cdc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x258>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cea:	d22f      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000cec:	428d      	cmp	r5, r1
 8000cee:	d92d      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1b49      	subs	r1, r1, r5
 8000cf6:	b292      	uxth	r2, r2
 8000cf8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000d00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d04:	fb05 f10e 	mul.w	r1, r5, lr
 8000d08:	4291      	cmp	r1, r2
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x282>
 8000d0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d10:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d14:	d216      	bcs.n	8000d44 <__udivmoddi4+0x2a8>
 8000d16:	4291      	cmp	r1, r2
 8000d18:	d914      	bls.n	8000d44 <__udivmoddi4+0x2a8>
 8000d1a:	3d02      	subs	r5, #2
 8000d1c:	4462      	add	r2, ip
 8000d1e:	1a52      	subs	r2, r2, r1
 8000d20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d24:	e738      	b.n	8000b98 <__udivmoddi4+0xfc>
 8000d26:	4631      	mov	r1, r6
 8000d28:	4630      	mov	r0, r6
 8000d2a:	e708      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	e6e6      	b.n	8000afe <__udivmoddi4+0x62>
 8000d30:	4610      	mov	r0, r2
 8000d32:	e6fb      	b.n	8000b2c <__udivmoddi4+0x90>
 8000d34:	4548      	cmp	r0, r9
 8000d36:	d2a9      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d38:	ebb9 0802 	subs.w	r8, r9, r2
 8000d3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d40:	3b01      	subs	r3, #1
 8000d42:	e7a3      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d44:	4645      	mov	r5, r8
 8000d46:	e7ea      	b.n	8000d1e <__udivmoddi4+0x282>
 8000d48:	462b      	mov	r3, r5
 8000d4a:	e794      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4c:	4640      	mov	r0, r8
 8000d4e:	e7d1      	b.n	8000cf4 <__udivmoddi4+0x258>
 8000d50:	46d0      	mov	r8, sl
 8000d52:	e77b      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d54:	3d02      	subs	r5, #2
 8000d56:	4462      	add	r2, ip
 8000d58:	e732      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e70a      	b.n	8000b74 <__udivmoddi4+0xd8>
 8000d5e:	4464      	add	r4, ip
 8000d60:	3802      	subs	r0, #2
 8000d62:	e742      	b.n	8000bea <__udivmoddi4+0x14e>

08000d64 <__aeabi_idiv0>:
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <Kalman>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t adcValue;

double Kalman(double measurement) {
 8000d68:	b5b0      	push	{r4, r5, r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	ed87 0b00 	vstr	d0, [r7]
	static double varP = 0.0001; // pow(0.01, 2)
	static double R = 0.25; //pow(0.5, 2);
	static double K = 1.0;
	static double X = 20.0;
// Kalman Simple Filter
	P = P + varP;
 8000d72:	4b36      	ldr	r3, [pc, #216]	; (8000e4c <Kalman+0xe4>)
 8000d74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d78:	4b35      	ldr	r3, [pc, #212]	; (8000e50 <Kalman+0xe8>)
 8000d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7e:	f7ff fa85 	bl	800028c <__adddf3>
 8000d82:	4602      	mov	r2, r0
 8000d84:	460b      	mov	r3, r1
 8000d86:	4931      	ldr	r1, [pc, #196]	; (8000e4c <Kalman+0xe4>)
 8000d88:	e9c1 2300 	strd	r2, r3, [r1]
	K = P / (P + R);
 8000d8c:	4b2f      	ldr	r3, [pc, #188]	; (8000e4c <Kalman+0xe4>)
 8000d8e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000d92:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <Kalman+0xe4>)
 8000d94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d98:	4b2e      	ldr	r3, [pc, #184]	; (8000e54 <Kalman+0xec>)
 8000d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9e:	f7ff fa75 	bl	800028c <__adddf3>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	4620      	mov	r0, r4
 8000da8:	4629      	mov	r1, r5
 8000daa:	f7ff fd4f 	bl	800084c <__aeabi_ddiv>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	4929      	ldr	r1, [pc, #164]	; (8000e58 <Kalman+0xf0>)
 8000db4:	e9c1 2300 	strd	r2, r3, [r1]
	X = (K * measurement) + (1 - K) * X;
 8000db8:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <Kalman+0xf0>)
 8000dba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000dc2:	f7ff fc19 	bl	80005f8 <__aeabi_dmul>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	460b      	mov	r3, r1
 8000dca:	4614      	mov	r4, r2
 8000dcc:	461d      	mov	r5, r3
 8000dce:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <Kalman+0xf0>)
 8000dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd4:	f04f 0000 	mov.w	r0, #0
 8000dd8:	4920      	ldr	r1, [pc, #128]	; (8000e5c <Kalman+0xf4>)
 8000dda:	f7ff fa55 	bl	8000288 <__aeabi_dsub>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <Kalman+0xf8>)
 8000de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dec:	f7ff fc04 	bl	80005f8 <__aeabi_dmul>
 8000df0:	4602      	mov	r2, r0
 8000df2:	460b      	mov	r3, r1
 8000df4:	4620      	mov	r0, r4
 8000df6:	4629      	mov	r1, r5
 8000df8:	f7ff fa48 	bl	800028c <__adddf3>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4917      	ldr	r1, [pc, #92]	; (8000e60 <Kalman+0xf8>)
 8000e02:	e9c1 2300 	strd	r2, r3, [r1]
	P = (1 - K) * P;
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <Kalman+0xf0>)
 8000e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e0c:	f04f 0000 	mov.w	r0, #0
 8000e10:	4912      	ldr	r1, [pc, #72]	; (8000e5c <Kalman+0xf4>)
 8000e12:	f7ff fa39 	bl	8000288 <__aeabi_dsub>
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <Kalman+0xe4>)
 8000e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e24:	f7ff fbe8 	bl	80005f8 <__aeabi_dmul>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	4907      	ldr	r1, [pc, #28]	; (8000e4c <Kalman+0xe4>)
 8000e2e:	e9c1 2300 	strd	r2, r3, [r1]
	return X;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <Kalman+0xf8>)
 8000e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e38:	ec43 2b17 	vmov	d7, r2, r3
}
 8000e3c:	eeb0 0a47 	vmov.f32	s0, s14
 8000e40:	eef0 0a67 	vmov.f32	s1, s15
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bdb0      	pop	{r4, r5, r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	20000008 	.word	0x20000008
 8000e54:	20000010 	.word	0x20000010
 8000e58:	20000018 	.word	0x20000018
 8000e5c:	3ff00000 	.word	0x3ff00000
 8000e60:	20000020 	.word	0x20000020

08000e64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6a:	f000 fb83 	bl	8001574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6e:	f000 f895 	bl	8000f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e72:	f000 f985 	bl	8001180 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e76:	f000 f8f9 	bl	800106c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000e7a:	f000 f957 	bl	800112c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  initUart(&huart2); //초기?���?? ?��주는 것이?�� !!!!!
 8000e7e:	483f      	ldr	r0, [pc, #252]	; (8000f7c <main+0x118>)
 8000e80:	f000 fb28 	bl	80014d4 <initUart>
  printf("start temperature with ADC example\n");
 8000e84:	483e      	ldr	r0, [pc, #248]	; (8000f80 <main+0x11c>)
 8000e86:	f003 f8a7 	bl	8003fd8 <puts>
  {
     //AD�???��
     static uint16_t valueArray[100] = {0,};
     static uint8_t valuePosition = 0;

     HAL_ADC_Start(&hadc1); //&?�� �???���?? ?��?��?��?�� ?��?��?��?��거임
 8000e8a:	483e      	ldr	r0, [pc, #248]	; (8000f84 <main+0x120>)
 8000e8c:	f000 fc4c 	bl	8001728 <HAL_ADC_Start>
     HAL_ADC_PollForConversion(&hadc1, 1); //10�??리세?��
 8000e90:	2101      	movs	r1, #1
 8000e92:	483c      	ldr	r0, [pc, #240]	; (8000f84 <main+0x120>)
 8000e94:	f000 fd2f 	bl	80018f6 <HAL_ADC_PollForConversion>
     uint16_t tmpValue = 4095 - HAL_ADC_GetValue(&hadc1);
 8000e98:	483a      	ldr	r0, [pc, #232]	; (8000f84 <main+0x120>)
 8000e9a:	f000 fdb7 	bl	8001a0c <HAL_ADC_GetValue>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8000ea6:	330f      	adds	r3, #15
 8000ea8:	80fb      	strh	r3, [r7, #6]
     //HAL_ADC_Stop(&hadc1);
     HAL_ADC_Start(&hadc1);
 8000eaa:	4836      	ldr	r0, [pc, #216]	; (8000f84 <main+0x120>)
 8000eac:	f000 fc3c 	bl	8001728 <HAL_ADC_Start>
     HAL_ADC_PollForConversion(&hadc1, 1);
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	4834      	ldr	r0, [pc, #208]	; (8000f84 <main+0x120>)
 8000eb4:	f000 fd1f 	bl	80018f6 <HAL_ADC_PollForConversion>
     uint16_t cdsValue = 4095 - HAL_ADC_GetValue(&hadc1);
 8000eb8:	4832      	ldr	r0, [pc, #200]	; (8000f84 <main+0x120>)
 8000eba:	f000 fda7 	bl	8001a0c <HAL_ADC_GetValue>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8000ec6:	330f      	adds	r3, #15
 8000ec8:	80bb      	strh	r3, [r7, #4]
     HAL_ADC_Stop(&hadc1);
 8000eca:	482e      	ldr	r0, [pc, #184]	; (8000f84 <main+0x120>)
 8000ecc:	f000 fce0 	bl	8001890 <HAL_ADC_Stop>

     adcValue -= valueArray[valuePosition];
 8000ed0:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <main+0x124>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a2d      	ldr	r2, [pc, #180]	; (8000f8c <main+0x128>)
 8000ed6:	7812      	ldrb	r2, [r2, #0]
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4a2d      	ldr	r2, [pc, #180]	; (8000f90 <main+0x12c>)
 8000edc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000ee0:	1a9b      	subs	r3, r3, r2
 8000ee2:	4a29      	ldr	r2, [pc, #164]	; (8000f88 <main+0x124>)
 8000ee4:	6013      	str	r3, [r2, #0]
     valueArray[valuePosition] = tmpValue;
 8000ee6:	4b29      	ldr	r3, [pc, #164]	; (8000f8c <main+0x128>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	4619      	mov	r1, r3
 8000eec:	4a28      	ldr	r2, [pc, #160]	; (8000f90 <main+0x12c>)
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
     adcValue += valueArray[valuePosition];
 8000ef4:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <main+0x128>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b25      	ldr	r3, [pc, #148]	; (8000f90 <main+0x12c>)
 8000efc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <main+0x124>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a1f      	ldr	r2, [pc, #124]	; (8000f88 <main+0x124>)
 8000f0a:	6013      	str	r3, [r2, #0]
     valuePosition++;
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <main+0x128>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <main+0x128>)
 8000f16:	701a      	strb	r2, [r3, #0]
     valuePosition %=100; //valuePosition?�� 100?�� ?���?? 0?���?? 바꿔�???��?�� ?��
 8000f18:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <main+0x128>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4a1d      	ldr	r2, [pc, #116]	; (8000f94 <main+0x130>)
 8000f1e:	fba2 1203 	umull	r1, r2, r2, r3
 8000f22:	0952      	lsrs	r2, r2, #5
 8000f24:	2164      	movs	r1, #100	; 0x64
 8000f26:	fb01 f202 	mul.w	r2, r1, r2
 8000f2a:	1a9b      	subs	r3, r3, r2
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <main+0x128>)
 8000f30:	701a      	strb	r2, [r3, #0]


     //UART?��?��
     printf("%d\t%d\t%d\t%d\n",cdsValue, tmpValue, adcValue/100, (int)Kalman((double)tmpValue));
 8000f32:	88bc      	ldrh	r4, [r7, #4]
 8000f34:	88fd      	ldrh	r5, [r7, #6]
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <main+0x124>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a16      	ldr	r2, [pc, #88]	; (8000f94 <main+0x130>)
 8000f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f40:	095e      	lsrs	r6, r3, #5
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fadd 	bl	8000504 <__aeabi_ui2d>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	ec43 2b10 	vmov	d0, r2, r3
 8000f52:	f7ff ff09 	bl	8000d68 <Kalman>
 8000f56:	ec53 2b10 	vmov	r2, r3, d0
 8000f5a:	4610      	mov	r0, r2
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f7ff fd5d 	bl	8000a1c <__aeabi_d2iz>
 8000f62:	4603      	mov	r3, r0
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	4633      	mov	r3, r6
 8000f68:	462a      	mov	r2, r5
 8000f6a:	4621      	mov	r1, r4
 8000f6c:	480a      	ldr	r0, [pc, #40]	; (8000f98 <main+0x134>)
 8000f6e:	f002 ffcd 	bl	8003f0c <iprintf>
     HAL_Delay(1);
 8000f72:	2001      	movs	r0, #1
 8000f74:	f000 fb70 	bl	8001658 <HAL_Delay>
  {
 8000f78:	e787      	b.n	8000e8a <main+0x26>
 8000f7a:	bf00      	nop
 8000f7c:	200000f4 	.word	0x200000f4
 8000f80:	08004cc4 	.word	0x08004cc4
 8000f84:	200000ac 	.word	0x200000ac
 8000f88:	2000013c 	.word	0x2000013c
 8000f8c:	20000140 	.word	0x20000140
 8000f90:	20000144 	.word	0x20000144
 8000f94:	51eb851f 	.word	0x51eb851f
 8000f98:	08004ce8 	.word	0x08004ce8

08000f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b094      	sub	sp, #80	; 0x50
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 0320 	add.w	r3, r7, #32
 8000fa6:	2230      	movs	r2, #48	; 0x30
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f003 f8f4 	bl	8004198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <SystemClock_Config+0xc8>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	4a26      	ldr	r2, [pc, #152]	; (8001064 <SystemClock_Config+0xc8>)
 8000fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fce:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd0:	4b24      	ldr	r3, [pc, #144]	; (8001064 <SystemClock_Config+0xc8>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	4b21      	ldr	r3, [pc, #132]	; (8001068 <SystemClock_Config+0xcc>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a20      	ldr	r2, [pc, #128]	; (8001068 <SystemClock_Config+0xcc>)
 8000fe6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <SystemClock_Config+0xcc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001000:	2310      	movs	r3, #16
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001004:	2302      	movs	r3, #2
 8001006:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001008:	2300      	movs	r3, #0
 800100a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800100c:	2308      	movs	r3, #8
 800100e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001014:	2302      	movs	r3, #2
 8001016:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001018:	2304      	movs	r3, #4
 800101a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101c:	f107 0320 	add.w	r3, r7, #32
 8001020:	4618      	mov	r0, r3
 8001022:	f001 fa57 	bl	80024d4 <HAL_RCC_OscConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800102c:	f000 f8c2 	bl	80011b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001030:	230f      	movs	r3, #15
 8001032:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001034:	2302      	movs	r3, #2
 8001036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800103c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001040:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2103      	movs	r1, #3
 800104c:	4618      	mov	r0, r3
 800104e:	f001 fcb9 	bl	80029c4 <HAL_RCC_ClockConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001058:	f000 f8ac 	bl	80011b4 <Error_Handler>
  }
}
 800105c:	bf00      	nop
 800105e:	3750      	adds	r7, #80	; 0x50
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40007000 	.word	0x40007000

0800106c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001072:	463b      	mov	r3, r7
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800107e:	4b28      	ldr	r3, [pc, #160]	; (8001120 <MX_ADC1_Init+0xb4>)
 8001080:	4a28      	ldr	r2, [pc, #160]	; (8001124 <MX_ADC1_Init+0xb8>)
 8001082:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001084:	4b26      	ldr	r3, [pc, #152]	; (8001120 <MX_ADC1_Init+0xb4>)
 8001086:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800108a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800108c:	4b24      	ldr	r3, [pc, #144]	; (8001120 <MX_ADC1_Init+0xb4>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001092:	4b23      	ldr	r3, [pc, #140]	; (8001120 <MX_ADC1_Init+0xb4>)
 8001094:	2201      	movs	r2, #1
 8001096:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001098:	4b21      	ldr	r3, [pc, #132]	; (8001120 <MX_ADC1_Init+0xb4>)
 800109a:	2201      	movs	r2, #1
 800109c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109e:	4b20      	ldr	r3, [pc, #128]	; (8001120 <MX_ADC1_Init+0xb4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a6:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <MX_ADC1_Init+0xb4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ac:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <MX_ADC1_Init+0xb4>)
 80010ae:	4a1e      	ldr	r2, [pc, #120]	; (8001128 <MX_ADC1_Init+0xbc>)
 80010b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <MX_ADC1_Init+0xb4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <MX_ADC1_Init+0xb4>)
 80010ba:	2202      	movs	r2, #2
 80010bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <MX_ADC1_Init+0xb4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <MX_ADC1_Init+0xb4>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010cc:	4814      	ldr	r0, [pc, #80]	; (8001120 <MX_ADC1_Init+0xb4>)
 80010ce:	f000 fae7 	bl	80016a0 <HAL_ADC_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010d8:	f000 f86c 	bl	80011b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010dc:	2300      	movs	r3, #0
 80010de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80010e4:	2304      	movs	r3, #4
 80010e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e8:	463b      	mov	r3, r7
 80010ea:	4619      	mov	r1, r3
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <MX_ADC1_Init+0xb4>)
 80010ee:	f000 fc9b 	bl	8001a28 <HAL_ADC_ConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010f8:	f000 f85c 	bl	80011b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001100:	2302      	movs	r3, #2
 8001102:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001104:	463b      	mov	r3, r7
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_ADC1_Init+0xb4>)
 800110a:	f000 fc8d 	bl	8001a28 <HAL_ADC_ConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001114:	f000 f84e 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200000ac 	.word	0x200000ac
 8001124:	40012000 	.word	0x40012000
 8001128:	0f000001 	.word	0x0f000001

0800112c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <MX_USART2_UART_Init+0x50>)
 8001134:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001164:	f001 fe0e 	bl	8002d84 <HAL_UART_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800116e:	f000 f821 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200000f4 	.word	0x200000f4
 800117c:	40004400 	.word	0x40004400

08001180 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_GPIO_Init+0x30>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <MX_GPIO_Init+0x30>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_GPIO_Init+0x30>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b8:	b672      	cpsid	i
}
 80011ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011bc:	e7fe      	b.n	80011bc <Error_Handler+0x8>
	...

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_MspInit+0x4c>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a0f      	ldr	r2, [pc, #60]	; (800120c <HAL_MspInit+0x4c>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_MspInit+0x4c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_MspInit+0x4c>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <HAL_MspInit+0x4c>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f0:	6413      	str	r3, [r2, #64]	; 0x40
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_MspInit+0x4c>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800

08001210 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a17      	ldr	r2, [pc, #92]	; (800128c <HAL_ADC_MspInit+0x7c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d127      	bne.n	8001282 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_ADC_MspInit+0x80>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	4a15      	ldr	r2, [pc, #84]	; (8001290 <HAL_ADC_MspInit+0x80>)
 800123c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001240:	6453      	str	r3, [r2, #68]	; 0x44
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <HAL_ADC_MspInit+0x80>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <HAL_ADC_MspInit+0x80>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <HAL_ADC_MspInit+0x80>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <HAL_ADC_MspInit+0x80>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800126a:	2303      	movs	r3, #3
 800126c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126e:	2303      	movs	r3, #3
 8001270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <HAL_ADC_MspInit+0x84>)
 800127e:	f000 ffa5 	bl	80021cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40012000 	.word	0x40012000
 8001290:	40023800 	.word	0x40023800
 8001294:	40020000 	.word	0x40020000

08001298 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a1d      	ldr	r2, [pc, #116]	; (800132c <HAL_UART_MspInit+0x94>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d133      	bne.n	8001322 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <HAL_UART_MspInit+0x98>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a1b      	ldr	r2, [pc, #108]	; (8001330 <HAL_UART_MspInit+0x98>)
 80012c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <HAL_UART_MspInit+0x98>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_UART_MspInit+0x98>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a14      	ldr	r2, [pc, #80]	; (8001330 <HAL_UART_MspInit+0x98>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_UART_MspInit+0x98>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012f2:	230c      	movs	r3, #12
 80012f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001302:	2307      	movs	r3, #7
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4809      	ldr	r0, [pc, #36]	; (8001334 <HAL_UART_MspInit+0x9c>)
 800130e:	f000 ff5d 	bl	80021cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	2026      	movs	r0, #38	; 0x26
 8001318:	f000 fe8f 	bl	800203a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800131c:	2026      	movs	r0, #38	; 0x26
 800131e:	f000 fea8 	bl	8002072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001322:	bf00      	nop
 8001324:	3728      	adds	r7, #40	; 0x28
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40004400 	.word	0x40004400
 8001330:	40023800 	.word	0x40023800
 8001334:	40020000 	.word	0x40020000

08001338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800133c:	e7fe      	b.n	800133c <NMI_Handler+0x4>

0800133e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <MemManage_Handler+0x4>

0800134a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <UsageFault_Handler+0x4>

08001356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001384:	f000 f948 	bl	8001618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}

0800138c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <USART2_IRQHandler+0x10>)
 8001392:	f001 fdd3 	bl	8002f3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200000f4 	.word	0x200000f4

080013a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	e00a      	b.n	80013c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013b2:	f3af 8000 	nop.w
 80013b6:	4601      	mov	r1, r0
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	60ba      	str	r2, [r7, #8]
 80013be:	b2ca      	uxtb	r2, r1
 80013c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	dbf0      	blt.n	80013b2 <_read+0x12>
  }

  return len;
 80013d0:	687b      	ldr	r3, [r7, #4]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <_close>:
  }
  return len;
}

int _close(int file)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001402:	605a      	str	r2, [r3, #4]
  return 0;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <_isatty>:

int _isatty(int file)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800144c:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <_sbrk+0x5c>)
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <_sbrk+0x60>)
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d102      	bne.n	8001466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <_sbrk+0x64>)
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <_sbrk+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	429a      	cmp	r2, r3
 8001472:	d207      	bcs.n	8001484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001474:	f002 fede 	bl	8004234 <__errno>
 8001478:	4603      	mov	r3, r0
 800147a:	220c      	movs	r2, #12
 800147c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	e009      	b.n	8001498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148a:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <_sbrk+0x64>)
 8001494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20020000 	.word	0x20020000
 80014a4:	00000400 	.word	0x00000400
 80014a8:	2000020c 	.word	0x2000020c
 80014ac:	20000368 	.word	0x20000368

080014b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <SystemInit+0x20>)
 80014b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ba:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <SystemInit+0x20>)
 80014bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <initUart>:

#include "uart.h"

UART_HandleTypeDef *huart;	//private한 변수

void initUart(UART_HandleTypeDef *inHuart) {
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	huart = inHuart;
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <initUart+0x1c>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6013      	str	r3, [r2, #0]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000210 	.word	0x20000210

080014f4 <_write>:

int _write(int file, char *p, int len){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(huart, (uint8_t *)p, len, len);
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <_write+0x28>)
 8001502:	6818      	ldr	r0, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	b29a      	uxth	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68b9      	ldr	r1, [r7, #8]
 800150c:	f001 fc8a 	bl	8002e24 <HAL_UART_Transmit>
	return len;
 8001510:	687b      	ldr	r3, [r7, #4]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000210 	.word	0x20000210

08001520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001520:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001558 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001524:	f7ff ffc4 	bl	80014b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001528:	480c      	ldr	r0, [pc, #48]	; (800155c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800152a:	490d      	ldr	r1, [pc, #52]	; (8001560 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800152c:	4a0d      	ldr	r2, [pc, #52]	; (8001564 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001530:	e002      	b.n	8001538 <LoopCopyDataInit>

08001532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001536:	3304      	adds	r3, #4

08001538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800153c:	d3f9      	bcc.n	8001532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001540:	4c0a      	ldr	r4, [pc, #40]	; (800156c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001544:	e001      	b.n	800154a <LoopFillZerobss>

08001546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001548:	3204      	adds	r2, #4

0800154a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800154c:	d3fb      	bcc.n	8001546 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800154e:	f002 fe77 	bl	8004240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001552:	f7ff fc87 	bl	8000e64 <main>
  bx  lr    
 8001556:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001558:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800155c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001560:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001564:	08004d54 	.word	0x08004d54
  ldr r2, =_sbss
 8001568:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800156c:	20000364 	.word	0x20000364

08001570 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001570:	e7fe      	b.n	8001570 <ADC_IRQHandler>
	...

08001574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001578:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <HAL_Init+0x40>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0d      	ldr	r2, [pc, #52]	; (80015b4 <HAL_Init+0x40>)
 800157e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001582:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <HAL_Init+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <HAL_Init+0x40>)
 800158a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800158e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <HAL_Init+0x40>)
 8001596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800159c:	2003      	movs	r0, #3
 800159e:	f000 fd41 	bl	8002024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015a2:	200f      	movs	r0, #15
 80015a4:	f000 f808 	bl	80015b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a8:	f7ff fe0a 	bl	80011c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023c00 	.word	0x40023c00

080015b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_InitTick+0x54>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_InitTick+0x58>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 fd59 	bl	800208e <HAL_SYSTICK_Config>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00e      	b.n	8001604 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b0f      	cmp	r3, #15
 80015ea:	d80a      	bhi.n	8001602 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ec:	2200      	movs	r2, #0
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f000 fd21 	bl	800203a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f8:	4a06      	ldr	r2, [pc, #24]	; (8001614 <HAL_InitTick+0x5c>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e000      	b.n	8001604 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000028 	.word	0x20000028
 8001610:	20000030 	.word	0x20000030
 8001614:	2000002c 	.word	0x2000002c

08001618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_IncTick+0x20>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_IncTick+0x24>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4413      	add	r3, r2
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <HAL_IncTick+0x24>)
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000030 	.word	0x20000030
 800163c:	20000214 	.word	0x20000214

08001640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return uwTick;
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <HAL_GetTick+0x14>)
 8001646:	681b      	ldr	r3, [r3, #0]
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000214 	.word	0x20000214

08001658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001660:	f7ff ffee 	bl	8001640 <HAL_GetTick>
 8001664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001670:	d005      	beq.n	800167e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_Delay+0x44>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4413      	add	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800167e:	bf00      	nop
 8001680:	f7ff ffde 	bl	8001640 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	429a      	cmp	r2, r3
 800168e:	d8f7      	bhi.n	8001680 <HAL_Delay+0x28>
  {
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000030 	.word	0x20000030

080016a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e033      	b.n	800171e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d109      	bne.n	80016d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fda6 	bl	8001210 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f003 0310 	and.w	r3, r3, #16
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d118      	bne.n	8001710 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016e6:	f023 0302 	bic.w	r3, r3, #2
 80016ea:	f043 0202 	orr.w	r2, r3, #2
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 faca 	bl	8001c8c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f023 0303 	bic.w	r3, r3, #3
 8001706:	f043 0201 	orr.w	r2, r3, #1
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	641a      	str	r2, [r3, #64]	; 0x40
 800170e:	e001      	b.n	8001714 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800171c:	7bfb      	ldrb	r3, [r7, #15]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800173a:	2b01      	cmp	r3, #1
 800173c:	d101      	bne.n	8001742 <HAL_ADC_Start+0x1a>
 800173e:	2302      	movs	r3, #2
 8001740:	e097      	b.n	8001872 <HAL_ADC_Start+0x14a>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b01      	cmp	r3, #1
 8001756:	d018      	beq.n	800178a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0201 	orr.w	r2, r2, #1
 8001766:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001768:	4b45      	ldr	r3, [pc, #276]	; (8001880 <HAL_ADC_Start+0x158>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a45      	ldr	r2, [pc, #276]	; (8001884 <HAL_ADC_Start+0x15c>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	0c9a      	lsrs	r2, r3, #18
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800177c:	e002      	b.n	8001784 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	3b01      	subs	r3, #1
 8001782:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f9      	bne.n	800177e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b01      	cmp	r3, #1
 8001796:	d15f      	bne.n	8001858 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017a0:	f023 0301 	bic.w	r3, r3, #1
 80017a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d007      	beq.n	80017ca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017d6:	d106      	bne.n	80017e6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017dc:	f023 0206 	bic.w	r2, r3, #6
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	645a      	str	r2, [r3, #68]	; 0x44
 80017e4:	e002      	b.n	80017ec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017f4:	4b24      	ldr	r3, [pc, #144]	; (8001888 <HAL_ADC_Start+0x160>)
 80017f6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001800:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 031f 	and.w	r3, r3, #31
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10f      	bne.n	800182e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d129      	bne.n	8001870 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	e020      	b.n	8001870 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a16      	ldr	r2, [pc, #88]	; (800188c <HAL_ADC_Start+0x164>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d11b      	bne.n	8001870 <HAL_ADC_Start+0x148>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d114      	bne.n	8001870 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	e00b      	b.n	8001870 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	f043 0210 	orr.w	r2, r3, #16
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001868:	f043 0201 	orr.w	r2, r3, #1
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20000028 	.word	0x20000028
 8001884:	431bde83 	.word	0x431bde83
 8001888:	40012300 	.word	0x40012300
 800188c:	40012000 	.word	0x40012000

08001890 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d101      	bne.n	80018a6 <HAL_ADC_Stop+0x16>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e021      	b.n	80018ea <HAL_ADC_Stop+0x5a>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0201 	bic.w	r2, r2, #1
 80018bc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d109      	bne.n	80018e0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	f043 0201 	orr.w	r2, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b084      	sub	sp, #16
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001912:	d113      	bne.n	800193c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800191e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001922:	d10b      	bne.n	800193c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	f043 0220 	orr.w	r2, r3, #32
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e063      	b.n	8001a04 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800193c:	f7ff fe80 	bl	8001640 <HAL_GetTick>
 8001940:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001942:	e021      	b.n	8001988 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194a:	d01d      	beq.n	8001988 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d007      	beq.n	8001962 <HAL_ADC_PollForConversion+0x6c>
 8001952:	f7ff fe75 	bl	8001640 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d212      	bcs.n	8001988 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b02      	cmp	r3, #2
 800196e:	d00b      	beq.n	8001988 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	f043 0204 	orr.w	r2, r3, #4
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e03d      	b.n	8001a04 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b02      	cmp	r3, #2
 8001994:	d1d6      	bne.n	8001944 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f06f 0212 	mvn.w	r2, #18
 800199e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d123      	bne.n	8001a02 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d11f      	bne.n	8001a02 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d006      	beq.n	80019de <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d111      	bne.n	8001a02 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d105      	bne.n	8001a02 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f043 0201 	orr.w	r2, r3, #1
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d101      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x1c>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e113      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x244>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b09      	cmp	r3, #9
 8001a52:	d925      	bls.n	8001aa0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68d9      	ldr	r1, [r3, #12]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	461a      	mov	r2, r3
 8001a62:	4613      	mov	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	3b1e      	subs	r3, #30
 8001a6a:	2207      	movs	r2, #7
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43da      	mvns	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	400a      	ands	r2, r1
 8001a78:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68d9      	ldr	r1, [r3, #12]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	4403      	add	r3, r0
 8001a92:	3b1e      	subs	r3, #30
 8001a94:	409a      	lsls	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	e022      	b.n	8001ae6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6919      	ldr	r1, [r3, #16]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	461a      	mov	r2, r3
 8001aae:	4613      	mov	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	400a      	ands	r2, r1
 8001ac2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6919      	ldr	r1, [r3, #16]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4403      	add	r3, r0
 8001adc:	409a      	lsls	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d824      	bhi.n	8001b38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	3b05      	subs	r3, #5
 8001b00:	221f      	movs	r2, #31
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43da      	mvns	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	4613      	mov	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	3b05      	subs	r3, #5
 8001b2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	635a      	str	r2, [r3, #52]	; 0x34
 8001b36:	e04c      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b0c      	cmp	r3, #12
 8001b3e:	d824      	bhi.n	8001b8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	3b23      	subs	r3, #35	; 0x23
 8001b52:	221f      	movs	r2, #31
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43da      	mvns	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	400a      	ands	r2, r1
 8001b60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	3b23      	subs	r3, #35	; 0x23
 8001b7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	631a      	str	r2, [r3, #48]	; 0x30
 8001b88:	e023      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	3b41      	subs	r3, #65	; 0x41
 8001b9c:	221f      	movs	r2, #31
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	400a      	ands	r2, r1
 8001baa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	4618      	mov	r0, r3
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3b41      	subs	r3, #65	; 0x41
 8001bc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bd2:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <HAL_ADC_ConfigChannel+0x250>)
 8001bd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a28      	ldr	r2, [pc, #160]	; (8001c7c <HAL_ADC_ConfigChannel+0x254>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d10f      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x1d8>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b12      	cmp	r3, #18
 8001be6:	d10b      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a1d      	ldr	r2, [pc, #116]	; (8001c7c <HAL_ADC_ConfigChannel+0x254>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d12b      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x23a>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a1c      	ldr	r2, [pc, #112]	; (8001c80 <HAL_ADC_ConfigChannel+0x258>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d003      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x1f4>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b11      	cmp	r3, #17
 8001c1a:	d122      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a11      	ldr	r2, [pc, #68]	; (8001c80 <HAL_ADC_ConfigChannel+0x258>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d111      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <HAL_ADC_ConfigChannel+0x25c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a11      	ldr	r2, [pc, #68]	; (8001c88 <HAL_ADC_ConfigChannel+0x260>)
 8001c44:	fba2 2303 	umull	r2, r3, r2, r3
 8001c48:	0c9a      	lsrs	r2, r3, #18
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c54:	e002      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f9      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	40012300 	.word	0x40012300
 8001c7c:	40012000 	.word	0x40012000
 8001c80:	10000012 	.word	0x10000012
 8001c84:	20000028 	.word	0x20000028
 8001c88:	431bde83 	.word	0x431bde83

08001c8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c94:	4b79      	ldr	r3, [pc, #484]	; (8001e7c <ADC_Init+0x1f0>)
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	431a      	orrs	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6859      	ldr	r1, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	021a      	lsls	r2, r3, #8
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ce4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6859      	ldr	r1, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6899      	ldr	r1, [r3, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1e:	4a58      	ldr	r2, [pc, #352]	; (8001e80 <ADC_Init+0x1f4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d022      	beq.n	8001d6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6899      	ldr	r1, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6899      	ldr	r1, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	e00f      	b.n	8001d8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d88:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0202 	bic.w	r2, r2, #2
 8001d98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6899      	ldr	r1, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	7e1b      	ldrb	r3, [r3, #24]
 8001da4:	005a      	lsls	r2, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d01b      	beq.n	8001df0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dc6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001dd6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6859      	ldr	r1, [r3, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	3b01      	subs	r3, #1
 8001de4:	035a      	lsls	r2, r3, #13
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	e007      	b.n	8001e00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dfe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	051a      	lsls	r2, r3, #20
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6899      	ldr	r1, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e42:	025a      	lsls	r2, r3, #9
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6899      	ldr	r1, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	029a      	lsls	r2, r3, #10
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	609a      	str	r2, [r3, #8]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	40012300 	.word	0x40012300
 8001e80:	0f000001 	.word	0x0f000001

08001e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb6:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	60d3      	str	r3, [r2, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	f003 0307 	and.w	r3, r3, #7
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	db0b      	blt.n	8001f12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	f003 021f 	and.w	r2, r3, #31
 8001f00:	4907      	ldr	r1, [pc, #28]	; (8001f20 <__NVIC_EnableIRQ+0x38>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	095b      	lsrs	r3, r3, #5
 8001f08:	2001      	movs	r0, #1
 8001f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000e100 	.word	0xe000e100

08001f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	db0a      	blt.n	8001f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	490c      	ldr	r1, [pc, #48]	; (8001f70 <__NVIC_SetPriority+0x4c>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	0112      	lsls	r2, r2, #4
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	440b      	add	r3, r1
 8001f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f4c:	e00a      	b.n	8001f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4908      	ldr	r1, [pc, #32]	; (8001f74 <__NVIC_SetPriority+0x50>)
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	3b04      	subs	r3, #4
 8001f5c:	0112      	lsls	r2, r2, #4
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	440b      	add	r3, r1
 8001f62:	761a      	strb	r2, [r3, #24]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000e100 	.word	0xe000e100
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	; 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f1c3 0307 	rsb	r3, r3, #7
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	bf28      	it	cs
 8001f96:	2304      	movcs	r3, #4
 8001f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2b06      	cmp	r3, #6
 8001fa0:	d902      	bls.n	8001fa8 <NVIC_EncodePriority+0x30>
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3b03      	subs	r3, #3
 8001fa6:	e000      	b.n	8001faa <NVIC_EncodePriority+0x32>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	401a      	ands	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fca:	43d9      	mvns	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	4313      	orrs	r3, r2
         );
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3724      	adds	r7, #36	; 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff0:	d301      	bcc.n	8001ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e00f      	b.n	8002016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff6:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <SysTick_Config+0x40>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffe:	210f      	movs	r1, #15
 8002000:	f04f 30ff 	mov.w	r0, #4294967295
 8002004:	f7ff ff8e 	bl	8001f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <SysTick_Config+0x40>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <SysTick_Config+0x40>)
 8002010:	2207      	movs	r2, #7
 8002012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	e000e010 	.word	0xe000e010

08002024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ff29 	bl	8001e84 <__NVIC_SetPriorityGrouping>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203a:	b580      	push	{r7, lr}
 800203c:	b086      	sub	sp, #24
 800203e:	af00      	add	r7, sp, #0
 8002040:	4603      	mov	r3, r0
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800204c:	f7ff ff3e 	bl	8001ecc <__NVIC_GetPriorityGrouping>
 8002050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	6978      	ldr	r0, [r7, #20]
 8002058:	f7ff ff8e 	bl	8001f78 <NVIC_EncodePriority>
 800205c:	4602      	mov	r2, r0
 800205e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff5d 	bl	8001f24 <__NVIC_SetPriority>
}
 800206a:	bf00      	nop
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800207c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff31 	bl	8001ee8 <__NVIC_EnableIRQ>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ffa2 	bl	8001fe0 <SysTick_Config>
 800209c:	4603      	mov	r3, r0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020b4:	f7ff fac4 	bl	8001640 <HAL_GetTick>
 80020b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d008      	beq.n	80020d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2280      	movs	r2, #128	; 0x80
 80020ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e052      	b.n	800217e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0216 	bic.w	r2, r2, #22
 80020e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	695a      	ldr	r2, [r3, #20]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d103      	bne.n	8002108 <HAL_DMA_Abort+0x62>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002104:	2b00      	cmp	r3, #0
 8002106:	d007      	beq.n	8002118 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0208 	bic.w	r2, r2, #8
 8002116:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0201 	bic.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002128:	e013      	b.n	8002152 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800212a:	f7ff fa89 	bl	8001640 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b05      	cmp	r3, #5
 8002136:	d90c      	bls.n	8002152 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2220      	movs	r2, #32
 800213c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2203      	movs	r2, #3
 8002142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e015      	b.n	800217e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1e4      	bne.n	800212a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002164:	223f      	movs	r2, #63	; 0x3f
 8002166:	409a      	lsls	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d004      	beq.n	80021a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2280      	movs	r2, #128	; 0x80
 800219e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e00c      	b.n	80021be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2205      	movs	r2, #5
 80021a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0201 	bic.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	; 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	e159      	b.n	800249c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021e8:	2201      	movs	r2, #1
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	4013      	ands	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	429a      	cmp	r2, r3
 8002202:	f040 8148 	bne.w	8002496 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	2b01      	cmp	r3, #1
 8002210:	d005      	beq.n	800221e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800221a:	2b02      	cmp	r3, #2
 800221c:	d130      	bne.n	8002280 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	2203      	movs	r2, #3
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002254:	2201      	movs	r2, #1
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	f003 0201 	and.w	r2, r3, #1
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2b03      	cmp	r3, #3
 800228a:	d017      	beq.n	80022bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d123      	bne.n	8002310 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	08da      	lsrs	r2, r3, #3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3208      	adds	r2, #8
 80022d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	220f      	movs	r2, #15
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	08da      	lsrs	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3208      	adds	r2, #8
 800230a:	69b9      	ldr	r1, [r7, #24]
 800230c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	2203      	movs	r2, #3
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0203 	and.w	r2, r3, #3
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80a2 	beq.w	8002496 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	4b57      	ldr	r3, [pc, #348]	; (80024b4 <HAL_GPIO_Init+0x2e8>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	4a56      	ldr	r2, [pc, #344]	; (80024b4 <HAL_GPIO_Init+0x2e8>)
 800235c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002360:	6453      	str	r3, [r2, #68]	; 0x44
 8002362:	4b54      	ldr	r3, [pc, #336]	; (80024b4 <HAL_GPIO_Init+0x2e8>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800236e:	4a52      	ldr	r2, [pc, #328]	; (80024b8 <HAL_GPIO_Init+0x2ec>)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	089b      	lsrs	r3, r3, #2
 8002374:	3302      	adds	r3, #2
 8002376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	220f      	movs	r2, #15
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4013      	ands	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a49      	ldr	r2, [pc, #292]	; (80024bc <HAL_GPIO_Init+0x2f0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d019      	beq.n	80023ce <HAL_GPIO_Init+0x202>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a48      	ldr	r2, [pc, #288]	; (80024c0 <HAL_GPIO_Init+0x2f4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d013      	beq.n	80023ca <HAL_GPIO_Init+0x1fe>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a47      	ldr	r2, [pc, #284]	; (80024c4 <HAL_GPIO_Init+0x2f8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00d      	beq.n	80023c6 <HAL_GPIO_Init+0x1fa>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a46      	ldr	r2, [pc, #280]	; (80024c8 <HAL_GPIO_Init+0x2fc>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d007      	beq.n	80023c2 <HAL_GPIO_Init+0x1f6>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a45      	ldr	r2, [pc, #276]	; (80024cc <HAL_GPIO_Init+0x300>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d101      	bne.n	80023be <HAL_GPIO_Init+0x1f2>
 80023ba:	2304      	movs	r3, #4
 80023bc:	e008      	b.n	80023d0 <HAL_GPIO_Init+0x204>
 80023be:	2307      	movs	r3, #7
 80023c0:	e006      	b.n	80023d0 <HAL_GPIO_Init+0x204>
 80023c2:	2303      	movs	r3, #3
 80023c4:	e004      	b.n	80023d0 <HAL_GPIO_Init+0x204>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e002      	b.n	80023d0 <HAL_GPIO_Init+0x204>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_GPIO_Init+0x204>
 80023ce:	2300      	movs	r3, #0
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	f002 0203 	and.w	r2, r2, #3
 80023d6:	0092      	lsls	r2, r2, #2
 80023d8:	4093      	lsls	r3, r2
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023e0:	4935      	ldr	r1, [pc, #212]	; (80024b8 <HAL_GPIO_Init+0x2ec>)
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	3302      	adds	r3, #2
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ee:	4b38      	ldr	r3, [pc, #224]	; (80024d0 <HAL_GPIO_Init+0x304>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002412:	4a2f      	ldr	r2, [pc, #188]	; (80024d0 <HAL_GPIO_Init+0x304>)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002418:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <HAL_GPIO_Init+0x304>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800243c:	4a24      	ldr	r2, [pc, #144]	; (80024d0 <HAL_GPIO_Init+0x304>)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002442:	4b23      	ldr	r3, [pc, #140]	; (80024d0 <HAL_GPIO_Init+0x304>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002466:	4a1a      	ldr	r2, [pc, #104]	; (80024d0 <HAL_GPIO_Init+0x304>)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800246c:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <HAL_GPIO_Init+0x304>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002490:	4a0f      	ldr	r2, [pc, #60]	; (80024d0 <HAL_GPIO_Init+0x304>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3301      	adds	r3, #1
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	2b0f      	cmp	r3, #15
 80024a0:	f67f aea2 	bls.w	80021e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	3724      	adds	r7, #36	; 0x24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40013800 	.word	0x40013800
 80024bc:	40020000 	.word	0x40020000
 80024c0:	40020400 	.word	0x40020400
 80024c4:	40020800 	.word	0x40020800
 80024c8:	40020c00 	.word	0x40020c00
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40013c00 	.word	0x40013c00

080024d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e267      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d075      	beq.n	80025de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024f2:	4b88      	ldr	r3, [pc, #544]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d00c      	beq.n	8002518 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fe:	4b85      	ldr	r3, [pc, #532]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002506:	2b08      	cmp	r3, #8
 8002508:	d112      	bne.n	8002530 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800250a:	4b82      	ldr	r3, [pc, #520]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002516:	d10b      	bne.n	8002530 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	4b7e      	ldr	r3, [pc, #504]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d05b      	beq.n	80025dc <HAL_RCC_OscConfig+0x108>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d157      	bne.n	80025dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e242      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002538:	d106      	bne.n	8002548 <HAL_RCC_OscConfig+0x74>
 800253a:	4b76      	ldr	r3, [pc, #472]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a75      	ldr	r2, [pc, #468]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e01d      	b.n	8002584 <HAL_RCC_OscConfig+0xb0>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002550:	d10c      	bne.n	800256c <HAL_RCC_OscConfig+0x98>
 8002552:	4b70      	ldr	r3, [pc, #448]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6f      	ldr	r2, [pc, #444]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 8002558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b6d      	ldr	r3, [pc, #436]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a6c      	ldr	r2, [pc, #432]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 8002564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e00b      	b.n	8002584 <HAL_RCC_OscConfig+0xb0>
 800256c:	4b69      	ldr	r3, [pc, #420]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a68      	ldr	r2, [pc, #416]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 8002572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b66      	ldr	r3, [pc, #408]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a65      	ldr	r2, [pc, #404]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 800257e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d013      	beq.n	80025b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258c:	f7ff f858 	bl	8001640 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002594:	f7ff f854 	bl	8001640 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	; 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e207      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a6:	4b5b      	ldr	r3, [pc, #364]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0xc0>
 80025b2:	e014      	b.n	80025de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b4:	f7ff f844 	bl	8001640 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025bc:	f7ff f840 	bl	8001640 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	; 0x64
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e1f3      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ce:	4b51      	ldr	r3, [pc, #324]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0xe8>
 80025da:	e000      	b.n	80025de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d063      	beq.n	80026b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ea:	4b4a      	ldr	r3, [pc, #296]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f6:	4b47      	ldr	r3, [pc, #284]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d11c      	bne.n	800263c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002602:	4b44      	ldr	r3, [pc, #272]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d116      	bne.n	800263c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	4b41      	ldr	r3, [pc, #260]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_RCC_OscConfig+0x152>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d001      	beq.n	8002626 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e1c7      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002626:	4b3b      	ldr	r3, [pc, #236]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4937      	ldr	r1, [pc, #220]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263a:	e03a      	b.n	80026b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d020      	beq.n	8002686 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002644:	4b34      	ldr	r3, [pc, #208]	; (8002718 <HAL_RCC_OscConfig+0x244>)
 8002646:	2201      	movs	r2, #1
 8002648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264a:	f7fe fff9 	bl	8001640 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002652:	f7fe fff5 	bl	8001640 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e1a8      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002664:	4b2b      	ldr	r3, [pc, #172]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002670:	4b28      	ldr	r3, [pc, #160]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4925      	ldr	r1, [pc, #148]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 8002680:	4313      	orrs	r3, r2
 8002682:	600b      	str	r3, [r1, #0]
 8002684:	e015      	b.n	80026b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002686:	4b24      	ldr	r3, [pc, #144]	; (8002718 <HAL_RCC_OscConfig+0x244>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7fe ffd8 	bl	8001640 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002694:	f7fe ffd4 	bl	8001640 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e187      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a6:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d036      	beq.n	800272c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d016      	beq.n	80026f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c6:	4b15      	ldr	r3, [pc, #84]	; (800271c <HAL_RCC_OscConfig+0x248>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026cc:	f7fe ffb8 	bl	8001640 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d4:	f7fe ffb4 	bl	8001640 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e167      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e6:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCC_OscConfig+0x240>)
 80026e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0x200>
 80026f2:	e01b      	b.n	800272c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f4:	4b09      	ldr	r3, [pc, #36]	; (800271c <HAL_RCC_OscConfig+0x248>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fa:	f7fe ffa1 	bl	8001640 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002700:	e00e      	b.n	8002720 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002702:	f7fe ff9d 	bl	8001640 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d907      	bls.n	8002720 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e150      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
 8002714:	40023800 	.word	0x40023800
 8002718:	42470000 	.word	0x42470000
 800271c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002720:	4b88      	ldr	r3, [pc, #544]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 8002722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1ea      	bne.n	8002702 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 8097 	beq.w	8002868 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273a:	2300      	movs	r3, #0
 800273c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273e:	4b81      	ldr	r3, [pc, #516]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10f      	bne.n	800276a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	4b7d      	ldr	r3, [pc, #500]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	4a7c      	ldr	r2, [pc, #496]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002758:	6413      	str	r3, [r2, #64]	; 0x40
 800275a:	4b7a      	ldr	r3, [pc, #488]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002766:	2301      	movs	r3, #1
 8002768:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276a:	4b77      	ldr	r3, [pc, #476]	; (8002948 <HAL_RCC_OscConfig+0x474>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d118      	bne.n	80027a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002776:	4b74      	ldr	r3, [pc, #464]	; (8002948 <HAL_RCC_OscConfig+0x474>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a73      	ldr	r2, [pc, #460]	; (8002948 <HAL_RCC_OscConfig+0x474>)
 800277c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002782:	f7fe ff5d 	bl	8001640 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278a:	f7fe ff59 	bl	8001640 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e10c      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279c:	4b6a      	ldr	r3, [pc, #424]	; (8002948 <HAL_RCC_OscConfig+0x474>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x2ea>
 80027b0:	4b64      	ldr	r3, [pc, #400]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	4a63      	ldr	r2, [pc, #396]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6713      	str	r3, [r2, #112]	; 0x70
 80027bc:	e01c      	b.n	80027f8 <HAL_RCC_OscConfig+0x324>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b05      	cmp	r3, #5
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x30c>
 80027c6:	4b5f      	ldr	r3, [pc, #380]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	4a5e      	ldr	r2, [pc, #376]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	6713      	str	r3, [r2, #112]	; 0x70
 80027d2:	4b5c      	ldr	r3, [pc, #368]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d6:	4a5b      	ldr	r2, [pc, #364]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	6713      	str	r3, [r2, #112]	; 0x70
 80027de:	e00b      	b.n	80027f8 <HAL_RCC_OscConfig+0x324>
 80027e0:	4b58      	ldr	r3, [pc, #352]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	4a57      	ldr	r2, [pc, #348]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 80027e6:	f023 0301 	bic.w	r3, r3, #1
 80027ea:	6713      	str	r3, [r2, #112]	; 0x70
 80027ec:	4b55      	ldr	r3, [pc, #340]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	4a54      	ldr	r2, [pc, #336]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 80027f2:	f023 0304 	bic.w	r3, r3, #4
 80027f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d015      	beq.n	800282c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7fe ff1e 	bl	8001640 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002806:	e00a      	b.n	800281e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7fe ff1a 	bl	8001640 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e0cb      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281e:	4b49      	ldr	r3, [pc, #292]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0ee      	beq.n	8002808 <HAL_RCC_OscConfig+0x334>
 800282a:	e014      	b.n	8002856 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282c:	f7fe ff08 	bl	8001640 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002832:	e00a      	b.n	800284a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002834:	f7fe ff04 	bl	8001640 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002842:	4293      	cmp	r3, r2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e0b5      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800284a:	4b3e      	ldr	r3, [pc, #248]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1ee      	bne.n	8002834 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002856:	7dfb      	ldrb	r3, [r7, #23]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d105      	bne.n	8002868 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285c:	4b39      	ldr	r3, [pc, #228]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	4a38      	ldr	r2, [pc, #224]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 8002862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002866:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80a1 	beq.w	80029b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002872:	4b34      	ldr	r3, [pc, #208]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b08      	cmp	r3, #8
 800287c:	d05c      	beq.n	8002938 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d141      	bne.n	800290a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002886:	4b31      	ldr	r3, [pc, #196]	; (800294c <HAL_RCC_OscConfig+0x478>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe fed8 	bl	8001640 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002894:	f7fe fed4 	bl	8001640 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e087      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	4b27      	ldr	r3, [pc, #156]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69da      	ldr	r2, [r3, #28]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	019b      	lsls	r3, r3, #6
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c8:	085b      	lsrs	r3, r3, #1
 80028ca:	3b01      	subs	r3, #1
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	061b      	lsls	r3, r3, #24
 80028d6:	491b      	ldr	r1, [pc, #108]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028dc:	4b1b      	ldr	r3, [pc, #108]	; (800294c <HAL_RCC_OscConfig+0x478>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7fe fead 	bl	8001640 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ea:	f7fe fea9 	bl	8001640 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e05c      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fc:	4b11      	ldr	r3, [pc, #68]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x416>
 8002908:	e054      	b.n	80029b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <HAL_RCC_OscConfig+0x478>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7fe fe96 	bl	8001640 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002918:	f7fe fe92 	bl	8001640 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e045      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_RCC_OscConfig+0x470>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x444>
 8002936:	e03d      	b.n	80029b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d107      	bne.n	8002950 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e038      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
 8002944:	40023800 	.word	0x40023800
 8002948:	40007000 	.word	0x40007000
 800294c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002950:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <HAL_RCC_OscConfig+0x4ec>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d028      	beq.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d121      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d11a      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002980:	4013      	ands	r3, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002986:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002988:	4293      	cmp	r3, r2
 800298a:	d111      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	085b      	lsrs	r3, r3, #1
 8002998:	3b01      	subs	r3, #1
 800299a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d107      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800

080029c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0cc      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d8:	4b68      	ldr	r3, [pc, #416]	; (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d90c      	bls.n	8002a00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e6:	4b65      	ldr	r3, [pc, #404]	; (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ee:	4b63      	ldr	r3, [pc, #396]	; (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0b8      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d020      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a18:	4b59      	ldr	r3, [pc, #356]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	4a58      	ldr	r2, [pc, #352]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a30:	4b53      	ldr	r3, [pc, #332]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	4a52      	ldr	r2, [pc, #328]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a3c:	4b50      	ldr	r3, [pc, #320]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	494d      	ldr	r1, [pc, #308]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d044      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d107      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	4b47      	ldr	r3, [pc, #284]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d119      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e07f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d003      	beq.n	8002a82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a82:	4b3f      	ldr	r3, [pc, #252]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e06f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a92:	4b3b      	ldr	r3, [pc, #236]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e067      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aa2:	4b37      	ldr	r3, [pc, #220]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f023 0203 	bic.w	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4934      	ldr	r1, [pc, #208]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab4:	f7fe fdc4 	bl	8001640 <HAL_GetTick>
 8002ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002abc:	f7fe fdc0 	bl	8001640 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e04f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad2:	4b2b      	ldr	r3, [pc, #172]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 020c 	and.w	r2, r3, #12
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d1eb      	bne.n	8002abc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b25      	ldr	r3, [pc, #148]	; (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d20c      	bcs.n	8002b0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	4b20      	ldr	r3, [pc, #128]	; (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e032      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b18:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4916      	ldr	r1, [pc, #88]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d009      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b36:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	490e      	ldr	r1, [pc, #56]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b4a:	f000 f821 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	091b      	lsrs	r3, r3, #4
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	490a      	ldr	r1, [pc, #40]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 8002b5c:	5ccb      	ldrb	r3, [r1, r3]
 8002b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b62:	4a09      	ldr	r2, [pc, #36]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b66:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fe fd24 	bl	80015b8 <HAL_InitTick>

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023c00 	.word	0x40023c00
 8002b80:	40023800 	.word	0x40023800
 8002b84:	08004cf8 	.word	0x08004cf8
 8002b88:	20000028 	.word	0x20000028
 8002b8c:	2000002c 	.word	0x2000002c

08002b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b94:	b090      	sub	sp, #64	; 0x40
 8002b96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ba8:	4b59      	ldr	r3, [pc, #356]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 030c 	and.w	r3, r3, #12
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d00d      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x40>
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	f200 80a1 	bhi.w	8002cfc <HAL_RCC_GetSysClockFreq+0x16c>
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d003      	beq.n	8002bca <HAL_RCC_GetSysClockFreq+0x3a>
 8002bc2:	e09b      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bc4:	4b53      	ldr	r3, [pc, #332]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bc6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002bc8:	e09b      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bca:	4b53      	ldr	r3, [pc, #332]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bcc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bce:	e098      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bd0:	4b4f      	ldr	r3, [pc, #316]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bd8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bda:	4b4d      	ldr	r3, [pc, #308]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d028      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be6:	4b4a      	ldr	r3, [pc, #296]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	099b      	lsrs	r3, r3, #6
 8002bec:	2200      	movs	r2, #0
 8002bee:	623b      	str	r3, [r7, #32]
 8002bf0:	627a      	str	r2, [r7, #36]	; 0x24
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4b47      	ldr	r3, [pc, #284]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bfc:	fb03 f201 	mul.w	r2, r3, r1
 8002c00:	2300      	movs	r3, #0
 8002c02:	fb00 f303 	mul.w	r3, r0, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	4a43      	ldr	r2, [pc, #268]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c0a:	fba0 1202 	umull	r1, r2, r0, r2
 8002c0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c10:	460a      	mov	r2, r1
 8002c12:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c16:	4413      	add	r3, r2
 8002c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	61bb      	str	r3, [r7, #24]
 8002c20:	61fa      	str	r2, [r7, #28]
 8002c22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c2a:	f7fd ff1f 	bl	8000a6c <__aeabi_uldivmod>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4613      	mov	r3, r2
 8002c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c36:	e053      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c38:	4b35      	ldr	r3, [pc, #212]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	099b      	lsrs	r3, r3, #6
 8002c3e:	2200      	movs	r2, #0
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	617a      	str	r2, [r7, #20]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c4a:	f04f 0b00 	mov.w	fp, #0
 8002c4e:	4652      	mov	r2, sl
 8002c50:	465b      	mov	r3, fp
 8002c52:	f04f 0000 	mov.w	r0, #0
 8002c56:	f04f 0100 	mov.w	r1, #0
 8002c5a:	0159      	lsls	r1, r3, #5
 8002c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c60:	0150      	lsls	r0, r2, #5
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	ebb2 080a 	subs.w	r8, r2, sl
 8002c6a:	eb63 090b 	sbc.w	r9, r3, fp
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c82:	ebb2 0408 	subs.w	r4, r2, r8
 8002c86:	eb63 0509 	sbc.w	r5, r3, r9
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	00eb      	lsls	r3, r5, #3
 8002c94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c98:	00e2      	lsls	r2, r4, #3
 8002c9a:	4614      	mov	r4, r2
 8002c9c:	461d      	mov	r5, r3
 8002c9e:	eb14 030a 	adds.w	r3, r4, sl
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	eb45 030b 	adc.w	r3, r5, fp
 8002ca8:	607b      	str	r3, [r7, #4]
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	028b      	lsls	r3, r1, #10
 8002cba:	4621      	mov	r1, r4
 8002cbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	028a      	lsls	r2, r1, #10
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	60fa      	str	r2, [r7, #12]
 8002cd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cd4:	f7fd feca 	bl	8000a6c <__aeabi_uldivmod>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4613      	mov	r3, r2
 8002cde:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	0c1b      	lsrs	r3, r3, #16
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	3301      	adds	r3, #1
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002cf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cfa:	e002      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cfe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3740      	adds	r7, #64	; 0x40
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800
 8002d14:	00f42400 	.word	0x00f42400
 8002d18:	017d7840 	.word	0x017d7840

08002d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d20:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20000028 	.word	0x20000028

08002d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d38:	f7ff fff0 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	0a9b      	lsrs	r3, r3, #10
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	4903      	ldr	r1, [pc, #12]	; (8002d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d4a:	5ccb      	ldrb	r3, [r1, r3]
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40023800 	.word	0x40023800
 8002d58:	08004d08 	.word	0x08004d08

08002d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d60:	f7ff ffdc 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	0b5b      	lsrs	r3, r3, #13
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	4903      	ldr	r1, [pc, #12]	; (8002d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d72:	5ccb      	ldrb	r3, [r1, r3]
 8002d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	08004d08 	.word	0x08004d08

08002d84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e042      	b.n	8002e1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fe fa74 	bl	8001298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2224      	movs	r2, #36	; 0x24
 8002db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 fd69 	bl	80038a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695a      	ldr	r2, [r3, #20]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08a      	sub	sp, #40	; 0x28
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	4613      	mov	r3, r2
 8002e32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	d175      	bne.n	8002f30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <HAL_UART_Transmit+0x2c>
 8002e4a:	88fb      	ldrh	r3, [r7, #6]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e06e      	b.n	8002f32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2221      	movs	r2, #33	; 0x21
 8002e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e62:	f7fe fbed 	bl	8001640 <HAL_GetTick>
 8002e66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	88fa      	ldrh	r2, [r7, #6]
 8002e6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	88fa      	ldrh	r2, [r7, #6]
 8002e72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e7c:	d108      	bne.n	8002e90 <HAL_UART_Transmit+0x6c>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d104      	bne.n	8002e90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	61bb      	str	r3, [r7, #24]
 8002e8e:	e003      	b.n	8002e98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e98:	e02e      	b.n	8002ef8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2180      	movs	r1, #128	; 0x80
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 fb05 	bl	80034b4 <UART_WaitOnFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e03a      	b.n	8002f32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10b      	bne.n	8002eda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ed0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	3302      	adds	r3, #2
 8002ed6:	61bb      	str	r3, [r7, #24]
 8002ed8:	e007      	b.n	8002eea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	781a      	ldrb	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1cb      	bne.n	8002e9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2140      	movs	r1, #64	; 0x40
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 fad1 	bl	80034b4 <UART_WaitOnFlagUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e006      	b.n	8002f32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e000      	b.n	8002f32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f30:	2302      	movs	r3, #2
  }
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3720      	adds	r7, #32
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b0ba      	sub	sp, #232	; 0xe8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002f7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10f      	bne.n	8002fa2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f86:	f003 0320 	and.w	r3, r3, #32
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d009      	beq.n	8002fa2 <HAL_UART_IRQHandler+0x66>
 8002f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fbc2 	bl	8003724 <UART_Receive_IT>
      return;
 8002fa0:	e25b      	b.n	800345a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 80de 	beq.w	8003168 <HAL_UART_IRQHandler+0x22c>
 8002fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d106      	bne.n	8002fc6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fbc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80d1 	beq.w	8003168 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00b      	beq.n	8002fea <HAL_UART_IRQHandler+0xae>
 8002fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d005      	beq.n	8002fea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	f043 0201 	orr.w	r2, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00b      	beq.n	800300e <HAL_UART_IRQHandler+0xd2>
 8002ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	f043 0202 	orr.w	r2, r3, #2
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800300e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <HAL_UART_IRQHandler+0xf6>
 800301a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	f043 0204 	orr.w	r2, r3, #4
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d011      	beq.n	8003062 <HAL_UART_IRQHandler+0x126>
 800303e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	2b00      	cmp	r3, #0
 8003048:	d105      	bne.n	8003056 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800304a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f043 0208 	orr.w	r2, r3, #8
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 81f2 	beq.w	8003450 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800306c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_UART_IRQHandler+0x14e>
 8003078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800307c:	f003 0320 	and.w	r3, r3, #32
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fb4d 	bl	8003724 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003094:	2b40      	cmp	r3, #64	; 0x40
 8003096:	bf0c      	ite	eq
 8003098:	2301      	moveq	r3, #1
 800309a:	2300      	movne	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d103      	bne.n	80030b6 <HAL_UART_IRQHandler+0x17a>
 80030ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d04f      	beq.n	8003156 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 fa55 	bl	8003566 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c6:	2b40      	cmp	r3, #64	; 0x40
 80030c8:	d141      	bne.n	800314e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	3314      	adds	r3, #20
 80030d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030d8:	e853 3f00 	ldrex	r3, [r3]
 80030dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	3314      	adds	r3, #20
 80030f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80030f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80030fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003102:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003106:	e841 2300 	strex	r3, r2, [r1]
 800310a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800310e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1d9      	bne.n	80030ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311a:	2b00      	cmp	r3, #0
 800311c:	d013      	beq.n	8003146 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003122:	4a7e      	ldr	r2, [pc, #504]	; (800331c <HAL_UART_IRQHandler+0x3e0>)
 8003124:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff f82b 	bl	8002186 <HAL_DMA_Abort_IT>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d016      	beq.n	8003164 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003140:	4610      	mov	r0, r2
 8003142:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003144:	e00e      	b.n	8003164 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f99e 	bl	8003488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800314c:	e00a      	b.n	8003164 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f99a 	bl	8003488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003154:	e006      	b.n	8003164 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f996 	bl	8003488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003162:	e175      	b.n	8003450 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003164:	bf00      	nop
    return;
 8003166:	e173      	b.n	8003450 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	2b01      	cmp	r3, #1
 800316e:	f040 814f 	bne.w	8003410 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 8148 	beq.w	8003410 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8141 	beq.w	8003410 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800318e:	2300      	movs	r3, #0
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ae:	2b40      	cmp	r3, #64	; 0x40
 80031b0:	f040 80b6 	bne.w	8003320 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 8145 	beq.w	8003454 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031d2:	429a      	cmp	r2, r3
 80031d4:	f080 813e 	bcs.w	8003454 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ea:	f000 8088 	beq.w	80032fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	330c      	adds	r3, #12
 80031f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031fc:	e853 3f00 	ldrex	r3, [r3]
 8003200:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003204:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800320c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	330c      	adds	r3, #12
 8003216:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800321a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800321e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003222:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003226:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800322a:	e841 2300 	strex	r3, r2, [r1]
 800322e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003232:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1d9      	bne.n	80031ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	3314      	adds	r3, #20
 8003240:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003244:	e853 3f00 	ldrex	r3, [r3]
 8003248:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800324a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800324c:	f023 0301 	bic.w	r3, r3, #1
 8003250:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3314      	adds	r3, #20
 800325a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800325e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003262:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003264:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003266:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800326a:	e841 2300 	strex	r3, r2, [r1]
 800326e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003270:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1e1      	bne.n	800323a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3314      	adds	r3, #20
 800327c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003280:	e853 3f00 	ldrex	r3, [r3]
 8003284:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800328c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3314      	adds	r3, #20
 8003296:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800329a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800329c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032a2:	e841 2300 	strex	r3, r2, [r1]
 80032a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1e3      	bne.n	8003276 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	330c      	adds	r3, #12
 80032c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c6:	e853 3f00 	ldrex	r3, [r3]
 80032ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ce:	f023 0310 	bic.w	r3, r3, #16
 80032d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	330c      	adds	r3, #12
 80032dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80032e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80032e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032e8:	e841 2300 	strex	r3, r2, [r1]
 80032ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1e3      	bne.n	80032bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fe fed4 	bl	80020a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2202      	movs	r2, #2
 8003302:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800330c:	b29b      	uxth	r3, r3
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	b29b      	uxth	r3, r3
 8003312:	4619      	mov	r1, r3
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f8c1 	bl	800349c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800331a:	e09b      	b.n	8003454 <HAL_UART_IRQHandler+0x518>
 800331c:	0800362d 	.word	0x0800362d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003328:	b29b      	uxth	r3, r3
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 808e 	beq.w	8003458 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800333c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 8089 	beq.w	8003458 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	330c      	adds	r3, #12
 800334c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003350:	e853 3f00 	ldrex	r3, [r3]
 8003354:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003358:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800335c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	330c      	adds	r3, #12
 8003366:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800336a:	647a      	str	r2, [r7, #68]	; 0x44
 800336c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003370:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003372:	e841 2300 	strex	r3, r2, [r1]
 8003376:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1e3      	bne.n	8003346 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3314      	adds	r3, #20
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	e853 3f00 	ldrex	r3, [r3]
 800338c:	623b      	str	r3, [r7, #32]
   return(result);
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	f023 0301 	bic.w	r3, r3, #1
 8003394:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3314      	adds	r3, #20
 800339e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033a2:	633a      	str	r2, [r7, #48]	; 0x30
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033aa:	e841 2300 	strex	r3, r2, [r1]
 80033ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1e3      	bne.n	800337e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	330c      	adds	r3, #12
 80033ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	e853 3f00 	ldrex	r3, [r3]
 80033d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 0310 	bic.w	r3, r3, #16
 80033da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	330c      	adds	r3, #12
 80033e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80033e8:	61fa      	str	r2, [r7, #28]
 80033ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ec:	69b9      	ldr	r1, [r7, #24]
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	e841 2300 	strex	r3, r2, [r1]
 80033f4:	617b      	str	r3, [r7, #20]
   return(result);
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1e3      	bne.n	80033c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003402:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003406:	4619      	mov	r1, r3
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f847 	bl	800349c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800340e:	e023      	b.n	8003458 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003418:	2b00      	cmp	r3, #0
 800341a:	d009      	beq.n	8003430 <HAL_UART_IRQHandler+0x4f4>
 800341c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f913 	bl	8003654 <UART_Transmit_IT>
    return;
 800342e:	e014      	b.n	800345a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00e      	beq.n	800345a <HAL_UART_IRQHandler+0x51e>
 800343c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f953 	bl	80036f4 <UART_EndTransmit_IT>
    return;
 800344e:	e004      	b.n	800345a <HAL_UART_IRQHandler+0x51e>
    return;
 8003450:	bf00      	nop
 8003452:	e002      	b.n	800345a <HAL_UART_IRQHandler+0x51e>
      return;
 8003454:	bf00      	nop
 8003456:	e000      	b.n	800345a <HAL_UART_IRQHandler+0x51e>
      return;
 8003458:	bf00      	nop
  }
}
 800345a:	37e8      	adds	r7, #232	; 0xe8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	4613      	mov	r3, r2
 80034c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c4:	e03b      	b.n	800353e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034cc:	d037      	beq.n	800353e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ce:	f7fe f8b7 	bl	8001640 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	6a3a      	ldr	r2, [r7, #32]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d302      	bcc.n	80034e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e03a      	b.n	800355e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d023      	beq.n	800353e <UART_WaitOnFlagUntilTimeout+0x8a>
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b80      	cmp	r3, #128	; 0x80
 80034fa:	d020      	beq.n	800353e <UART_WaitOnFlagUntilTimeout+0x8a>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b40      	cmp	r3, #64	; 0x40
 8003500:	d01d      	beq.n	800353e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b08      	cmp	r3, #8
 800350e:	d116      	bne.n	800353e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f81d 	bl	8003566 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2208      	movs	r2, #8
 8003530:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e00f      	b.n	800355e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	4013      	ands	r3, r2
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	429a      	cmp	r2, r3
 800354c:	bf0c      	ite	eq
 800354e:	2301      	moveq	r3, #1
 8003550:	2300      	movne	r3, #0
 8003552:	b2db      	uxtb	r3, r3
 8003554:	461a      	mov	r2, r3
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	429a      	cmp	r2, r3
 800355a:	d0b4      	beq.n	80034c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003566:	b480      	push	{r7}
 8003568:	b095      	sub	sp, #84	; 0x54
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	330c      	adds	r3, #12
 8003574:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003578:	e853 3f00 	ldrex	r3, [r3]
 800357c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003584:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	330c      	adds	r3, #12
 800358c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800358e:	643a      	str	r2, [r7, #64]	; 0x40
 8003590:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003594:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800359c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e5      	bne.n	800356e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3314      	adds	r3, #20
 80035a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	e853 3f00 	ldrex	r3, [r3]
 80035b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3314      	adds	r3, #20
 80035c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ca:	e841 2300 	strex	r3, r2, [r1]
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1e5      	bne.n	80035a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d119      	bne.n	8003612 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	330c      	adds	r3, #12
 80035e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	f023 0310 	bic.w	r3, r3, #16
 80035f4:	647b      	str	r3, [r7, #68]	; 0x44
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	330c      	adds	r3, #12
 80035fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035fe:	61ba      	str	r2, [r7, #24]
 8003600:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003602:	6979      	ldr	r1, [r7, #20]
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	613b      	str	r3, [r7, #16]
   return(result);
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e5      	bne.n	80035de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003620:	bf00      	nop
 8003622:	3754      	adds	r7, #84	; 0x54
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003638:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f7ff ff1e 	bl	8003488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800364c:	bf00      	nop
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b21      	cmp	r3, #33	; 0x21
 8003666:	d13e      	bne.n	80036e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003670:	d114      	bne.n	800369c <UART_Transmit_IT+0x48>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d110      	bne.n	800369c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	461a      	mov	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800368e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	1c9a      	adds	r2, r3, #2
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	621a      	str	r2, [r3, #32]
 800369a:	e008      	b.n	80036ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	1c59      	adds	r1, r3, #1
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6211      	str	r1, [r2, #32]
 80036a6:	781a      	ldrb	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	4619      	mov	r1, r3
 80036bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10f      	bne.n	80036e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	e000      	b.n	80036e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036e6:	2302      	movs	r3, #2
  }
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800370a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff fea3 	bl	8003460 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b08c      	sub	sp, #48	; 0x30
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b22      	cmp	r3, #34	; 0x22
 8003736:	f040 80ae 	bne.w	8003896 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003742:	d117      	bne.n	8003774 <UART_Receive_IT+0x50>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d113      	bne.n	8003774 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800374c:	2300      	movs	r3, #0
 800374e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	b29b      	uxth	r3, r3
 800375e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003762:	b29a      	uxth	r2, r3
 8003764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003766:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	1c9a      	adds	r2, r3, #2
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	629a      	str	r2, [r3, #40]	; 0x28
 8003772:	e026      	b.n	80037c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800377a:	2300      	movs	r3, #0
 800377c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003786:	d007      	beq.n	8003798 <UART_Receive_IT+0x74>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10a      	bne.n	80037a6 <UART_Receive_IT+0x82>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d106      	bne.n	80037a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a2:	701a      	strb	r2, [r3, #0]
 80037a4:	e008      	b.n	80037b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	4619      	mov	r1, r3
 80037d0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d15d      	bne.n	8003892 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0220 	bic.w	r2, r2, #32
 80037e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695a      	ldr	r2, [r3, #20]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0201 	bic.w	r2, r2, #1
 8003804:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	2b01      	cmp	r3, #1
 800381a:	d135      	bne.n	8003888 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	330c      	adds	r3, #12
 8003828:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	e853 3f00 	ldrex	r3, [r3]
 8003830:	613b      	str	r3, [r7, #16]
   return(result);
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f023 0310 	bic.w	r3, r3, #16
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	330c      	adds	r3, #12
 8003840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003842:	623a      	str	r2, [r7, #32]
 8003844:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003846:	69f9      	ldr	r1, [r7, #28]
 8003848:	6a3a      	ldr	r2, [r7, #32]
 800384a:	e841 2300 	strex	r3, r2, [r1]
 800384e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1e5      	bne.n	8003822 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0310 	and.w	r3, r3, #16
 8003860:	2b10      	cmp	r3, #16
 8003862:	d10a      	bne.n	800387a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003864:	2300      	movs	r3, #0
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800387e:	4619      	mov	r1, r3
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff fe0b 	bl	800349c <HAL_UARTEx_RxEventCallback>
 8003886:	e002      	b.n	800388e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff fdf3 	bl	8003474 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	e002      	b.n	8003898 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	e000      	b.n	8003898 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003896:	2302      	movs	r3, #2
  }
}
 8003898:	4618      	mov	r0, r3
 800389a:	3730      	adds	r7, #48	; 0x30
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038a4:	b0c0      	sub	sp, #256	; 0x100
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038bc:	68d9      	ldr	r1, [r3, #12]
 80038be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	ea40 0301 	orr.w	r3, r0, r1
 80038c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	431a      	orrs	r2, r3
 80038e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038f8:	f021 010c 	bic.w	r1, r1, #12
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003906:	430b      	orrs	r3, r1
 8003908:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800390a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391a:	6999      	ldr	r1, [r3, #24]
 800391c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	ea40 0301 	orr.w	r3, r0, r1
 8003926:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	4b8f      	ldr	r3, [pc, #572]	; (8003b6c <UART_SetConfig+0x2cc>)
 8003930:	429a      	cmp	r2, r3
 8003932:	d005      	beq.n	8003940 <UART_SetConfig+0xa0>
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4b8d      	ldr	r3, [pc, #564]	; (8003b70 <UART_SetConfig+0x2d0>)
 800393c:	429a      	cmp	r2, r3
 800393e:	d104      	bne.n	800394a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003940:	f7ff fa0c 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 8003944:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003948:	e003      	b.n	8003952 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800394a:	f7ff f9f3 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 800394e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800395c:	f040 810c 	bne.w	8003b78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003964:	2200      	movs	r2, #0
 8003966:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800396a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800396e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003972:	4622      	mov	r2, r4
 8003974:	462b      	mov	r3, r5
 8003976:	1891      	adds	r1, r2, r2
 8003978:	65b9      	str	r1, [r7, #88]	; 0x58
 800397a:	415b      	adcs	r3, r3
 800397c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800397e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003982:	4621      	mov	r1, r4
 8003984:	eb12 0801 	adds.w	r8, r2, r1
 8003988:	4629      	mov	r1, r5
 800398a:	eb43 0901 	adc.w	r9, r3, r1
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800399a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800399e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039a2:	4690      	mov	r8, r2
 80039a4:	4699      	mov	r9, r3
 80039a6:	4623      	mov	r3, r4
 80039a8:	eb18 0303 	adds.w	r3, r8, r3
 80039ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039b0:	462b      	mov	r3, r5
 80039b2:	eb49 0303 	adc.w	r3, r9, r3
 80039b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039ce:	460b      	mov	r3, r1
 80039d0:	18db      	adds	r3, r3, r3
 80039d2:	653b      	str	r3, [r7, #80]	; 0x50
 80039d4:	4613      	mov	r3, r2
 80039d6:	eb42 0303 	adc.w	r3, r2, r3
 80039da:	657b      	str	r3, [r7, #84]	; 0x54
 80039dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039e4:	f7fd f842 	bl	8000a6c <__aeabi_uldivmod>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4b61      	ldr	r3, [pc, #388]	; (8003b74 <UART_SetConfig+0x2d4>)
 80039ee:	fba3 2302 	umull	r2, r3, r3, r2
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	011c      	lsls	r4, r3, #4
 80039f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039fa:	2200      	movs	r2, #0
 80039fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a08:	4642      	mov	r2, r8
 8003a0a:	464b      	mov	r3, r9
 8003a0c:	1891      	adds	r1, r2, r2
 8003a0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a10:	415b      	adcs	r3, r3
 8003a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a18:	4641      	mov	r1, r8
 8003a1a:	eb12 0a01 	adds.w	sl, r2, r1
 8003a1e:	4649      	mov	r1, r9
 8003a20:	eb43 0b01 	adc.w	fp, r3, r1
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a38:	4692      	mov	sl, r2
 8003a3a:	469b      	mov	fp, r3
 8003a3c:	4643      	mov	r3, r8
 8003a3e:	eb1a 0303 	adds.w	r3, sl, r3
 8003a42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a46:	464b      	mov	r3, r9
 8003a48:	eb4b 0303 	adc.w	r3, fp, r3
 8003a4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a64:	460b      	mov	r3, r1
 8003a66:	18db      	adds	r3, r3, r3
 8003a68:	643b      	str	r3, [r7, #64]	; 0x40
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	eb42 0303 	adc.w	r3, r2, r3
 8003a70:	647b      	str	r3, [r7, #68]	; 0x44
 8003a72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a7a:	f7fc fff7 	bl	8000a6c <__aeabi_uldivmod>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	4611      	mov	r1, r2
 8003a84:	4b3b      	ldr	r3, [pc, #236]	; (8003b74 <UART_SetConfig+0x2d4>)
 8003a86:	fba3 2301 	umull	r2, r3, r3, r1
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	2264      	movs	r2, #100	; 0x64
 8003a8e:	fb02 f303 	mul.w	r3, r2, r3
 8003a92:	1acb      	subs	r3, r1, r3
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a9a:	4b36      	ldr	r3, [pc, #216]	; (8003b74 <UART_SetConfig+0x2d4>)
 8003a9c:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa0:	095b      	lsrs	r3, r3, #5
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003aa8:	441c      	add	r4, r3
 8003aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ab4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ab8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003abc:	4642      	mov	r2, r8
 8003abe:	464b      	mov	r3, r9
 8003ac0:	1891      	adds	r1, r2, r2
 8003ac2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ac4:	415b      	adcs	r3, r3
 8003ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ac8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003acc:	4641      	mov	r1, r8
 8003ace:	1851      	adds	r1, r2, r1
 8003ad0:	6339      	str	r1, [r7, #48]	; 0x30
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	414b      	adcs	r3, r1
 8003ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ae4:	4659      	mov	r1, fp
 8003ae6:	00cb      	lsls	r3, r1, #3
 8003ae8:	4651      	mov	r1, sl
 8003aea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aee:	4651      	mov	r1, sl
 8003af0:	00ca      	lsls	r2, r1, #3
 8003af2:	4610      	mov	r0, r2
 8003af4:	4619      	mov	r1, r3
 8003af6:	4603      	mov	r3, r0
 8003af8:	4642      	mov	r2, r8
 8003afa:	189b      	adds	r3, r3, r2
 8003afc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b00:	464b      	mov	r3, r9
 8003b02:	460a      	mov	r2, r1
 8003b04:	eb42 0303 	adc.w	r3, r2, r3
 8003b08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b20:	460b      	mov	r3, r1
 8003b22:	18db      	adds	r3, r3, r3
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b26:	4613      	mov	r3, r2
 8003b28:	eb42 0303 	adc.w	r3, r2, r3
 8003b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b36:	f7fc ff99 	bl	8000a6c <__aeabi_uldivmod>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4b0d      	ldr	r3, [pc, #52]	; (8003b74 <UART_SetConfig+0x2d4>)
 8003b40:	fba3 1302 	umull	r1, r3, r3, r2
 8003b44:	095b      	lsrs	r3, r3, #5
 8003b46:	2164      	movs	r1, #100	; 0x64
 8003b48:	fb01 f303 	mul.w	r3, r1, r3
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	3332      	adds	r3, #50	; 0x32
 8003b52:	4a08      	ldr	r2, [pc, #32]	; (8003b74 <UART_SetConfig+0x2d4>)
 8003b54:	fba2 2303 	umull	r2, r3, r2, r3
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	f003 0207 	and.w	r2, r3, #7
 8003b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4422      	add	r2, r4
 8003b66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b68:	e106      	b.n	8003d78 <UART_SetConfig+0x4d8>
 8003b6a:	bf00      	nop
 8003b6c:	40011000 	.word	0x40011000
 8003b70:	40011400 	.word	0x40011400
 8003b74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b8a:	4642      	mov	r2, r8
 8003b8c:	464b      	mov	r3, r9
 8003b8e:	1891      	adds	r1, r2, r2
 8003b90:	6239      	str	r1, [r7, #32]
 8003b92:	415b      	adcs	r3, r3
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
 8003b96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b9a:	4641      	mov	r1, r8
 8003b9c:	1854      	adds	r4, r2, r1
 8003b9e:	4649      	mov	r1, r9
 8003ba0:	eb43 0501 	adc.w	r5, r3, r1
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	00eb      	lsls	r3, r5, #3
 8003bae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bb2:	00e2      	lsls	r2, r4, #3
 8003bb4:	4614      	mov	r4, r2
 8003bb6:	461d      	mov	r5, r3
 8003bb8:	4643      	mov	r3, r8
 8003bba:	18e3      	adds	r3, r4, r3
 8003bbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bc0:	464b      	mov	r3, r9
 8003bc2:	eb45 0303 	adc.w	r3, r5, r3
 8003bc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003be6:	4629      	mov	r1, r5
 8003be8:	008b      	lsls	r3, r1, #2
 8003bea:	4621      	mov	r1, r4
 8003bec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	008a      	lsls	r2, r1, #2
 8003bf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003bf8:	f7fc ff38 	bl	8000a6c <__aeabi_uldivmod>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4b60      	ldr	r3, [pc, #384]	; (8003d84 <UART_SetConfig+0x4e4>)
 8003c02:	fba3 2302 	umull	r2, r3, r3, r2
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	011c      	lsls	r4, r3, #4
 8003c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c1c:	4642      	mov	r2, r8
 8003c1e:	464b      	mov	r3, r9
 8003c20:	1891      	adds	r1, r2, r2
 8003c22:	61b9      	str	r1, [r7, #24]
 8003c24:	415b      	adcs	r3, r3
 8003c26:	61fb      	str	r3, [r7, #28]
 8003c28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	1851      	adds	r1, r2, r1
 8003c30:	6139      	str	r1, [r7, #16]
 8003c32:	4649      	mov	r1, r9
 8003c34:	414b      	adcs	r3, r1
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c44:	4659      	mov	r1, fp
 8003c46:	00cb      	lsls	r3, r1, #3
 8003c48:	4651      	mov	r1, sl
 8003c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c4e:	4651      	mov	r1, sl
 8003c50:	00ca      	lsls	r2, r1, #3
 8003c52:	4610      	mov	r0, r2
 8003c54:	4619      	mov	r1, r3
 8003c56:	4603      	mov	r3, r0
 8003c58:	4642      	mov	r2, r8
 8003c5a:	189b      	adds	r3, r3, r2
 8003c5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c60:	464b      	mov	r3, r9
 8003c62:	460a      	mov	r2, r1
 8003c64:	eb42 0303 	adc.w	r3, r2, r3
 8003c68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c84:	4649      	mov	r1, r9
 8003c86:	008b      	lsls	r3, r1, #2
 8003c88:	4641      	mov	r1, r8
 8003c8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c8e:	4641      	mov	r1, r8
 8003c90:	008a      	lsls	r2, r1, #2
 8003c92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c96:	f7fc fee9 	bl	8000a6c <__aeabi_uldivmod>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	4b38      	ldr	r3, [pc, #224]	; (8003d84 <UART_SetConfig+0x4e4>)
 8003ca2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	2264      	movs	r2, #100	; 0x64
 8003caa:	fb02 f303 	mul.w	r3, r2, r3
 8003cae:	1acb      	subs	r3, r1, r3
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	3332      	adds	r3, #50	; 0x32
 8003cb4:	4a33      	ldr	r2, [pc, #204]	; (8003d84 <UART_SetConfig+0x4e4>)
 8003cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cc0:	441c      	add	r4, r3
 8003cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	673b      	str	r3, [r7, #112]	; 0x70
 8003cca:	677a      	str	r2, [r7, #116]	; 0x74
 8003ccc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cd0:	4642      	mov	r2, r8
 8003cd2:	464b      	mov	r3, r9
 8003cd4:	1891      	adds	r1, r2, r2
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	415b      	adcs	r3, r3
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ce0:	4641      	mov	r1, r8
 8003ce2:	1851      	adds	r1, r2, r1
 8003ce4:	6039      	str	r1, [r7, #0]
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	414b      	adcs	r3, r1
 8003cea:	607b      	str	r3, [r7, #4]
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cf8:	4659      	mov	r1, fp
 8003cfa:	00cb      	lsls	r3, r1, #3
 8003cfc:	4651      	mov	r1, sl
 8003cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d02:	4651      	mov	r1, sl
 8003d04:	00ca      	lsls	r2, r1, #3
 8003d06:	4610      	mov	r0, r2
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	4642      	mov	r2, r8
 8003d0e:	189b      	adds	r3, r3, r2
 8003d10:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d12:	464b      	mov	r3, r9
 8003d14:	460a      	mov	r2, r1
 8003d16:	eb42 0303 	adc.w	r3, r2, r3
 8003d1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	663b      	str	r3, [r7, #96]	; 0x60
 8003d26:	667a      	str	r2, [r7, #100]	; 0x64
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d34:	4649      	mov	r1, r9
 8003d36:	008b      	lsls	r3, r1, #2
 8003d38:	4641      	mov	r1, r8
 8003d3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d3e:	4641      	mov	r1, r8
 8003d40:	008a      	lsls	r2, r1, #2
 8003d42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d46:	f7fc fe91 	bl	8000a6c <__aeabi_uldivmod>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4b0d      	ldr	r3, [pc, #52]	; (8003d84 <UART_SetConfig+0x4e4>)
 8003d50:	fba3 1302 	umull	r1, r3, r3, r2
 8003d54:	095b      	lsrs	r3, r3, #5
 8003d56:	2164      	movs	r1, #100	; 0x64
 8003d58:	fb01 f303 	mul.w	r3, r1, r3
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	3332      	adds	r3, #50	; 0x32
 8003d62:	4a08      	ldr	r2, [pc, #32]	; (8003d84 <UART_SetConfig+0x4e4>)
 8003d64:	fba2 2303 	umull	r2, r3, r2, r3
 8003d68:	095b      	lsrs	r3, r3, #5
 8003d6a:	f003 020f 	and.w	r2, r3, #15
 8003d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4422      	add	r2, r4
 8003d76:	609a      	str	r2, [r3, #8]
}
 8003d78:	bf00      	nop
 8003d7a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d84:	51eb851f 	.word	0x51eb851f

08003d88 <std>:
 8003d88:	2300      	movs	r3, #0
 8003d8a:	b510      	push	{r4, lr}
 8003d8c:	4604      	mov	r4, r0
 8003d8e:	e9c0 3300 	strd	r3, r3, [r0]
 8003d92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d96:	6083      	str	r3, [r0, #8]
 8003d98:	8181      	strh	r1, [r0, #12]
 8003d9a:	6643      	str	r3, [r0, #100]	; 0x64
 8003d9c:	81c2      	strh	r2, [r0, #14]
 8003d9e:	6183      	str	r3, [r0, #24]
 8003da0:	4619      	mov	r1, r3
 8003da2:	2208      	movs	r2, #8
 8003da4:	305c      	adds	r0, #92	; 0x5c
 8003da6:	f000 f9f7 	bl	8004198 <memset>
 8003daa:	4b0d      	ldr	r3, [pc, #52]	; (8003de0 <std+0x58>)
 8003dac:	6263      	str	r3, [r4, #36]	; 0x24
 8003dae:	4b0d      	ldr	r3, [pc, #52]	; (8003de4 <std+0x5c>)
 8003db0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003db2:	4b0d      	ldr	r3, [pc, #52]	; (8003de8 <std+0x60>)
 8003db4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003db6:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <std+0x64>)
 8003db8:	6323      	str	r3, [r4, #48]	; 0x30
 8003dba:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <std+0x68>)
 8003dbc:	6224      	str	r4, [r4, #32]
 8003dbe:	429c      	cmp	r4, r3
 8003dc0:	d006      	beq.n	8003dd0 <std+0x48>
 8003dc2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003dc6:	4294      	cmp	r4, r2
 8003dc8:	d002      	beq.n	8003dd0 <std+0x48>
 8003dca:	33d0      	adds	r3, #208	; 0xd0
 8003dcc:	429c      	cmp	r4, r3
 8003dce:	d105      	bne.n	8003ddc <std+0x54>
 8003dd0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dd8:	f000 ba56 	b.w	8004288 <__retarget_lock_init_recursive>
 8003ddc:	bd10      	pop	{r4, pc}
 8003dde:	bf00      	nop
 8003de0:	08003fe9 	.word	0x08003fe9
 8003de4:	0800400b 	.word	0x0800400b
 8003de8:	08004043 	.word	0x08004043
 8003dec:	08004067 	.word	0x08004067
 8003df0:	20000218 	.word	0x20000218

08003df4 <stdio_exit_handler>:
 8003df4:	4a02      	ldr	r2, [pc, #8]	; (8003e00 <stdio_exit_handler+0xc>)
 8003df6:	4903      	ldr	r1, [pc, #12]	; (8003e04 <stdio_exit_handler+0x10>)
 8003df8:	4803      	ldr	r0, [pc, #12]	; (8003e08 <stdio_exit_handler+0x14>)
 8003dfa:	f000 b869 	b.w	8003ed0 <_fwalk_sglue>
 8003dfe:	bf00      	nop
 8003e00:	20000034 	.word	0x20000034
 8003e04:	08004b35 	.word	0x08004b35
 8003e08:	20000040 	.word	0x20000040

08003e0c <cleanup_stdio>:
 8003e0c:	6841      	ldr	r1, [r0, #4]
 8003e0e:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <cleanup_stdio+0x34>)
 8003e10:	4299      	cmp	r1, r3
 8003e12:	b510      	push	{r4, lr}
 8003e14:	4604      	mov	r4, r0
 8003e16:	d001      	beq.n	8003e1c <cleanup_stdio+0x10>
 8003e18:	f000 fe8c 	bl	8004b34 <_fflush_r>
 8003e1c:	68a1      	ldr	r1, [r4, #8]
 8003e1e:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <cleanup_stdio+0x38>)
 8003e20:	4299      	cmp	r1, r3
 8003e22:	d002      	beq.n	8003e2a <cleanup_stdio+0x1e>
 8003e24:	4620      	mov	r0, r4
 8003e26:	f000 fe85 	bl	8004b34 <_fflush_r>
 8003e2a:	68e1      	ldr	r1, [r4, #12]
 8003e2c:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <cleanup_stdio+0x3c>)
 8003e2e:	4299      	cmp	r1, r3
 8003e30:	d004      	beq.n	8003e3c <cleanup_stdio+0x30>
 8003e32:	4620      	mov	r0, r4
 8003e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e38:	f000 be7c 	b.w	8004b34 <_fflush_r>
 8003e3c:	bd10      	pop	{r4, pc}
 8003e3e:	bf00      	nop
 8003e40:	20000218 	.word	0x20000218
 8003e44:	20000280 	.word	0x20000280
 8003e48:	200002e8 	.word	0x200002e8

08003e4c <global_stdio_init.part.0>:
 8003e4c:	b510      	push	{r4, lr}
 8003e4e:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <global_stdio_init.part.0+0x30>)
 8003e50:	4c0b      	ldr	r4, [pc, #44]	; (8003e80 <global_stdio_init.part.0+0x34>)
 8003e52:	4a0c      	ldr	r2, [pc, #48]	; (8003e84 <global_stdio_init.part.0+0x38>)
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	4620      	mov	r0, r4
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2104      	movs	r1, #4
 8003e5c:	f7ff ff94 	bl	8003d88 <std>
 8003e60:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003e64:	2201      	movs	r2, #1
 8003e66:	2109      	movs	r1, #9
 8003e68:	f7ff ff8e 	bl	8003d88 <std>
 8003e6c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003e70:	2202      	movs	r2, #2
 8003e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e76:	2112      	movs	r1, #18
 8003e78:	f7ff bf86 	b.w	8003d88 <std>
 8003e7c:	20000350 	.word	0x20000350
 8003e80:	20000218 	.word	0x20000218
 8003e84:	08003df5 	.word	0x08003df5

08003e88 <__sfp_lock_acquire>:
 8003e88:	4801      	ldr	r0, [pc, #4]	; (8003e90 <__sfp_lock_acquire+0x8>)
 8003e8a:	f000 b9fe 	b.w	800428a <__retarget_lock_acquire_recursive>
 8003e8e:	bf00      	nop
 8003e90:	20000359 	.word	0x20000359

08003e94 <__sfp_lock_release>:
 8003e94:	4801      	ldr	r0, [pc, #4]	; (8003e9c <__sfp_lock_release+0x8>)
 8003e96:	f000 b9f9 	b.w	800428c <__retarget_lock_release_recursive>
 8003e9a:	bf00      	nop
 8003e9c:	20000359 	.word	0x20000359

08003ea0 <__sinit>:
 8003ea0:	b510      	push	{r4, lr}
 8003ea2:	4604      	mov	r4, r0
 8003ea4:	f7ff fff0 	bl	8003e88 <__sfp_lock_acquire>
 8003ea8:	6a23      	ldr	r3, [r4, #32]
 8003eaa:	b11b      	cbz	r3, 8003eb4 <__sinit+0x14>
 8003eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eb0:	f7ff bff0 	b.w	8003e94 <__sfp_lock_release>
 8003eb4:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <__sinit+0x28>)
 8003eb6:	6223      	str	r3, [r4, #32]
 8003eb8:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <__sinit+0x2c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1f5      	bne.n	8003eac <__sinit+0xc>
 8003ec0:	f7ff ffc4 	bl	8003e4c <global_stdio_init.part.0>
 8003ec4:	e7f2      	b.n	8003eac <__sinit+0xc>
 8003ec6:	bf00      	nop
 8003ec8:	08003e0d 	.word	0x08003e0d
 8003ecc:	20000350 	.word	0x20000350

08003ed0 <_fwalk_sglue>:
 8003ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ed4:	4607      	mov	r7, r0
 8003ed6:	4688      	mov	r8, r1
 8003ed8:	4614      	mov	r4, r2
 8003eda:	2600      	movs	r6, #0
 8003edc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ee0:	f1b9 0901 	subs.w	r9, r9, #1
 8003ee4:	d505      	bpl.n	8003ef2 <_fwalk_sglue+0x22>
 8003ee6:	6824      	ldr	r4, [r4, #0]
 8003ee8:	2c00      	cmp	r4, #0
 8003eea:	d1f7      	bne.n	8003edc <_fwalk_sglue+0xc>
 8003eec:	4630      	mov	r0, r6
 8003eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ef2:	89ab      	ldrh	r3, [r5, #12]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d907      	bls.n	8003f08 <_fwalk_sglue+0x38>
 8003ef8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003efc:	3301      	adds	r3, #1
 8003efe:	d003      	beq.n	8003f08 <_fwalk_sglue+0x38>
 8003f00:	4629      	mov	r1, r5
 8003f02:	4638      	mov	r0, r7
 8003f04:	47c0      	blx	r8
 8003f06:	4306      	orrs	r6, r0
 8003f08:	3568      	adds	r5, #104	; 0x68
 8003f0a:	e7e9      	b.n	8003ee0 <_fwalk_sglue+0x10>

08003f0c <iprintf>:
 8003f0c:	b40f      	push	{r0, r1, r2, r3}
 8003f0e:	b507      	push	{r0, r1, r2, lr}
 8003f10:	4906      	ldr	r1, [pc, #24]	; (8003f2c <iprintf+0x20>)
 8003f12:	ab04      	add	r3, sp, #16
 8003f14:	6808      	ldr	r0, [r1, #0]
 8003f16:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f1a:	6881      	ldr	r1, [r0, #8]
 8003f1c:	9301      	str	r3, [sp, #4]
 8003f1e:	f000 fad9 	bl	80044d4 <_vfiprintf_r>
 8003f22:	b003      	add	sp, #12
 8003f24:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f28:	b004      	add	sp, #16
 8003f2a:	4770      	bx	lr
 8003f2c:	2000008c 	.word	0x2000008c

08003f30 <_puts_r>:
 8003f30:	6a03      	ldr	r3, [r0, #32]
 8003f32:	b570      	push	{r4, r5, r6, lr}
 8003f34:	6884      	ldr	r4, [r0, #8]
 8003f36:	4605      	mov	r5, r0
 8003f38:	460e      	mov	r6, r1
 8003f3a:	b90b      	cbnz	r3, 8003f40 <_puts_r+0x10>
 8003f3c:	f7ff ffb0 	bl	8003ea0 <__sinit>
 8003f40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f42:	07db      	lsls	r3, r3, #31
 8003f44:	d405      	bmi.n	8003f52 <_puts_r+0x22>
 8003f46:	89a3      	ldrh	r3, [r4, #12]
 8003f48:	0598      	lsls	r0, r3, #22
 8003f4a:	d402      	bmi.n	8003f52 <_puts_r+0x22>
 8003f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f4e:	f000 f99c 	bl	800428a <__retarget_lock_acquire_recursive>
 8003f52:	89a3      	ldrh	r3, [r4, #12]
 8003f54:	0719      	lsls	r1, r3, #28
 8003f56:	d513      	bpl.n	8003f80 <_puts_r+0x50>
 8003f58:	6923      	ldr	r3, [r4, #16]
 8003f5a:	b18b      	cbz	r3, 8003f80 <_puts_r+0x50>
 8003f5c:	3e01      	subs	r6, #1
 8003f5e:	68a3      	ldr	r3, [r4, #8]
 8003f60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f64:	3b01      	subs	r3, #1
 8003f66:	60a3      	str	r3, [r4, #8]
 8003f68:	b9e9      	cbnz	r1, 8003fa6 <_puts_r+0x76>
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	da2e      	bge.n	8003fcc <_puts_r+0x9c>
 8003f6e:	4622      	mov	r2, r4
 8003f70:	210a      	movs	r1, #10
 8003f72:	4628      	mov	r0, r5
 8003f74:	f000 f87b 	bl	800406e <__swbuf_r>
 8003f78:	3001      	adds	r0, #1
 8003f7a:	d007      	beq.n	8003f8c <_puts_r+0x5c>
 8003f7c:	250a      	movs	r5, #10
 8003f7e:	e007      	b.n	8003f90 <_puts_r+0x60>
 8003f80:	4621      	mov	r1, r4
 8003f82:	4628      	mov	r0, r5
 8003f84:	f000 f8b0 	bl	80040e8 <__swsetup_r>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	d0e7      	beq.n	8003f5c <_puts_r+0x2c>
 8003f8c:	f04f 35ff 	mov.w	r5, #4294967295
 8003f90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f92:	07da      	lsls	r2, r3, #31
 8003f94:	d405      	bmi.n	8003fa2 <_puts_r+0x72>
 8003f96:	89a3      	ldrh	r3, [r4, #12]
 8003f98:	059b      	lsls	r3, r3, #22
 8003f9a:	d402      	bmi.n	8003fa2 <_puts_r+0x72>
 8003f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f9e:	f000 f975 	bl	800428c <__retarget_lock_release_recursive>
 8003fa2:	4628      	mov	r0, r5
 8003fa4:	bd70      	pop	{r4, r5, r6, pc}
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	da04      	bge.n	8003fb4 <_puts_r+0x84>
 8003faa:	69a2      	ldr	r2, [r4, #24]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	dc06      	bgt.n	8003fbe <_puts_r+0x8e>
 8003fb0:	290a      	cmp	r1, #10
 8003fb2:	d004      	beq.n	8003fbe <_puts_r+0x8e>
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	6022      	str	r2, [r4, #0]
 8003fba:	7019      	strb	r1, [r3, #0]
 8003fbc:	e7cf      	b.n	8003f5e <_puts_r+0x2e>
 8003fbe:	4622      	mov	r2, r4
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	f000 f854 	bl	800406e <__swbuf_r>
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	d1c9      	bne.n	8003f5e <_puts_r+0x2e>
 8003fca:	e7df      	b.n	8003f8c <_puts_r+0x5c>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	250a      	movs	r5, #10
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	6022      	str	r2, [r4, #0]
 8003fd4:	701d      	strb	r5, [r3, #0]
 8003fd6:	e7db      	b.n	8003f90 <_puts_r+0x60>

08003fd8 <puts>:
 8003fd8:	4b02      	ldr	r3, [pc, #8]	; (8003fe4 <puts+0xc>)
 8003fda:	4601      	mov	r1, r0
 8003fdc:	6818      	ldr	r0, [r3, #0]
 8003fde:	f7ff bfa7 	b.w	8003f30 <_puts_r>
 8003fe2:	bf00      	nop
 8003fe4:	2000008c 	.word	0x2000008c

08003fe8 <__sread>:
 8003fe8:	b510      	push	{r4, lr}
 8003fea:	460c      	mov	r4, r1
 8003fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ff0:	f000 f8fc 	bl	80041ec <_read_r>
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	bfab      	itete	ge
 8003ff8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ffa:	89a3      	ldrhlt	r3, [r4, #12]
 8003ffc:	181b      	addge	r3, r3, r0
 8003ffe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004002:	bfac      	ite	ge
 8004004:	6563      	strge	r3, [r4, #84]	; 0x54
 8004006:	81a3      	strhlt	r3, [r4, #12]
 8004008:	bd10      	pop	{r4, pc}

0800400a <__swrite>:
 800400a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800400e:	461f      	mov	r7, r3
 8004010:	898b      	ldrh	r3, [r1, #12]
 8004012:	05db      	lsls	r3, r3, #23
 8004014:	4605      	mov	r5, r0
 8004016:	460c      	mov	r4, r1
 8004018:	4616      	mov	r6, r2
 800401a:	d505      	bpl.n	8004028 <__swrite+0x1e>
 800401c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004020:	2302      	movs	r3, #2
 8004022:	2200      	movs	r2, #0
 8004024:	f000 f8d0 	bl	80041c8 <_lseek_r>
 8004028:	89a3      	ldrh	r3, [r4, #12]
 800402a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800402e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004032:	81a3      	strh	r3, [r4, #12]
 8004034:	4632      	mov	r2, r6
 8004036:	463b      	mov	r3, r7
 8004038:	4628      	mov	r0, r5
 800403a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800403e:	f000 b8e7 	b.w	8004210 <_write_r>

08004042 <__sseek>:
 8004042:	b510      	push	{r4, lr}
 8004044:	460c      	mov	r4, r1
 8004046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800404a:	f000 f8bd 	bl	80041c8 <_lseek_r>
 800404e:	1c43      	adds	r3, r0, #1
 8004050:	89a3      	ldrh	r3, [r4, #12]
 8004052:	bf15      	itete	ne
 8004054:	6560      	strne	r0, [r4, #84]	; 0x54
 8004056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800405a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800405e:	81a3      	strheq	r3, [r4, #12]
 8004060:	bf18      	it	ne
 8004062:	81a3      	strhne	r3, [r4, #12]
 8004064:	bd10      	pop	{r4, pc}

08004066 <__sclose>:
 8004066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800406a:	f000 b89d 	b.w	80041a8 <_close_r>

0800406e <__swbuf_r>:
 800406e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004070:	460e      	mov	r6, r1
 8004072:	4614      	mov	r4, r2
 8004074:	4605      	mov	r5, r0
 8004076:	b118      	cbz	r0, 8004080 <__swbuf_r+0x12>
 8004078:	6a03      	ldr	r3, [r0, #32]
 800407a:	b90b      	cbnz	r3, 8004080 <__swbuf_r+0x12>
 800407c:	f7ff ff10 	bl	8003ea0 <__sinit>
 8004080:	69a3      	ldr	r3, [r4, #24]
 8004082:	60a3      	str	r3, [r4, #8]
 8004084:	89a3      	ldrh	r3, [r4, #12]
 8004086:	071a      	lsls	r2, r3, #28
 8004088:	d525      	bpl.n	80040d6 <__swbuf_r+0x68>
 800408a:	6923      	ldr	r3, [r4, #16]
 800408c:	b31b      	cbz	r3, 80040d6 <__swbuf_r+0x68>
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	6922      	ldr	r2, [r4, #16]
 8004092:	1a98      	subs	r0, r3, r2
 8004094:	6963      	ldr	r3, [r4, #20]
 8004096:	b2f6      	uxtb	r6, r6
 8004098:	4283      	cmp	r3, r0
 800409a:	4637      	mov	r7, r6
 800409c:	dc04      	bgt.n	80040a8 <__swbuf_r+0x3a>
 800409e:	4621      	mov	r1, r4
 80040a0:	4628      	mov	r0, r5
 80040a2:	f000 fd47 	bl	8004b34 <_fflush_r>
 80040a6:	b9e0      	cbnz	r0, 80040e2 <__swbuf_r+0x74>
 80040a8:	68a3      	ldr	r3, [r4, #8]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	60a3      	str	r3, [r4, #8]
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	6022      	str	r2, [r4, #0]
 80040b4:	701e      	strb	r6, [r3, #0]
 80040b6:	6962      	ldr	r2, [r4, #20]
 80040b8:	1c43      	adds	r3, r0, #1
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d004      	beq.n	80040c8 <__swbuf_r+0x5a>
 80040be:	89a3      	ldrh	r3, [r4, #12]
 80040c0:	07db      	lsls	r3, r3, #31
 80040c2:	d506      	bpl.n	80040d2 <__swbuf_r+0x64>
 80040c4:	2e0a      	cmp	r6, #10
 80040c6:	d104      	bne.n	80040d2 <__swbuf_r+0x64>
 80040c8:	4621      	mov	r1, r4
 80040ca:	4628      	mov	r0, r5
 80040cc:	f000 fd32 	bl	8004b34 <_fflush_r>
 80040d0:	b938      	cbnz	r0, 80040e2 <__swbuf_r+0x74>
 80040d2:	4638      	mov	r0, r7
 80040d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040d6:	4621      	mov	r1, r4
 80040d8:	4628      	mov	r0, r5
 80040da:	f000 f805 	bl	80040e8 <__swsetup_r>
 80040de:	2800      	cmp	r0, #0
 80040e0:	d0d5      	beq.n	800408e <__swbuf_r+0x20>
 80040e2:	f04f 37ff 	mov.w	r7, #4294967295
 80040e6:	e7f4      	b.n	80040d2 <__swbuf_r+0x64>

080040e8 <__swsetup_r>:
 80040e8:	b538      	push	{r3, r4, r5, lr}
 80040ea:	4b2a      	ldr	r3, [pc, #168]	; (8004194 <__swsetup_r+0xac>)
 80040ec:	4605      	mov	r5, r0
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	460c      	mov	r4, r1
 80040f2:	b118      	cbz	r0, 80040fc <__swsetup_r+0x14>
 80040f4:	6a03      	ldr	r3, [r0, #32]
 80040f6:	b90b      	cbnz	r3, 80040fc <__swsetup_r+0x14>
 80040f8:	f7ff fed2 	bl	8003ea0 <__sinit>
 80040fc:	89a3      	ldrh	r3, [r4, #12]
 80040fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004102:	0718      	lsls	r0, r3, #28
 8004104:	d422      	bmi.n	800414c <__swsetup_r+0x64>
 8004106:	06d9      	lsls	r1, r3, #27
 8004108:	d407      	bmi.n	800411a <__swsetup_r+0x32>
 800410a:	2309      	movs	r3, #9
 800410c:	602b      	str	r3, [r5, #0]
 800410e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004112:	81a3      	strh	r3, [r4, #12]
 8004114:	f04f 30ff 	mov.w	r0, #4294967295
 8004118:	e034      	b.n	8004184 <__swsetup_r+0x9c>
 800411a:	0758      	lsls	r0, r3, #29
 800411c:	d512      	bpl.n	8004144 <__swsetup_r+0x5c>
 800411e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004120:	b141      	cbz	r1, 8004134 <__swsetup_r+0x4c>
 8004122:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004126:	4299      	cmp	r1, r3
 8004128:	d002      	beq.n	8004130 <__swsetup_r+0x48>
 800412a:	4628      	mov	r0, r5
 800412c:	f000 f8b0 	bl	8004290 <_free_r>
 8004130:	2300      	movs	r3, #0
 8004132:	6363      	str	r3, [r4, #52]	; 0x34
 8004134:	89a3      	ldrh	r3, [r4, #12]
 8004136:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800413a:	81a3      	strh	r3, [r4, #12]
 800413c:	2300      	movs	r3, #0
 800413e:	6063      	str	r3, [r4, #4]
 8004140:	6923      	ldr	r3, [r4, #16]
 8004142:	6023      	str	r3, [r4, #0]
 8004144:	89a3      	ldrh	r3, [r4, #12]
 8004146:	f043 0308 	orr.w	r3, r3, #8
 800414a:	81a3      	strh	r3, [r4, #12]
 800414c:	6923      	ldr	r3, [r4, #16]
 800414e:	b94b      	cbnz	r3, 8004164 <__swsetup_r+0x7c>
 8004150:	89a3      	ldrh	r3, [r4, #12]
 8004152:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800415a:	d003      	beq.n	8004164 <__swsetup_r+0x7c>
 800415c:	4621      	mov	r1, r4
 800415e:	4628      	mov	r0, r5
 8004160:	f000 fd36 	bl	8004bd0 <__smakebuf_r>
 8004164:	89a0      	ldrh	r0, [r4, #12]
 8004166:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800416a:	f010 0301 	ands.w	r3, r0, #1
 800416e:	d00a      	beq.n	8004186 <__swsetup_r+0x9e>
 8004170:	2300      	movs	r3, #0
 8004172:	60a3      	str	r3, [r4, #8]
 8004174:	6963      	ldr	r3, [r4, #20]
 8004176:	425b      	negs	r3, r3
 8004178:	61a3      	str	r3, [r4, #24]
 800417a:	6923      	ldr	r3, [r4, #16]
 800417c:	b943      	cbnz	r3, 8004190 <__swsetup_r+0xa8>
 800417e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004182:	d1c4      	bne.n	800410e <__swsetup_r+0x26>
 8004184:	bd38      	pop	{r3, r4, r5, pc}
 8004186:	0781      	lsls	r1, r0, #30
 8004188:	bf58      	it	pl
 800418a:	6963      	ldrpl	r3, [r4, #20]
 800418c:	60a3      	str	r3, [r4, #8]
 800418e:	e7f4      	b.n	800417a <__swsetup_r+0x92>
 8004190:	2000      	movs	r0, #0
 8004192:	e7f7      	b.n	8004184 <__swsetup_r+0x9c>
 8004194:	2000008c 	.word	0x2000008c

08004198 <memset>:
 8004198:	4402      	add	r2, r0
 800419a:	4603      	mov	r3, r0
 800419c:	4293      	cmp	r3, r2
 800419e:	d100      	bne.n	80041a2 <memset+0xa>
 80041a0:	4770      	bx	lr
 80041a2:	f803 1b01 	strb.w	r1, [r3], #1
 80041a6:	e7f9      	b.n	800419c <memset+0x4>

080041a8 <_close_r>:
 80041a8:	b538      	push	{r3, r4, r5, lr}
 80041aa:	4d06      	ldr	r5, [pc, #24]	; (80041c4 <_close_r+0x1c>)
 80041ac:	2300      	movs	r3, #0
 80041ae:	4604      	mov	r4, r0
 80041b0:	4608      	mov	r0, r1
 80041b2:	602b      	str	r3, [r5, #0]
 80041b4:	f7fd f911 	bl	80013da <_close>
 80041b8:	1c43      	adds	r3, r0, #1
 80041ba:	d102      	bne.n	80041c2 <_close_r+0x1a>
 80041bc:	682b      	ldr	r3, [r5, #0]
 80041be:	b103      	cbz	r3, 80041c2 <_close_r+0x1a>
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	bd38      	pop	{r3, r4, r5, pc}
 80041c4:	20000354 	.word	0x20000354

080041c8 <_lseek_r>:
 80041c8:	b538      	push	{r3, r4, r5, lr}
 80041ca:	4d07      	ldr	r5, [pc, #28]	; (80041e8 <_lseek_r+0x20>)
 80041cc:	4604      	mov	r4, r0
 80041ce:	4608      	mov	r0, r1
 80041d0:	4611      	mov	r1, r2
 80041d2:	2200      	movs	r2, #0
 80041d4:	602a      	str	r2, [r5, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	f7fd f926 	bl	8001428 <_lseek>
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	d102      	bne.n	80041e6 <_lseek_r+0x1e>
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	b103      	cbz	r3, 80041e6 <_lseek_r+0x1e>
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	bd38      	pop	{r3, r4, r5, pc}
 80041e8:	20000354 	.word	0x20000354

080041ec <_read_r>:
 80041ec:	b538      	push	{r3, r4, r5, lr}
 80041ee:	4d07      	ldr	r5, [pc, #28]	; (800420c <_read_r+0x20>)
 80041f0:	4604      	mov	r4, r0
 80041f2:	4608      	mov	r0, r1
 80041f4:	4611      	mov	r1, r2
 80041f6:	2200      	movs	r2, #0
 80041f8:	602a      	str	r2, [r5, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	f7fd f8d0 	bl	80013a0 <_read>
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	d102      	bne.n	800420a <_read_r+0x1e>
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	b103      	cbz	r3, 800420a <_read_r+0x1e>
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	bd38      	pop	{r3, r4, r5, pc}
 800420c:	20000354 	.word	0x20000354

08004210 <_write_r>:
 8004210:	b538      	push	{r3, r4, r5, lr}
 8004212:	4d07      	ldr	r5, [pc, #28]	; (8004230 <_write_r+0x20>)
 8004214:	4604      	mov	r4, r0
 8004216:	4608      	mov	r0, r1
 8004218:	4611      	mov	r1, r2
 800421a:	2200      	movs	r2, #0
 800421c:	602a      	str	r2, [r5, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	f7fd f968 	bl	80014f4 <_write>
 8004224:	1c43      	adds	r3, r0, #1
 8004226:	d102      	bne.n	800422e <_write_r+0x1e>
 8004228:	682b      	ldr	r3, [r5, #0]
 800422a:	b103      	cbz	r3, 800422e <_write_r+0x1e>
 800422c:	6023      	str	r3, [r4, #0]
 800422e:	bd38      	pop	{r3, r4, r5, pc}
 8004230:	20000354 	.word	0x20000354

08004234 <__errno>:
 8004234:	4b01      	ldr	r3, [pc, #4]	; (800423c <__errno+0x8>)
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	2000008c 	.word	0x2000008c

08004240 <__libc_init_array>:
 8004240:	b570      	push	{r4, r5, r6, lr}
 8004242:	4d0d      	ldr	r5, [pc, #52]	; (8004278 <__libc_init_array+0x38>)
 8004244:	4c0d      	ldr	r4, [pc, #52]	; (800427c <__libc_init_array+0x3c>)
 8004246:	1b64      	subs	r4, r4, r5
 8004248:	10a4      	asrs	r4, r4, #2
 800424a:	2600      	movs	r6, #0
 800424c:	42a6      	cmp	r6, r4
 800424e:	d109      	bne.n	8004264 <__libc_init_array+0x24>
 8004250:	4d0b      	ldr	r5, [pc, #44]	; (8004280 <__libc_init_array+0x40>)
 8004252:	4c0c      	ldr	r4, [pc, #48]	; (8004284 <__libc_init_array+0x44>)
 8004254:	f000 fd2a 	bl	8004cac <_init>
 8004258:	1b64      	subs	r4, r4, r5
 800425a:	10a4      	asrs	r4, r4, #2
 800425c:	2600      	movs	r6, #0
 800425e:	42a6      	cmp	r6, r4
 8004260:	d105      	bne.n	800426e <__libc_init_array+0x2e>
 8004262:	bd70      	pop	{r4, r5, r6, pc}
 8004264:	f855 3b04 	ldr.w	r3, [r5], #4
 8004268:	4798      	blx	r3
 800426a:	3601      	adds	r6, #1
 800426c:	e7ee      	b.n	800424c <__libc_init_array+0xc>
 800426e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004272:	4798      	blx	r3
 8004274:	3601      	adds	r6, #1
 8004276:	e7f2      	b.n	800425e <__libc_init_array+0x1e>
 8004278:	08004d4c 	.word	0x08004d4c
 800427c:	08004d4c 	.word	0x08004d4c
 8004280:	08004d4c 	.word	0x08004d4c
 8004284:	08004d50 	.word	0x08004d50

08004288 <__retarget_lock_init_recursive>:
 8004288:	4770      	bx	lr

0800428a <__retarget_lock_acquire_recursive>:
 800428a:	4770      	bx	lr

0800428c <__retarget_lock_release_recursive>:
 800428c:	4770      	bx	lr
	...

08004290 <_free_r>:
 8004290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004292:	2900      	cmp	r1, #0
 8004294:	d044      	beq.n	8004320 <_free_r+0x90>
 8004296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800429a:	9001      	str	r0, [sp, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	f1a1 0404 	sub.w	r4, r1, #4
 80042a2:	bfb8      	it	lt
 80042a4:	18e4      	addlt	r4, r4, r3
 80042a6:	f000 f8df 	bl	8004468 <__malloc_lock>
 80042aa:	4a1e      	ldr	r2, [pc, #120]	; (8004324 <_free_r+0x94>)
 80042ac:	9801      	ldr	r0, [sp, #4]
 80042ae:	6813      	ldr	r3, [r2, #0]
 80042b0:	b933      	cbnz	r3, 80042c0 <_free_r+0x30>
 80042b2:	6063      	str	r3, [r4, #4]
 80042b4:	6014      	str	r4, [r2, #0]
 80042b6:	b003      	add	sp, #12
 80042b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042bc:	f000 b8da 	b.w	8004474 <__malloc_unlock>
 80042c0:	42a3      	cmp	r3, r4
 80042c2:	d908      	bls.n	80042d6 <_free_r+0x46>
 80042c4:	6825      	ldr	r5, [r4, #0]
 80042c6:	1961      	adds	r1, r4, r5
 80042c8:	428b      	cmp	r3, r1
 80042ca:	bf01      	itttt	eq
 80042cc:	6819      	ldreq	r1, [r3, #0]
 80042ce:	685b      	ldreq	r3, [r3, #4]
 80042d0:	1949      	addeq	r1, r1, r5
 80042d2:	6021      	streq	r1, [r4, #0]
 80042d4:	e7ed      	b.n	80042b2 <_free_r+0x22>
 80042d6:	461a      	mov	r2, r3
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	b10b      	cbz	r3, 80042e0 <_free_r+0x50>
 80042dc:	42a3      	cmp	r3, r4
 80042de:	d9fa      	bls.n	80042d6 <_free_r+0x46>
 80042e0:	6811      	ldr	r1, [r2, #0]
 80042e2:	1855      	adds	r5, r2, r1
 80042e4:	42a5      	cmp	r5, r4
 80042e6:	d10b      	bne.n	8004300 <_free_r+0x70>
 80042e8:	6824      	ldr	r4, [r4, #0]
 80042ea:	4421      	add	r1, r4
 80042ec:	1854      	adds	r4, r2, r1
 80042ee:	42a3      	cmp	r3, r4
 80042f0:	6011      	str	r1, [r2, #0]
 80042f2:	d1e0      	bne.n	80042b6 <_free_r+0x26>
 80042f4:	681c      	ldr	r4, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	6053      	str	r3, [r2, #4]
 80042fa:	440c      	add	r4, r1
 80042fc:	6014      	str	r4, [r2, #0]
 80042fe:	e7da      	b.n	80042b6 <_free_r+0x26>
 8004300:	d902      	bls.n	8004308 <_free_r+0x78>
 8004302:	230c      	movs	r3, #12
 8004304:	6003      	str	r3, [r0, #0]
 8004306:	e7d6      	b.n	80042b6 <_free_r+0x26>
 8004308:	6825      	ldr	r5, [r4, #0]
 800430a:	1961      	adds	r1, r4, r5
 800430c:	428b      	cmp	r3, r1
 800430e:	bf04      	itt	eq
 8004310:	6819      	ldreq	r1, [r3, #0]
 8004312:	685b      	ldreq	r3, [r3, #4]
 8004314:	6063      	str	r3, [r4, #4]
 8004316:	bf04      	itt	eq
 8004318:	1949      	addeq	r1, r1, r5
 800431a:	6021      	streq	r1, [r4, #0]
 800431c:	6054      	str	r4, [r2, #4]
 800431e:	e7ca      	b.n	80042b6 <_free_r+0x26>
 8004320:	b003      	add	sp, #12
 8004322:	bd30      	pop	{r4, r5, pc}
 8004324:	2000035c 	.word	0x2000035c

08004328 <sbrk_aligned>:
 8004328:	b570      	push	{r4, r5, r6, lr}
 800432a:	4e0e      	ldr	r6, [pc, #56]	; (8004364 <sbrk_aligned+0x3c>)
 800432c:	460c      	mov	r4, r1
 800432e:	6831      	ldr	r1, [r6, #0]
 8004330:	4605      	mov	r5, r0
 8004332:	b911      	cbnz	r1, 800433a <sbrk_aligned+0x12>
 8004334:	f000 fcaa 	bl	8004c8c <_sbrk_r>
 8004338:	6030      	str	r0, [r6, #0]
 800433a:	4621      	mov	r1, r4
 800433c:	4628      	mov	r0, r5
 800433e:	f000 fca5 	bl	8004c8c <_sbrk_r>
 8004342:	1c43      	adds	r3, r0, #1
 8004344:	d00a      	beq.n	800435c <sbrk_aligned+0x34>
 8004346:	1cc4      	adds	r4, r0, #3
 8004348:	f024 0403 	bic.w	r4, r4, #3
 800434c:	42a0      	cmp	r0, r4
 800434e:	d007      	beq.n	8004360 <sbrk_aligned+0x38>
 8004350:	1a21      	subs	r1, r4, r0
 8004352:	4628      	mov	r0, r5
 8004354:	f000 fc9a 	bl	8004c8c <_sbrk_r>
 8004358:	3001      	adds	r0, #1
 800435a:	d101      	bne.n	8004360 <sbrk_aligned+0x38>
 800435c:	f04f 34ff 	mov.w	r4, #4294967295
 8004360:	4620      	mov	r0, r4
 8004362:	bd70      	pop	{r4, r5, r6, pc}
 8004364:	20000360 	.word	0x20000360

08004368 <_malloc_r>:
 8004368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800436c:	1ccd      	adds	r5, r1, #3
 800436e:	f025 0503 	bic.w	r5, r5, #3
 8004372:	3508      	adds	r5, #8
 8004374:	2d0c      	cmp	r5, #12
 8004376:	bf38      	it	cc
 8004378:	250c      	movcc	r5, #12
 800437a:	2d00      	cmp	r5, #0
 800437c:	4607      	mov	r7, r0
 800437e:	db01      	blt.n	8004384 <_malloc_r+0x1c>
 8004380:	42a9      	cmp	r1, r5
 8004382:	d905      	bls.n	8004390 <_malloc_r+0x28>
 8004384:	230c      	movs	r3, #12
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	2600      	movs	r6, #0
 800438a:	4630      	mov	r0, r6
 800438c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004390:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004464 <_malloc_r+0xfc>
 8004394:	f000 f868 	bl	8004468 <__malloc_lock>
 8004398:	f8d8 3000 	ldr.w	r3, [r8]
 800439c:	461c      	mov	r4, r3
 800439e:	bb5c      	cbnz	r4, 80043f8 <_malloc_r+0x90>
 80043a0:	4629      	mov	r1, r5
 80043a2:	4638      	mov	r0, r7
 80043a4:	f7ff ffc0 	bl	8004328 <sbrk_aligned>
 80043a8:	1c43      	adds	r3, r0, #1
 80043aa:	4604      	mov	r4, r0
 80043ac:	d155      	bne.n	800445a <_malloc_r+0xf2>
 80043ae:	f8d8 4000 	ldr.w	r4, [r8]
 80043b2:	4626      	mov	r6, r4
 80043b4:	2e00      	cmp	r6, #0
 80043b6:	d145      	bne.n	8004444 <_malloc_r+0xdc>
 80043b8:	2c00      	cmp	r4, #0
 80043ba:	d048      	beq.n	800444e <_malloc_r+0xe6>
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	4631      	mov	r1, r6
 80043c0:	4638      	mov	r0, r7
 80043c2:	eb04 0903 	add.w	r9, r4, r3
 80043c6:	f000 fc61 	bl	8004c8c <_sbrk_r>
 80043ca:	4581      	cmp	r9, r0
 80043cc:	d13f      	bne.n	800444e <_malloc_r+0xe6>
 80043ce:	6821      	ldr	r1, [r4, #0]
 80043d0:	1a6d      	subs	r5, r5, r1
 80043d2:	4629      	mov	r1, r5
 80043d4:	4638      	mov	r0, r7
 80043d6:	f7ff ffa7 	bl	8004328 <sbrk_aligned>
 80043da:	3001      	adds	r0, #1
 80043dc:	d037      	beq.n	800444e <_malloc_r+0xe6>
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	442b      	add	r3, r5
 80043e2:	6023      	str	r3, [r4, #0]
 80043e4:	f8d8 3000 	ldr.w	r3, [r8]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d038      	beq.n	800445e <_malloc_r+0xf6>
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	42a2      	cmp	r2, r4
 80043f0:	d12b      	bne.n	800444a <_malloc_r+0xe2>
 80043f2:	2200      	movs	r2, #0
 80043f4:	605a      	str	r2, [r3, #4]
 80043f6:	e00f      	b.n	8004418 <_malloc_r+0xb0>
 80043f8:	6822      	ldr	r2, [r4, #0]
 80043fa:	1b52      	subs	r2, r2, r5
 80043fc:	d41f      	bmi.n	800443e <_malloc_r+0xd6>
 80043fe:	2a0b      	cmp	r2, #11
 8004400:	d917      	bls.n	8004432 <_malloc_r+0xca>
 8004402:	1961      	adds	r1, r4, r5
 8004404:	42a3      	cmp	r3, r4
 8004406:	6025      	str	r5, [r4, #0]
 8004408:	bf18      	it	ne
 800440a:	6059      	strne	r1, [r3, #4]
 800440c:	6863      	ldr	r3, [r4, #4]
 800440e:	bf08      	it	eq
 8004410:	f8c8 1000 	streq.w	r1, [r8]
 8004414:	5162      	str	r2, [r4, r5]
 8004416:	604b      	str	r3, [r1, #4]
 8004418:	4638      	mov	r0, r7
 800441a:	f104 060b 	add.w	r6, r4, #11
 800441e:	f000 f829 	bl	8004474 <__malloc_unlock>
 8004422:	f026 0607 	bic.w	r6, r6, #7
 8004426:	1d23      	adds	r3, r4, #4
 8004428:	1af2      	subs	r2, r6, r3
 800442a:	d0ae      	beq.n	800438a <_malloc_r+0x22>
 800442c:	1b9b      	subs	r3, r3, r6
 800442e:	50a3      	str	r3, [r4, r2]
 8004430:	e7ab      	b.n	800438a <_malloc_r+0x22>
 8004432:	42a3      	cmp	r3, r4
 8004434:	6862      	ldr	r2, [r4, #4]
 8004436:	d1dd      	bne.n	80043f4 <_malloc_r+0x8c>
 8004438:	f8c8 2000 	str.w	r2, [r8]
 800443c:	e7ec      	b.n	8004418 <_malloc_r+0xb0>
 800443e:	4623      	mov	r3, r4
 8004440:	6864      	ldr	r4, [r4, #4]
 8004442:	e7ac      	b.n	800439e <_malloc_r+0x36>
 8004444:	4634      	mov	r4, r6
 8004446:	6876      	ldr	r6, [r6, #4]
 8004448:	e7b4      	b.n	80043b4 <_malloc_r+0x4c>
 800444a:	4613      	mov	r3, r2
 800444c:	e7cc      	b.n	80043e8 <_malloc_r+0x80>
 800444e:	230c      	movs	r3, #12
 8004450:	603b      	str	r3, [r7, #0]
 8004452:	4638      	mov	r0, r7
 8004454:	f000 f80e 	bl	8004474 <__malloc_unlock>
 8004458:	e797      	b.n	800438a <_malloc_r+0x22>
 800445a:	6025      	str	r5, [r4, #0]
 800445c:	e7dc      	b.n	8004418 <_malloc_r+0xb0>
 800445e:	605b      	str	r3, [r3, #4]
 8004460:	deff      	udf	#255	; 0xff
 8004462:	bf00      	nop
 8004464:	2000035c 	.word	0x2000035c

08004468 <__malloc_lock>:
 8004468:	4801      	ldr	r0, [pc, #4]	; (8004470 <__malloc_lock+0x8>)
 800446a:	f7ff bf0e 	b.w	800428a <__retarget_lock_acquire_recursive>
 800446e:	bf00      	nop
 8004470:	20000358 	.word	0x20000358

08004474 <__malloc_unlock>:
 8004474:	4801      	ldr	r0, [pc, #4]	; (800447c <__malloc_unlock+0x8>)
 8004476:	f7ff bf09 	b.w	800428c <__retarget_lock_release_recursive>
 800447a:	bf00      	nop
 800447c:	20000358 	.word	0x20000358

08004480 <__sfputc_r>:
 8004480:	6893      	ldr	r3, [r2, #8]
 8004482:	3b01      	subs	r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	b410      	push	{r4}
 8004488:	6093      	str	r3, [r2, #8]
 800448a:	da08      	bge.n	800449e <__sfputc_r+0x1e>
 800448c:	6994      	ldr	r4, [r2, #24]
 800448e:	42a3      	cmp	r3, r4
 8004490:	db01      	blt.n	8004496 <__sfputc_r+0x16>
 8004492:	290a      	cmp	r1, #10
 8004494:	d103      	bne.n	800449e <__sfputc_r+0x1e>
 8004496:	f85d 4b04 	ldr.w	r4, [sp], #4
 800449a:	f7ff bde8 	b.w	800406e <__swbuf_r>
 800449e:	6813      	ldr	r3, [r2, #0]
 80044a0:	1c58      	adds	r0, r3, #1
 80044a2:	6010      	str	r0, [r2, #0]
 80044a4:	7019      	strb	r1, [r3, #0]
 80044a6:	4608      	mov	r0, r1
 80044a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <__sfputs_r>:
 80044ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b0:	4606      	mov	r6, r0
 80044b2:	460f      	mov	r7, r1
 80044b4:	4614      	mov	r4, r2
 80044b6:	18d5      	adds	r5, r2, r3
 80044b8:	42ac      	cmp	r4, r5
 80044ba:	d101      	bne.n	80044c0 <__sfputs_r+0x12>
 80044bc:	2000      	movs	r0, #0
 80044be:	e007      	b.n	80044d0 <__sfputs_r+0x22>
 80044c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044c4:	463a      	mov	r2, r7
 80044c6:	4630      	mov	r0, r6
 80044c8:	f7ff ffda 	bl	8004480 <__sfputc_r>
 80044cc:	1c43      	adds	r3, r0, #1
 80044ce:	d1f3      	bne.n	80044b8 <__sfputs_r+0xa>
 80044d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044d4 <_vfiprintf_r>:
 80044d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d8:	460d      	mov	r5, r1
 80044da:	b09d      	sub	sp, #116	; 0x74
 80044dc:	4614      	mov	r4, r2
 80044de:	4698      	mov	r8, r3
 80044e0:	4606      	mov	r6, r0
 80044e2:	b118      	cbz	r0, 80044ec <_vfiprintf_r+0x18>
 80044e4:	6a03      	ldr	r3, [r0, #32]
 80044e6:	b90b      	cbnz	r3, 80044ec <_vfiprintf_r+0x18>
 80044e8:	f7ff fcda 	bl	8003ea0 <__sinit>
 80044ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044ee:	07d9      	lsls	r1, r3, #31
 80044f0:	d405      	bmi.n	80044fe <_vfiprintf_r+0x2a>
 80044f2:	89ab      	ldrh	r3, [r5, #12]
 80044f4:	059a      	lsls	r2, r3, #22
 80044f6:	d402      	bmi.n	80044fe <_vfiprintf_r+0x2a>
 80044f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044fa:	f7ff fec6 	bl	800428a <__retarget_lock_acquire_recursive>
 80044fe:	89ab      	ldrh	r3, [r5, #12]
 8004500:	071b      	lsls	r3, r3, #28
 8004502:	d501      	bpl.n	8004508 <_vfiprintf_r+0x34>
 8004504:	692b      	ldr	r3, [r5, #16]
 8004506:	b99b      	cbnz	r3, 8004530 <_vfiprintf_r+0x5c>
 8004508:	4629      	mov	r1, r5
 800450a:	4630      	mov	r0, r6
 800450c:	f7ff fdec 	bl	80040e8 <__swsetup_r>
 8004510:	b170      	cbz	r0, 8004530 <_vfiprintf_r+0x5c>
 8004512:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004514:	07dc      	lsls	r4, r3, #31
 8004516:	d504      	bpl.n	8004522 <_vfiprintf_r+0x4e>
 8004518:	f04f 30ff 	mov.w	r0, #4294967295
 800451c:	b01d      	add	sp, #116	; 0x74
 800451e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004522:	89ab      	ldrh	r3, [r5, #12]
 8004524:	0598      	lsls	r0, r3, #22
 8004526:	d4f7      	bmi.n	8004518 <_vfiprintf_r+0x44>
 8004528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800452a:	f7ff feaf 	bl	800428c <__retarget_lock_release_recursive>
 800452e:	e7f3      	b.n	8004518 <_vfiprintf_r+0x44>
 8004530:	2300      	movs	r3, #0
 8004532:	9309      	str	r3, [sp, #36]	; 0x24
 8004534:	2320      	movs	r3, #32
 8004536:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800453a:	f8cd 800c 	str.w	r8, [sp, #12]
 800453e:	2330      	movs	r3, #48	; 0x30
 8004540:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80046f4 <_vfiprintf_r+0x220>
 8004544:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004548:	f04f 0901 	mov.w	r9, #1
 800454c:	4623      	mov	r3, r4
 800454e:	469a      	mov	sl, r3
 8004550:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004554:	b10a      	cbz	r2, 800455a <_vfiprintf_r+0x86>
 8004556:	2a25      	cmp	r2, #37	; 0x25
 8004558:	d1f9      	bne.n	800454e <_vfiprintf_r+0x7a>
 800455a:	ebba 0b04 	subs.w	fp, sl, r4
 800455e:	d00b      	beq.n	8004578 <_vfiprintf_r+0xa4>
 8004560:	465b      	mov	r3, fp
 8004562:	4622      	mov	r2, r4
 8004564:	4629      	mov	r1, r5
 8004566:	4630      	mov	r0, r6
 8004568:	f7ff ffa1 	bl	80044ae <__sfputs_r>
 800456c:	3001      	adds	r0, #1
 800456e:	f000 80a9 	beq.w	80046c4 <_vfiprintf_r+0x1f0>
 8004572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004574:	445a      	add	r2, fp
 8004576:	9209      	str	r2, [sp, #36]	; 0x24
 8004578:	f89a 3000 	ldrb.w	r3, [sl]
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 80a1 	beq.w	80046c4 <_vfiprintf_r+0x1f0>
 8004582:	2300      	movs	r3, #0
 8004584:	f04f 32ff 	mov.w	r2, #4294967295
 8004588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800458c:	f10a 0a01 	add.w	sl, sl, #1
 8004590:	9304      	str	r3, [sp, #16]
 8004592:	9307      	str	r3, [sp, #28]
 8004594:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004598:	931a      	str	r3, [sp, #104]	; 0x68
 800459a:	4654      	mov	r4, sl
 800459c:	2205      	movs	r2, #5
 800459e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045a2:	4854      	ldr	r0, [pc, #336]	; (80046f4 <_vfiprintf_r+0x220>)
 80045a4:	f7fb fe1c 	bl	80001e0 <memchr>
 80045a8:	9a04      	ldr	r2, [sp, #16]
 80045aa:	b9d8      	cbnz	r0, 80045e4 <_vfiprintf_r+0x110>
 80045ac:	06d1      	lsls	r1, r2, #27
 80045ae:	bf44      	itt	mi
 80045b0:	2320      	movmi	r3, #32
 80045b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045b6:	0713      	lsls	r3, r2, #28
 80045b8:	bf44      	itt	mi
 80045ba:	232b      	movmi	r3, #43	; 0x2b
 80045bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045c0:	f89a 3000 	ldrb.w	r3, [sl]
 80045c4:	2b2a      	cmp	r3, #42	; 0x2a
 80045c6:	d015      	beq.n	80045f4 <_vfiprintf_r+0x120>
 80045c8:	9a07      	ldr	r2, [sp, #28]
 80045ca:	4654      	mov	r4, sl
 80045cc:	2000      	movs	r0, #0
 80045ce:	f04f 0c0a 	mov.w	ip, #10
 80045d2:	4621      	mov	r1, r4
 80045d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045d8:	3b30      	subs	r3, #48	; 0x30
 80045da:	2b09      	cmp	r3, #9
 80045dc:	d94d      	bls.n	800467a <_vfiprintf_r+0x1a6>
 80045de:	b1b0      	cbz	r0, 800460e <_vfiprintf_r+0x13a>
 80045e0:	9207      	str	r2, [sp, #28]
 80045e2:	e014      	b.n	800460e <_vfiprintf_r+0x13a>
 80045e4:	eba0 0308 	sub.w	r3, r0, r8
 80045e8:	fa09 f303 	lsl.w	r3, r9, r3
 80045ec:	4313      	orrs	r3, r2
 80045ee:	9304      	str	r3, [sp, #16]
 80045f0:	46a2      	mov	sl, r4
 80045f2:	e7d2      	b.n	800459a <_vfiprintf_r+0xc6>
 80045f4:	9b03      	ldr	r3, [sp, #12]
 80045f6:	1d19      	adds	r1, r3, #4
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	9103      	str	r1, [sp, #12]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	bfbb      	ittet	lt
 8004600:	425b      	neglt	r3, r3
 8004602:	f042 0202 	orrlt.w	r2, r2, #2
 8004606:	9307      	strge	r3, [sp, #28]
 8004608:	9307      	strlt	r3, [sp, #28]
 800460a:	bfb8      	it	lt
 800460c:	9204      	strlt	r2, [sp, #16]
 800460e:	7823      	ldrb	r3, [r4, #0]
 8004610:	2b2e      	cmp	r3, #46	; 0x2e
 8004612:	d10c      	bne.n	800462e <_vfiprintf_r+0x15a>
 8004614:	7863      	ldrb	r3, [r4, #1]
 8004616:	2b2a      	cmp	r3, #42	; 0x2a
 8004618:	d134      	bne.n	8004684 <_vfiprintf_r+0x1b0>
 800461a:	9b03      	ldr	r3, [sp, #12]
 800461c:	1d1a      	adds	r2, r3, #4
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	9203      	str	r2, [sp, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	bfb8      	it	lt
 8004626:	f04f 33ff 	movlt.w	r3, #4294967295
 800462a:	3402      	adds	r4, #2
 800462c:	9305      	str	r3, [sp, #20]
 800462e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004704 <_vfiprintf_r+0x230>
 8004632:	7821      	ldrb	r1, [r4, #0]
 8004634:	2203      	movs	r2, #3
 8004636:	4650      	mov	r0, sl
 8004638:	f7fb fdd2 	bl	80001e0 <memchr>
 800463c:	b138      	cbz	r0, 800464e <_vfiprintf_r+0x17a>
 800463e:	9b04      	ldr	r3, [sp, #16]
 8004640:	eba0 000a 	sub.w	r0, r0, sl
 8004644:	2240      	movs	r2, #64	; 0x40
 8004646:	4082      	lsls	r2, r0
 8004648:	4313      	orrs	r3, r2
 800464a:	3401      	adds	r4, #1
 800464c:	9304      	str	r3, [sp, #16]
 800464e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004652:	4829      	ldr	r0, [pc, #164]	; (80046f8 <_vfiprintf_r+0x224>)
 8004654:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004658:	2206      	movs	r2, #6
 800465a:	f7fb fdc1 	bl	80001e0 <memchr>
 800465e:	2800      	cmp	r0, #0
 8004660:	d03f      	beq.n	80046e2 <_vfiprintf_r+0x20e>
 8004662:	4b26      	ldr	r3, [pc, #152]	; (80046fc <_vfiprintf_r+0x228>)
 8004664:	bb1b      	cbnz	r3, 80046ae <_vfiprintf_r+0x1da>
 8004666:	9b03      	ldr	r3, [sp, #12]
 8004668:	3307      	adds	r3, #7
 800466a:	f023 0307 	bic.w	r3, r3, #7
 800466e:	3308      	adds	r3, #8
 8004670:	9303      	str	r3, [sp, #12]
 8004672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004674:	443b      	add	r3, r7
 8004676:	9309      	str	r3, [sp, #36]	; 0x24
 8004678:	e768      	b.n	800454c <_vfiprintf_r+0x78>
 800467a:	fb0c 3202 	mla	r2, ip, r2, r3
 800467e:	460c      	mov	r4, r1
 8004680:	2001      	movs	r0, #1
 8004682:	e7a6      	b.n	80045d2 <_vfiprintf_r+0xfe>
 8004684:	2300      	movs	r3, #0
 8004686:	3401      	adds	r4, #1
 8004688:	9305      	str	r3, [sp, #20]
 800468a:	4619      	mov	r1, r3
 800468c:	f04f 0c0a 	mov.w	ip, #10
 8004690:	4620      	mov	r0, r4
 8004692:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004696:	3a30      	subs	r2, #48	; 0x30
 8004698:	2a09      	cmp	r2, #9
 800469a:	d903      	bls.n	80046a4 <_vfiprintf_r+0x1d0>
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0c6      	beq.n	800462e <_vfiprintf_r+0x15a>
 80046a0:	9105      	str	r1, [sp, #20]
 80046a2:	e7c4      	b.n	800462e <_vfiprintf_r+0x15a>
 80046a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80046a8:	4604      	mov	r4, r0
 80046aa:	2301      	movs	r3, #1
 80046ac:	e7f0      	b.n	8004690 <_vfiprintf_r+0x1bc>
 80046ae:	ab03      	add	r3, sp, #12
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	462a      	mov	r2, r5
 80046b4:	4b12      	ldr	r3, [pc, #72]	; (8004700 <_vfiprintf_r+0x22c>)
 80046b6:	a904      	add	r1, sp, #16
 80046b8:	4630      	mov	r0, r6
 80046ba:	f3af 8000 	nop.w
 80046be:	4607      	mov	r7, r0
 80046c0:	1c78      	adds	r0, r7, #1
 80046c2:	d1d6      	bne.n	8004672 <_vfiprintf_r+0x19e>
 80046c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046c6:	07d9      	lsls	r1, r3, #31
 80046c8:	d405      	bmi.n	80046d6 <_vfiprintf_r+0x202>
 80046ca:	89ab      	ldrh	r3, [r5, #12]
 80046cc:	059a      	lsls	r2, r3, #22
 80046ce:	d402      	bmi.n	80046d6 <_vfiprintf_r+0x202>
 80046d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046d2:	f7ff fddb 	bl	800428c <__retarget_lock_release_recursive>
 80046d6:	89ab      	ldrh	r3, [r5, #12]
 80046d8:	065b      	lsls	r3, r3, #25
 80046da:	f53f af1d 	bmi.w	8004518 <_vfiprintf_r+0x44>
 80046de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046e0:	e71c      	b.n	800451c <_vfiprintf_r+0x48>
 80046e2:	ab03      	add	r3, sp, #12
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	462a      	mov	r2, r5
 80046e8:	4b05      	ldr	r3, [pc, #20]	; (8004700 <_vfiprintf_r+0x22c>)
 80046ea:	a904      	add	r1, sp, #16
 80046ec:	4630      	mov	r0, r6
 80046ee:	f000 f879 	bl	80047e4 <_printf_i>
 80046f2:	e7e4      	b.n	80046be <_vfiprintf_r+0x1ea>
 80046f4:	08004d10 	.word	0x08004d10
 80046f8:	08004d1a 	.word	0x08004d1a
 80046fc:	00000000 	.word	0x00000000
 8004700:	080044af 	.word	0x080044af
 8004704:	08004d16 	.word	0x08004d16

08004708 <_printf_common>:
 8004708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800470c:	4616      	mov	r6, r2
 800470e:	4699      	mov	r9, r3
 8004710:	688a      	ldr	r2, [r1, #8]
 8004712:	690b      	ldr	r3, [r1, #16]
 8004714:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004718:	4293      	cmp	r3, r2
 800471a:	bfb8      	it	lt
 800471c:	4613      	movlt	r3, r2
 800471e:	6033      	str	r3, [r6, #0]
 8004720:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004724:	4607      	mov	r7, r0
 8004726:	460c      	mov	r4, r1
 8004728:	b10a      	cbz	r2, 800472e <_printf_common+0x26>
 800472a:	3301      	adds	r3, #1
 800472c:	6033      	str	r3, [r6, #0]
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	0699      	lsls	r1, r3, #26
 8004732:	bf42      	ittt	mi
 8004734:	6833      	ldrmi	r3, [r6, #0]
 8004736:	3302      	addmi	r3, #2
 8004738:	6033      	strmi	r3, [r6, #0]
 800473a:	6825      	ldr	r5, [r4, #0]
 800473c:	f015 0506 	ands.w	r5, r5, #6
 8004740:	d106      	bne.n	8004750 <_printf_common+0x48>
 8004742:	f104 0a19 	add.w	sl, r4, #25
 8004746:	68e3      	ldr	r3, [r4, #12]
 8004748:	6832      	ldr	r2, [r6, #0]
 800474a:	1a9b      	subs	r3, r3, r2
 800474c:	42ab      	cmp	r3, r5
 800474e:	dc26      	bgt.n	800479e <_printf_common+0x96>
 8004750:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004754:	1e13      	subs	r3, r2, #0
 8004756:	6822      	ldr	r2, [r4, #0]
 8004758:	bf18      	it	ne
 800475a:	2301      	movne	r3, #1
 800475c:	0692      	lsls	r2, r2, #26
 800475e:	d42b      	bmi.n	80047b8 <_printf_common+0xb0>
 8004760:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004764:	4649      	mov	r1, r9
 8004766:	4638      	mov	r0, r7
 8004768:	47c0      	blx	r8
 800476a:	3001      	adds	r0, #1
 800476c:	d01e      	beq.n	80047ac <_printf_common+0xa4>
 800476e:	6823      	ldr	r3, [r4, #0]
 8004770:	6922      	ldr	r2, [r4, #16]
 8004772:	f003 0306 	and.w	r3, r3, #6
 8004776:	2b04      	cmp	r3, #4
 8004778:	bf02      	ittt	eq
 800477a:	68e5      	ldreq	r5, [r4, #12]
 800477c:	6833      	ldreq	r3, [r6, #0]
 800477e:	1aed      	subeq	r5, r5, r3
 8004780:	68a3      	ldr	r3, [r4, #8]
 8004782:	bf0c      	ite	eq
 8004784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004788:	2500      	movne	r5, #0
 800478a:	4293      	cmp	r3, r2
 800478c:	bfc4      	itt	gt
 800478e:	1a9b      	subgt	r3, r3, r2
 8004790:	18ed      	addgt	r5, r5, r3
 8004792:	2600      	movs	r6, #0
 8004794:	341a      	adds	r4, #26
 8004796:	42b5      	cmp	r5, r6
 8004798:	d11a      	bne.n	80047d0 <_printf_common+0xc8>
 800479a:	2000      	movs	r0, #0
 800479c:	e008      	b.n	80047b0 <_printf_common+0xa8>
 800479e:	2301      	movs	r3, #1
 80047a0:	4652      	mov	r2, sl
 80047a2:	4649      	mov	r1, r9
 80047a4:	4638      	mov	r0, r7
 80047a6:	47c0      	blx	r8
 80047a8:	3001      	adds	r0, #1
 80047aa:	d103      	bne.n	80047b4 <_printf_common+0xac>
 80047ac:	f04f 30ff 	mov.w	r0, #4294967295
 80047b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b4:	3501      	adds	r5, #1
 80047b6:	e7c6      	b.n	8004746 <_printf_common+0x3e>
 80047b8:	18e1      	adds	r1, r4, r3
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	2030      	movs	r0, #48	; 0x30
 80047be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047c2:	4422      	add	r2, r4
 80047c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047cc:	3302      	adds	r3, #2
 80047ce:	e7c7      	b.n	8004760 <_printf_common+0x58>
 80047d0:	2301      	movs	r3, #1
 80047d2:	4622      	mov	r2, r4
 80047d4:	4649      	mov	r1, r9
 80047d6:	4638      	mov	r0, r7
 80047d8:	47c0      	blx	r8
 80047da:	3001      	adds	r0, #1
 80047dc:	d0e6      	beq.n	80047ac <_printf_common+0xa4>
 80047de:	3601      	adds	r6, #1
 80047e0:	e7d9      	b.n	8004796 <_printf_common+0x8e>
	...

080047e4 <_printf_i>:
 80047e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047e8:	7e0f      	ldrb	r7, [r1, #24]
 80047ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047ec:	2f78      	cmp	r7, #120	; 0x78
 80047ee:	4691      	mov	r9, r2
 80047f0:	4680      	mov	r8, r0
 80047f2:	460c      	mov	r4, r1
 80047f4:	469a      	mov	sl, r3
 80047f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047fa:	d807      	bhi.n	800480c <_printf_i+0x28>
 80047fc:	2f62      	cmp	r7, #98	; 0x62
 80047fe:	d80a      	bhi.n	8004816 <_printf_i+0x32>
 8004800:	2f00      	cmp	r7, #0
 8004802:	f000 80d4 	beq.w	80049ae <_printf_i+0x1ca>
 8004806:	2f58      	cmp	r7, #88	; 0x58
 8004808:	f000 80c0 	beq.w	800498c <_printf_i+0x1a8>
 800480c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004810:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004814:	e03a      	b.n	800488c <_printf_i+0xa8>
 8004816:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800481a:	2b15      	cmp	r3, #21
 800481c:	d8f6      	bhi.n	800480c <_printf_i+0x28>
 800481e:	a101      	add	r1, pc, #4	; (adr r1, 8004824 <_printf_i+0x40>)
 8004820:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004824:	0800487d 	.word	0x0800487d
 8004828:	08004891 	.word	0x08004891
 800482c:	0800480d 	.word	0x0800480d
 8004830:	0800480d 	.word	0x0800480d
 8004834:	0800480d 	.word	0x0800480d
 8004838:	0800480d 	.word	0x0800480d
 800483c:	08004891 	.word	0x08004891
 8004840:	0800480d 	.word	0x0800480d
 8004844:	0800480d 	.word	0x0800480d
 8004848:	0800480d 	.word	0x0800480d
 800484c:	0800480d 	.word	0x0800480d
 8004850:	08004995 	.word	0x08004995
 8004854:	080048bd 	.word	0x080048bd
 8004858:	0800494f 	.word	0x0800494f
 800485c:	0800480d 	.word	0x0800480d
 8004860:	0800480d 	.word	0x0800480d
 8004864:	080049b7 	.word	0x080049b7
 8004868:	0800480d 	.word	0x0800480d
 800486c:	080048bd 	.word	0x080048bd
 8004870:	0800480d 	.word	0x0800480d
 8004874:	0800480d 	.word	0x0800480d
 8004878:	08004957 	.word	0x08004957
 800487c:	682b      	ldr	r3, [r5, #0]
 800487e:	1d1a      	adds	r2, r3, #4
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	602a      	str	r2, [r5, #0]
 8004884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004888:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800488c:	2301      	movs	r3, #1
 800488e:	e09f      	b.n	80049d0 <_printf_i+0x1ec>
 8004890:	6820      	ldr	r0, [r4, #0]
 8004892:	682b      	ldr	r3, [r5, #0]
 8004894:	0607      	lsls	r7, r0, #24
 8004896:	f103 0104 	add.w	r1, r3, #4
 800489a:	6029      	str	r1, [r5, #0]
 800489c:	d501      	bpl.n	80048a2 <_printf_i+0xbe>
 800489e:	681e      	ldr	r6, [r3, #0]
 80048a0:	e003      	b.n	80048aa <_printf_i+0xc6>
 80048a2:	0646      	lsls	r6, r0, #25
 80048a4:	d5fb      	bpl.n	800489e <_printf_i+0xba>
 80048a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80048aa:	2e00      	cmp	r6, #0
 80048ac:	da03      	bge.n	80048b6 <_printf_i+0xd2>
 80048ae:	232d      	movs	r3, #45	; 0x2d
 80048b0:	4276      	negs	r6, r6
 80048b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048b6:	485a      	ldr	r0, [pc, #360]	; (8004a20 <_printf_i+0x23c>)
 80048b8:	230a      	movs	r3, #10
 80048ba:	e012      	b.n	80048e2 <_printf_i+0xfe>
 80048bc:	682b      	ldr	r3, [r5, #0]
 80048be:	6820      	ldr	r0, [r4, #0]
 80048c0:	1d19      	adds	r1, r3, #4
 80048c2:	6029      	str	r1, [r5, #0]
 80048c4:	0605      	lsls	r5, r0, #24
 80048c6:	d501      	bpl.n	80048cc <_printf_i+0xe8>
 80048c8:	681e      	ldr	r6, [r3, #0]
 80048ca:	e002      	b.n	80048d2 <_printf_i+0xee>
 80048cc:	0641      	lsls	r1, r0, #25
 80048ce:	d5fb      	bpl.n	80048c8 <_printf_i+0xe4>
 80048d0:	881e      	ldrh	r6, [r3, #0]
 80048d2:	4853      	ldr	r0, [pc, #332]	; (8004a20 <_printf_i+0x23c>)
 80048d4:	2f6f      	cmp	r7, #111	; 0x6f
 80048d6:	bf0c      	ite	eq
 80048d8:	2308      	moveq	r3, #8
 80048da:	230a      	movne	r3, #10
 80048dc:	2100      	movs	r1, #0
 80048de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048e2:	6865      	ldr	r5, [r4, #4]
 80048e4:	60a5      	str	r5, [r4, #8]
 80048e6:	2d00      	cmp	r5, #0
 80048e8:	bfa2      	ittt	ge
 80048ea:	6821      	ldrge	r1, [r4, #0]
 80048ec:	f021 0104 	bicge.w	r1, r1, #4
 80048f0:	6021      	strge	r1, [r4, #0]
 80048f2:	b90e      	cbnz	r6, 80048f8 <_printf_i+0x114>
 80048f4:	2d00      	cmp	r5, #0
 80048f6:	d04b      	beq.n	8004990 <_printf_i+0x1ac>
 80048f8:	4615      	mov	r5, r2
 80048fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80048fe:	fb03 6711 	mls	r7, r3, r1, r6
 8004902:	5dc7      	ldrb	r7, [r0, r7]
 8004904:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004908:	4637      	mov	r7, r6
 800490a:	42bb      	cmp	r3, r7
 800490c:	460e      	mov	r6, r1
 800490e:	d9f4      	bls.n	80048fa <_printf_i+0x116>
 8004910:	2b08      	cmp	r3, #8
 8004912:	d10b      	bne.n	800492c <_printf_i+0x148>
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	07de      	lsls	r6, r3, #31
 8004918:	d508      	bpl.n	800492c <_printf_i+0x148>
 800491a:	6923      	ldr	r3, [r4, #16]
 800491c:	6861      	ldr	r1, [r4, #4]
 800491e:	4299      	cmp	r1, r3
 8004920:	bfde      	ittt	le
 8004922:	2330      	movle	r3, #48	; 0x30
 8004924:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004928:	f105 35ff 	addle.w	r5, r5, #4294967295
 800492c:	1b52      	subs	r2, r2, r5
 800492e:	6122      	str	r2, [r4, #16]
 8004930:	f8cd a000 	str.w	sl, [sp]
 8004934:	464b      	mov	r3, r9
 8004936:	aa03      	add	r2, sp, #12
 8004938:	4621      	mov	r1, r4
 800493a:	4640      	mov	r0, r8
 800493c:	f7ff fee4 	bl	8004708 <_printf_common>
 8004940:	3001      	adds	r0, #1
 8004942:	d14a      	bne.n	80049da <_printf_i+0x1f6>
 8004944:	f04f 30ff 	mov.w	r0, #4294967295
 8004948:	b004      	add	sp, #16
 800494a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	f043 0320 	orr.w	r3, r3, #32
 8004954:	6023      	str	r3, [r4, #0]
 8004956:	4833      	ldr	r0, [pc, #204]	; (8004a24 <_printf_i+0x240>)
 8004958:	2778      	movs	r7, #120	; 0x78
 800495a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	6829      	ldr	r1, [r5, #0]
 8004962:	061f      	lsls	r7, r3, #24
 8004964:	f851 6b04 	ldr.w	r6, [r1], #4
 8004968:	d402      	bmi.n	8004970 <_printf_i+0x18c>
 800496a:	065f      	lsls	r7, r3, #25
 800496c:	bf48      	it	mi
 800496e:	b2b6      	uxthmi	r6, r6
 8004970:	07df      	lsls	r7, r3, #31
 8004972:	bf48      	it	mi
 8004974:	f043 0320 	orrmi.w	r3, r3, #32
 8004978:	6029      	str	r1, [r5, #0]
 800497a:	bf48      	it	mi
 800497c:	6023      	strmi	r3, [r4, #0]
 800497e:	b91e      	cbnz	r6, 8004988 <_printf_i+0x1a4>
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	f023 0320 	bic.w	r3, r3, #32
 8004986:	6023      	str	r3, [r4, #0]
 8004988:	2310      	movs	r3, #16
 800498a:	e7a7      	b.n	80048dc <_printf_i+0xf8>
 800498c:	4824      	ldr	r0, [pc, #144]	; (8004a20 <_printf_i+0x23c>)
 800498e:	e7e4      	b.n	800495a <_printf_i+0x176>
 8004990:	4615      	mov	r5, r2
 8004992:	e7bd      	b.n	8004910 <_printf_i+0x12c>
 8004994:	682b      	ldr	r3, [r5, #0]
 8004996:	6826      	ldr	r6, [r4, #0]
 8004998:	6961      	ldr	r1, [r4, #20]
 800499a:	1d18      	adds	r0, r3, #4
 800499c:	6028      	str	r0, [r5, #0]
 800499e:	0635      	lsls	r5, r6, #24
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	d501      	bpl.n	80049a8 <_printf_i+0x1c4>
 80049a4:	6019      	str	r1, [r3, #0]
 80049a6:	e002      	b.n	80049ae <_printf_i+0x1ca>
 80049a8:	0670      	lsls	r0, r6, #25
 80049aa:	d5fb      	bpl.n	80049a4 <_printf_i+0x1c0>
 80049ac:	8019      	strh	r1, [r3, #0]
 80049ae:	2300      	movs	r3, #0
 80049b0:	6123      	str	r3, [r4, #16]
 80049b2:	4615      	mov	r5, r2
 80049b4:	e7bc      	b.n	8004930 <_printf_i+0x14c>
 80049b6:	682b      	ldr	r3, [r5, #0]
 80049b8:	1d1a      	adds	r2, r3, #4
 80049ba:	602a      	str	r2, [r5, #0]
 80049bc:	681d      	ldr	r5, [r3, #0]
 80049be:	6862      	ldr	r2, [r4, #4]
 80049c0:	2100      	movs	r1, #0
 80049c2:	4628      	mov	r0, r5
 80049c4:	f7fb fc0c 	bl	80001e0 <memchr>
 80049c8:	b108      	cbz	r0, 80049ce <_printf_i+0x1ea>
 80049ca:	1b40      	subs	r0, r0, r5
 80049cc:	6060      	str	r0, [r4, #4]
 80049ce:	6863      	ldr	r3, [r4, #4]
 80049d0:	6123      	str	r3, [r4, #16]
 80049d2:	2300      	movs	r3, #0
 80049d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049d8:	e7aa      	b.n	8004930 <_printf_i+0x14c>
 80049da:	6923      	ldr	r3, [r4, #16]
 80049dc:	462a      	mov	r2, r5
 80049de:	4649      	mov	r1, r9
 80049e0:	4640      	mov	r0, r8
 80049e2:	47d0      	blx	sl
 80049e4:	3001      	adds	r0, #1
 80049e6:	d0ad      	beq.n	8004944 <_printf_i+0x160>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	079b      	lsls	r3, r3, #30
 80049ec:	d413      	bmi.n	8004a16 <_printf_i+0x232>
 80049ee:	68e0      	ldr	r0, [r4, #12]
 80049f0:	9b03      	ldr	r3, [sp, #12]
 80049f2:	4298      	cmp	r0, r3
 80049f4:	bfb8      	it	lt
 80049f6:	4618      	movlt	r0, r3
 80049f8:	e7a6      	b.n	8004948 <_printf_i+0x164>
 80049fa:	2301      	movs	r3, #1
 80049fc:	4632      	mov	r2, r6
 80049fe:	4649      	mov	r1, r9
 8004a00:	4640      	mov	r0, r8
 8004a02:	47d0      	blx	sl
 8004a04:	3001      	adds	r0, #1
 8004a06:	d09d      	beq.n	8004944 <_printf_i+0x160>
 8004a08:	3501      	adds	r5, #1
 8004a0a:	68e3      	ldr	r3, [r4, #12]
 8004a0c:	9903      	ldr	r1, [sp, #12]
 8004a0e:	1a5b      	subs	r3, r3, r1
 8004a10:	42ab      	cmp	r3, r5
 8004a12:	dcf2      	bgt.n	80049fa <_printf_i+0x216>
 8004a14:	e7eb      	b.n	80049ee <_printf_i+0x20a>
 8004a16:	2500      	movs	r5, #0
 8004a18:	f104 0619 	add.w	r6, r4, #25
 8004a1c:	e7f5      	b.n	8004a0a <_printf_i+0x226>
 8004a1e:	bf00      	nop
 8004a20:	08004d21 	.word	0x08004d21
 8004a24:	08004d32 	.word	0x08004d32

08004a28 <__sflush_r>:
 8004a28:	898a      	ldrh	r2, [r1, #12]
 8004a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a2e:	4605      	mov	r5, r0
 8004a30:	0710      	lsls	r0, r2, #28
 8004a32:	460c      	mov	r4, r1
 8004a34:	d458      	bmi.n	8004ae8 <__sflush_r+0xc0>
 8004a36:	684b      	ldr	r3, [r1, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	dc05      	bgt.n	8004a48 <__sflush_r+0x20>
 8004a3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	dc02      	bgt.n	8004a48 <__sflush_r+0x20>
 8004a42:	2000      	movs	r0, #0
 8004a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a4a:	2e00      	cmp	r6, #0
 8004a4c:	d0f9      	beq.n	8004a42 <__sflush_r+0x1a>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a54:	682f      	ldr	r7, [r5, #0]
 8004a56:	6a21      	ldr	r1, [r4, #32]
 8004a58:	602b      	str	r3, [r5, #0]
 8004a5a:	d032      	beq.n	8004ac2 <__sflush_r+0x9a>
 8004a5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a5e:	89a3      	ldrh	r3, [r4, #12]
 8004a60:	075a      	lsls	r2, r3, #29
 8004a62:	d505      	bpl.n	8004a70 <__sflush_r+0x48>
 8004a64:	6863      	ldr	r3, [r4, #4]
 8004a66:	1ac0      	subs	r0, r0, r3
 8004a68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a6a:	b10b      	cbz	r3, 8004a70 <__sflush_r+0x48>
 8004a6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a6e:	1ac0      	subs	r0, r0, r3
 8004a70:	2300      	movs	r3, #0
 8004a72:	4602      	mov	r2, r0
 8004a74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a76:	6a21      	ldr	r1, [r4, #32]
 8004a78:	4628      	mov	r0, r5
 8004a7a:	47b0      	blx	r6
 8004a7c:	1c43      	adds	r3, r0, #1
 8004a7e:	89a3      	ldrh	r3, [r4, #12]
 8004a80:	d106      	bne.n	8004a90 <__sflush_r+0x68>
 8004a82:	6829      	ldr	r1, [r5, #0]
 8004a84:	291d      	cmp	r1, #29
 8004a86:	d82b      	bhi.n	8004ae0 <__sflush_r+0xb8>
 8004a88:	4a29      	ldr	r2, [pc, #164]	; (8004b30 <__sflush_r+0x108>)
 8004a8a:	410a      	asrs	r2, r1
 8004a8c:	07d6      	lsls	r6, r2, #31
 8004a8e:	d427      	bmi.n	8004ae0 <__sflush_r+0xb8>
 8004a90:	2200      	movs	r2, #0
 8004a92:	6062      	str	r2, [r4, #4]
 8004a94:	04d9      	lsls	r1, r3, #19
 8004a96:	6922      	ldr	r2, [r4, #16]
 8004a98:	6022      	str	r2, [r4, #0]
 8004a9a:	d504      	bpl.n	8004aa6 <__sflush_r+0x7e>
 8004a9c:	1c42      	adds	r2, r0, #1
 8004a9e:	d101      	bne.n	8004aa4 <__sflush_r+0x7c>
 8004aa0:	682b      	ldr	r3, [r5, #0]
 8004aa2:	b903      	cbnz	r3, 8004aa6 <__sflush_r+0x7e>
 8004aa4:	6560      	str	r0, [r4, #84]	; 0x54
 8004aa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004aa8:	602f      	str	r7, [r5, #0]
 8004aaa:	2900      	cmp	r1, #0
 8004aac:	d0c9      	beq.n	8004a42 <__sflush_r+0x1a>
 8004aae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ab2:	4299      	cmp	r1, r3
 8004ab4:	d002      	beq.n	8004abc <__sflush_r+0x94>
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f7ff fbea 	bl	8004290 <_free_r>
 8004abc:	2000      	movs	r0, #0
 8004abe:	6360      	str	r0, [r4, #52]	; 0x34
 8004ac0:	e7c0      	b.n	8004a44 <__sflush_r+0x1c>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	47b0      	blx	r6
 8004ac8:	1c41      	adds	r1, r0, #1
 8004aca:	d1c8      	bne.n	8004a5e <__sflush_r+0x36>
 8004acc:	682b      	ldr	r3, [r5, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0c5      	beq.n	8004a5e <__sflush_r+0x36>
 8004ad2:	2b1d      	cmp	r3, #29
 8004ad4:	d001      	beq.n	8004ada <__sflush_r+0xb2>
 8004ad6:	2b16      	cmp	r3, #22
 8004ad8:	d101      	bne.n	8004ade <__sflush_r+0xb6>
 8004ada:	602f      	str	r7, [r5, #0]
 8004adc:	e7b1      	b.n	8004a42 <__sflush_r+0x1a>
 8004ade:	89a3      	ldrh	r3, [r4, #12]
 8004ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ae4:	81a3      	strh	r3, [r4, #12]
 8004ae6:	e7ad      	b.n	8004a44 <__sflush_r+0x1c>
 8004ae8:	690f      	ldr	r7, [r1, #16]
 8004aea:	2f00      	cmp	r7, #0
 8004aec:	d0a9      	beq.n	8004a42 <__sflush_r+0x1a>
 8004aee:	0793      	lsls	r3, r2, #30
 8004af0:	680e      	ldr	r6, [r1, #0]
 8004af2:	bf08      	it	eq
 8004af4:	694b      	ldreq	r3, [r1, #20]
 8004af6:	600f      	str	r7, [r1, #0]
 8004af8:	bf18      	it	ne
 8004afa:	2300      	movne	r3, #0
 8004afc:	eba6 0807 	sub.w	r8, r6, r7
 8004b00:	608b      	str	r3, [r1, #8]
 8004b02:	f1b8 0f00 	cmp.w	r8, #0
 8004b06:	dd9c      	ble.n	8004a42 <__sflush_r+0x1a>
 8004b08:	6a21      	ldr	r1, [r4, #32]
 8004b0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b0c:	4643      	mov	r3, r8
 8004b0e:	463a      	mov	r2, r7
 8004b10:	4628      	mov	r0, r5
 8004b12:	47b0      	blx	r6
 8004b14:	2800      	cmp	r0, #0
 8004b16:	dc06      	bgt.n	8004b26 <__sflush_r+0xfe>
 8004b18:	89a3      	ldrh	r3, [r4, #12]
 8004b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b1e:	81a3      	strh	r3, [r4, #12]
 8004b20:	f04f 30ff 	mov.w	r0, #4294967295
 8004b24:	e78e      	b.n	8004a44 <__sflush_r+0x1c>
 8004b26:	4407      	add	r7, r0
 8004b28:	eba8 0800 	sub.w	r8, r8, r0
 8004b2c:	e7e9      	b.n	8004b02 <__sflush_r+0xda>
 8004b2e:	bf00      	nop
 8004b30:	dfbffffe 	.word	0xdfbffffe

08004b34 <_fflush_r>:
 8004b34:	b538      	push	{r3, r4, r5, lr}
 8004b36:	690b      	ldr	r3, [r1, #16]
 8004b38:	4605      	mov	r5, r0
 8004b3a:	460c      	mov	r4, r1
 8004b3c:	b913      	cbnz	r3, 8004b44 <_fflush_r+0x10>
 8004b3e:	2500      	movs	r5, #0
 8004b40:	4628      	mov	r0, r5
 8004b42:	bd38      	pop	{r3, r4, r5, pc}
 8004b44:	b118      	cbz	r0, 8004b4e <_fflush_r+0x1a>
 8004b46:	6a03      	ldr	r3, [r0, #32]
 8004b48:	b90b      	cbnz	r3, 8004b4e <_fflush_r+0x1a>
 8004b4a:	f7ff f9a9 	bl	8003ea0 <__sinit>
 8004b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0f3      	beq.n	8004b3e <_fflush_r+0xa>
 8004b56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b58:	07d0      	lsls	r0, r2, #31
 8004b5a:	d404      	bmi.n	8004b66 <_fflush_r+0x32>
 8004b5c:	0599      	lsls	r1, r3, #22
 8004b5e:	d402      	bmi.n	8004b66 <_fflush_r+0x32>
 8004b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b62:	f7ff fb92 	bl	800428a <__retarget_lock_acquire_recursive>
 8004b66:	4628      	mov	r0, r5
 8004b68:	4621      	mov	r1, r4
 8004b6a:	f7ff ff5d 	bl	8004a28 <__sflush_r>
 8004b6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b70:	07da      	lsls	r2, r3, #31
 8004b72:	4605      	mov	r5, r0
 8004b74:	d4e4      	bmi.n	8004b40 <_fflush_r+0xc>
 8004b76:	89a3      	ldrh	r3, [r4, #12]
 8004b78:	059b      	lsls	r3, r3, #22
 8004b7a:	d4e1      	bmi.n	8004b40 <_fflush_r+0xc>
 8004b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b7e:	f7ff fb85 	bl	800428c <__retarget_lock_release_recursive>
 8004b82:	e7dd      	b.n	8004b40 <_fflush_r+0xc>

08004b84 <__swhatbuf_r>:
 8004b84:	b570      	push	{r4, r5, r6, lr}
 8004b86:	460c      	mov	r4, r1
 8004b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b8c:	2900      	cmp	r1, #0
 8004b8e:	b096      	sub	sp, #88	; 0x58
 8004b90:	4615      	mov	r5, r2
 8004b92:	461e      	mov	r6, r3
 8004b94:	da0d      	bge.n	8004bb2 <__swhatbuf_r+0x2e>
 8004b96:	89a3      	ldrh	r3, [r4, #12]
 8004b98:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b9c:	f04f 0100 	mov.w	r1, #0
 8004ba0:	bf0c      	ite	eq
 8004ba2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004ba6:	2340      	movne	r3, #64	; 0x40
 8004ba8:	2000      	movs	r0, #0
 8004baa:	6031      	str	r1, [r6, #0]
 8004bac:	602b      	str	r3, [r5, #0]
 8004bae:	b016      	add	sp, #88	; 0x58
 8004bb0:	bd70      	pop	{r4, r5, r6, pc}
 8004bb2:	466a      	mov	r2, sp
 8004bb4:	f000 f848 	bl	8004c48 <_fstat_r>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	dbec      	blt.n	8004b96 <__swhatbuf_r+0x12>
 8004bbc:	9901      	ldr	r1, [sp, #4]
 8004bbe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004bc2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004bc6:	4259      	negs	r1, r3
 8004bc8:	4159      	adcs	r1, r3
 8004bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bce:	e7eb      	b.n	8004ba8 <__swhatbuf_r+0x24>

08004bd0 <__smakebuf_r>:
 8004bd0:	898b      	ldrh	r3, [r1, #12]
 8004bd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bd4:	079d      	lsls	r5, r3, #30
 8004bd6:	4606      	mov	r6, r0
 8004bd8:	460c      	mov	r4, r1
 8004bda:	d507      	bpl.n	8004bec <__smakebuf_r+0x1c>
 8004bdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004be0:	6023      	str	r3, [r4, #0]
 8004be2:	6123      	str	r3, [r4, #16]
 8004be4:	2301      	movs	r3, #1
 8004be6:	6163      	str	r3, [r4, #20]
 8004be8:	b002      	add	sp, #8
 8004bea:	bd70      	pop	{r4, r5, r6, pc}
 8004bec:	ab01      	add	r3, sp, #4
 8004bee:	466a      	mov	r2, sp
 8004bf0:	f7ff ffc8 	bl	8004b84 <__swhatbuf_r>
 8004bf4:	9900      	ldr	r1, [sp, #0]
 8004bf6:	4605      	mov	r5, r0
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	f7ff fbb5 	bl	8004368 <_malloc_r>
 8004bfe:	b948      	cbnz	r0, 8004c14 <__smakebuf_r+0x44>
 8004c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c04:	059a      	lsls	r2, r3, #22
 8004c06:	d4ef      	bmi.n	8004be8 <__smakebuf_r+0x18>
 8004c08:	f023 0303 	bic.w	r3, r3, #3
 8004c0c:	f043 0302 	orr.w	r3, r3, #2
 8004c10:	81a3      	strh	r3, [r4, #12]
 8004c12:	e7e3      	b.n	8004bdc <__smakebuf_r+0xc>
 8004c14:	89a3      	ldrh	r3, [r4, #12]
 8004c16:	6020      	str	r0, [r4, #0]
 8004c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c1c:	81a3      	strh	r3, [r4, #12]
 8004c1e:	9b00      	ldr	r3, [sp, #0]
 8004c20:	6163      	str	r3, [r4, #20]
 8004c22:	9b01      	ldr	r3, [sp, #4]
 8004c24:	6120      	str	r0, [r4, #16]
 8004c26:	b15b      	cbz	r3, 8004c40 <__smakebuf_r+0x70>
 8004c28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	f000 f81d 	bl	8004c6c <_isatty_r>
 8004c32:	b128      	cbz	r0, 8004c40 <__smakebuf_r+0x70>
 8004c34:	89a3      	ldrh	r3, [r4, #12]
 8004c36:	f023 0303 	bic.w	r3, r3, #3
 8004c3a:	f043 0301 	orr.w	r3, r3, #1
 8004c3e:	81a3      	strh	r3, [r4, #12]
 8004c40:	89a3      	ldrh	r3, [r4, #12]
 8004c42:	431d      	orrs	r5, r3
 8004c44:	81a5      	strh	r5, [r4, #12]
 8004c46:	e7cf      	b.n	8004be8 <__smakebuf_r+0x18>

08004c48 <_fstat_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4d07      	ldr	r5, [pc, #28]	; (8004c68 <_fstat_r+0x20>)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	4604      	mov	r4, r0
 8004c50:	4608      	mov	r0, r1
 8004c52:	4611      	mov	r1, r2
 8004c54:	602b      	str	r3, [r5, #0]
 8004c56:	f7fc fbcc 	bl	80013f2 <_fstat>
 8004c5a:	1c43      	adds	r3, r0, #1
 8004c5c:	d102      	bne.n	8004c64 <_fstat_r+0x1c>
 8004c5e:	682b      	ldr	r3, [r5, #0]
 8004c60:	b103      	cbz	r3, 8004c64 <_fstat_r+0x1c>
 8004c62:	6023      	str	r3, [r4, #0]
 8004c64:	bd38      	pop	{r3, r4, r5, pc}
 8004c66:	bf00      	nop
 8004c68:	20000354 	.word	0x20000354

08004c6c <_isatty_r>:
 8004c6c:	b538      	push	{r3, r4, r5, lr}
 8004c6e:	4d06      	ldr	r5, [pc, #24]	; (8004c88 <_isatty_r+0x1c>)
 8004c70:	2300      	movs	r3, #0
 8004c72:	4604      	mov	r4, r0
 8004c74:	4608      	mov	r0, r1
 8004c76:	602b      	str	r3, [r5, #0]
 8004c78:	f7fc fbcb 	bl	8001412 <_isatty>
 8004c7c:	1c43      	adds	r3, r0, #1
 8004c7e:	d102      	bne.n	8004c86 <_isatty_r+0x1a>
 8004c80:	682b      	ldr	r3, [r5, #0]
 8004c82:	b103      	cbz	r3, 8004c86 <_isatty_r+0x1a>
 8004c84:	6023      	str	r3, [r4, #0]
 8004c86:	bd38      	pop	{r3, r4, r5, pc}
 8004c88:	20000354 	.word	0x20000354

08004c8c <_sbrk_r>:
 8004c8c:	b538      	push	{r3, r4, r5, lr}
 8004c8e:	4d06      	ldr	r5, [pc, #24]	; (8004ca8 <_sbrk_r+0x1c>)
 8004c90:	2300      	movs	r3, #0
 8004c92:	4604      	mov	r4, r0
 8004c94:	4608      	mov	r0, r1
 8004c96:	602b      	str	r3, [r5, #0]
 8004c98:	f7fc fbd4 	bl	8001444 <_sbrk>
 8004c9c:	1c43      	adds	r3, r0, #1
 8004c9e:	d102      	bne.n	8004ca6 <_sbrk_r+0x1a>
 8004ca0:	682b      	ldr	r3, [r5, #0]
 8004ca2:	b103      	cbz	r3, 8004ca6 <_sbrk_r+0x1a>
 8004ca4:	6023      	str	r3, [r4, #0]
 8004ca6:	bd38      	pop	{r3, r4, r5, pc}
 8004ca8:	20000354 	.word	0x20000354

08004cac <_init>:
 8004cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cae:	bf00      	nop
 8004cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb2:	bc08      	pop	{r3}
 8004cb4:	469e      	mov	lr, r3
 8004cb6:	4770      	bx	lr

08004cb8 <_fini>:
 8004cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cba:	bf00      	nop
 8004cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cbe:	bc08      	pop	{r3}
 8004cc0:	469e      	mov	lr, r3
 8004cc2:	4770      	bx	lr
